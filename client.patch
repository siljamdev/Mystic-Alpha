--- net/minecraft/src/GuiIngameMenu.java
+++ net/minecraft/src/GuiIngameMenu.java
@@ -1,5 +1,7 @@
 package net.minecraft.src;
 
+import net.minecraft.client.Minecraft;
+
 public class GuiIngameMenu extends GuiScreen {
 	private int updateCounter2 = 0;
 	private int updateCounter = 0;
@@ -7,13 +9,14 @@
 	public void initGui() {
 		this.updateCounter2 = 0;
 		this.controlList.clear();
-		this.controlList.add(new GuiButton(1, this.width / 2 - 100, this.height / 4 + 48, "Save and quit to title"));
+		this.controlList.add(new GuiButton(1, this.width / 2 - 100, this.height / 4 + 96, "Save and quit to title"));
 		if(this.mc.isMultiplayerWorld()) {
 			((GuiButton)this.controlList.get(0)).displayString = "Disconnect";
 		}
 
 		this.controlList.add(new GuiButton(4, this.width / 2 - 100, this.height / 4 + 24, "Back to game"));
-		this.controlList.add(new GuiButton(0, this.width / 2 - 100, this.height / 4 + 96, "Options..."));
+		this.controlList.add(new GuiButton(5, this.width / 2 - 100, this.height / 4 + 72, "Fullscreen"));
+		this.controlList.add(new GuiButton(0, this.width / 2 - 100, this.height / 4 + 48, "Options..."));
 	}
 
 	protected void actionPerformed(GuiButton var1) {
@@ -27,12 +30,17 @@
 			}
 
 			this.mc.func_6261_a((World)null);
+			this.mc.setWindowTitle(Minecraft.getName());
 			this.mc.displayGuiScreen(new GuiMainMenu());
 		}
 
 		if(var1.id == 4) {
 			this.mc.displayGuiScreen((GuiScreen)null);
 			this.mc.func_6259_e();
+		}
+		
+		if(var1.id == 5) {
+			this.mc.toggleFullscreen();
 		}
 
 	}
--- net/minecraft/src/MobSpawnerBase.java
+++ net/minecraft/src/MobSpawnerBase.java
@@ -20,7 +20,7 @@
 	public byte topBlock = (byte)Block.grass.blockID;
 	public byte fillerBlock = (byte)Block.dirt.blockID;
 	public int field_6502_q = 5169201;
-	protected Class[] biomeMonsters = new Class[]{EntitySpider.class, EntityZombie.class, EntitySkeleton.class, EntityCreeper.class};
+	protected Class[] biomeMonsters = new Class[]{EntitySpider.class, EntityZombie.class, EntitySkeleton.class, EntityCreeper.class, EntitySlime.class};
 	protected Class[] biomeCreatures = new Class[]{EntitySheep.class, EntityPig.class, EntityChicken.class, EntityCow.class};
 	private static MobSpawnerBase[] biomeLookupTable = new MobSpawnerBase[4096];
 
--- net/minecraft/src/ItemFood.java
+++ net/minecraft/src/ItemFood.java
@@ -1,17 +1,19 @@
 package net.minecraft.src;
 
 public class ItemFood extends Item {
-	private int healAmount;
+	protected int healAmount;
 
 	public ItemFood(int var1, int var2) {
 		super(var1);
 		this.healAmount = var2;
-		this.maxStackSize = 1;
+		this.maxStackSize = 16;
 	}
 
 	public ItemStack onItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
-		--var1.stackSize;
-		var3.heal(this.healAmount);
+		if (var3.health != var3.maxHealth){
+			--var1.stackSize;
+			var3.heal(this.healAmount);
+		}
 		return var1;
 	}
 }
--- /dev/null
+++ ibxm/Instrument.java
@@ -1,0 +1,98 @@
+package ibxm;
+
+public class Instrument {
+	public String name = "";
+	public int vibrato_type;
+	public int vibrato_sweep;
+	public int vibrato_depth;
+	public int vibrato_rate;
+	public boolean volume_envelope_active;
+	public boolean panning_envelope_active;
+	public int volume_fade_out;
+	private Envelope volume_envelope;
+	private Envelope panning_envelope;
+	private int[] key_to_sample;
+	private Sample[] samples;
+
+	public Instrument() {
+		this.set_volume_envelope(new Envelope());
+		this.set_panning_envelope(new Envelope());
+		this.key_to_sample = new int[96];
+		this.set_num_samples(1);
+	}
+
+	public Envelope get_volume_envelope() {
+		return this.volume_envelope;
+	}
+
+	public void set_volume_envelope(Envelope envelope) {
+		if(envelope != null) {
+			this.volume_envelope = envelope;
+		}
+
+	}
+
+	public Envelope get_panning_envelope() {
+		return this.panning_envelope;
+	}
+
+	public void set_panning_envelope(Envelope envelope) {
+		if(envelope != null) {
+			this.panning_envelope = envelope;
+		}
+
+	}
+
+	public Sample get_sample_from_key(int key) {
+		int sample_idx = 0;
+		if(key > 0 && key <= this.key_to_sample.length) {
+			sample_idx = this.key_to_sample[key - 1];
+		}
+
+		return this.get_sample(sample_idx);
+	}
+
+	public void set_key_to_sample(int key, int sample) {
+		if(key > 0 && key <= this.key_to_sample.length) {
+			this.key_to_sample[key - 1] = sample;
+		}
+
+	}
+
+	public int get_num_samples() {
+		return this.samples.length;
+	}
+
+	public void set_num_samples(int num_samples) {
+		if(num_samples < 1) {
+			num_samples = 1;
+		}
+
+		this.samples = new Sample[num_samples];
+		this.set_sample(0, (Sample)null);
+	}
+
+	public Sample get_sample(int sample_index) {
+		Sample sample = null;
+		if(sample_index >= 0 && sample_index < this.samples.length) {
+			sample = this.samples[sample_index];
+		}
+
+		if(sample == null) {
+			sample = this.samples[0];
+		}
+
+		return sample;
+	}
+
+	public void set_sample(int sample_index, Sample sample) {
+		if(sample_index >= 0 && sample_index < this.samples.length) {
+			this.samples[sample_index] = sample;
+		}
+
+		if(this.samples[0] == null) {
+			this.samples[0] = new Sample();
+		}
+
+	}
+}
--- /dev/null
+++ net/minecraft/src/WorldGenGlowingObsidian1.java
@@ -1,0 +1,61 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class WorldGenGlowingObsidian1 extends WorldGenerator {
+	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
+		if(var1.getBlockId(var3, var4, var5) != 0) {
+			return false;
+		} else if(var1.getBlockId(var3, var4 + 1, var5) != Block.bloodStone.blockID) {
+			return false;
+		} else {
+			var1.setBlockWithNotify(var3, var4, var5, Block.glowingObsidian.blockID);
+
+			for(int var6 = 0; var6 < 1500; ++var6) {
+				int var7 = var3 + var2.nextInt(8) - var2.nextInt(8);
+				int var8 = var4 - var2.nextInt(12);
+				int var9 = var5 + var2.nextInt(8) - var2.nextInt(8);
+				if(var1.getBlockId(var7, var8, var9) == 0) {
+					int var10 = 0;
+
+					for(int var11 = 0; var11 < 6; ++var11) {
+						int var12 = 0;
+						if(var11 == 0) {
+							var12 = var1.getBlockId(var7 - 1, var8, var9);
+						}
+
+						if(var11 == 1) {
+							var12 = var1.getBlockId(var7 + 1, var8, var9);
+						}
+
+						if(var11 == 2) {
+							var12 = var1.getBlockId(var7, var8 - 1, var9);
+						}
+
+						if(var11 == 3) {
+							var12 = var1.getBlockId(var7, var8 + 1, var9);
+						}
+
+						if(var11 == 4) {
+							var12 = var1.getBlockId(var7, var8, var9 - 1);
+						}
+
+						if(var11 == 5) {
+							var12 = var1.getBlockId(var7, var8, var9 + 1);
+						}
+
+						if(var12 == Block.glowingObsidian.blockID) {
+							++var10;
+						}
+					}
+
+					if(var10 == 1) {
+						var1.setBlockWithNotify(var7, var8, var9, Block.glowingObsidian.blockID);
+					}
+				}
+			}
+
+			return true;
+		}
+	}
+}
--- /dev/null
+++ net/minecraft/src/GuiMediumButton.java
@@ -1,0 +1,7 @@
+package net.minecraft.src;
+
+public class GuiMediumButton extends GuiButton {
+	public GuiMediumButton(int var1, int var2, int var3, String var4) {
+		super(var1, var2, var3, 98, 20, var4);
+	}
+}
--- net/minecraft/src/World.java
+++ net/minecraft/src/World.java
@@ -54,6 +54,8 @@
 	private int field_9426_L;
 	private List field_1012_M;
 	public boolean multiplayerWorld;
+	public boolean cheatsActivated;
+	public boolean grassPyramids;
 
 	public static NBTTagCompound func_629_a(File var0, String var1) {
 		File var2 = new File(var0, "saves");
@@ -104,6 +106,14 @@
 		this(var1, var2, (new Random()).nextLong());
 	}
 
+	public World(File var1, String var2, WorldCreationSettings var3) {
+		this(var1, var2, (var3 != null ? var3.seed : (new Random()).nextLong()));
+		if(var3 != null){
+			this.cheatsActivated = var3.cheats;
+			this.grassPyramids = var3.pyramids;
+		}
+	}
+
 	public World(String var1, WorldProvider var2, long var3) {
 		this.field_4214_a = false;
 		this.field_1051_z = new ArrayList();
@@ -178,6 +188,7 @@
 		this.spawnY = var1.spawnY;
 		this.spawnZ = var1.spawnZ;
 		this.sizeOnDisk = var1.sizeOnDisk;
+		this.cheatsActivated = var1.cheatsActivated;
 		this.worldProvider = var2;
 		var2.registerWorld(this);
 		this.chunkProvider = this.func_4081_a(this.field_9432_t);
@@ -249,6 +260,8 @@
 				this.spawnZ = var9.getInteger("SpawnZ");
 				this.worldTime = var9.getLong("Time");
 				this.sizeOnDisk = var9.getLong("SizeOnDisk");
+				this.cheatsActivated = var9.getBoolean("Cheats");
+				System.out.println("Cheats are: " + (this.cheatsActivated ? "activated" : "deactivated"));
 				if(var9.hasKey("Player")) {
 					this.nbtCompoundPlayer = var9.getCompoundTag("Player");
 					int var10 = this.nbtCompoundPlayer.getInteger("Dimension");
@@ -288,6 +301,10 @@
 
 		this.calculateInitialSkylight();
 	}
+	
+	public boolean isNether(){
+		return this.worldProvider.field_6479_d;
+	}
 
 	protected IChunkProvider func_4081_a(File var1) {
 		return new ChunkProviderLoadOrGenerate(this, this.worldProvider.getChunkLoader(var1), this.worldProvider.getChunkProvider());
@@ -355,6 +372,7 @@
 		var1.setLong("Time", this.worldTime);
 		var1.setLong("SizeOnDisk", this.sizeOnDisk);
 		var1.setLong("LastPlayed", System.currentTimeMillis());
+		var1.setBoolean("Cheats", this.cheatsActivated);
 		EntityPlayer var2 = null;
 		if(this.playerEntities.size() > 0) {
 			var2 = (EntityPlayer)this.playerEntities.get(0);
--- net/minecraft/src/ItemSign.java
+++ net/minecraft/src/ItemSign.java
@@ -4,7 +4,7 @@
 	public ItemSign(int var1) {
 		super(var1);
 		this.maxDamage = 64;
-		this.maxStackSize = 1;
+		this.maxStackSize = 64;
 	}
 
 	public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7) {
--- net/minecraft/src/EntityPig.java
+++ net/minecraft/src/EntityPig.java
@@ -44,4 +44,11 @@
 	protected int getDropItemId() {
 		return Item.porkRaw.shiftedIndex;
 	}
+	
+	public void onDeath(Entity var1){
+		super.onDeath(var1);
+		if(this.rideable){
+			this.dropItem(Item.saddle.shiftedIndex, 1);
+		}
+	}
 }
--- net/minecraft/src/BlockSnow.java
+++ net/minecraft/src/BlockSnow.java
@@ -5,7 +5,7 @@
 public class BlockSnow extends Block {
 	protected BlockSnow(int var1, int var2) {
 		super(var1, var2, Material.snow);
-		this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 2.0F / 16.0F, 1.0F);
+		this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.125F, 1.0F);
 		this.setTickOnLoad(true);
 	}
 
@@ -73,3 +73,4 @@
 		return var5 == 1 ? true : (var6 == this.blockMaterial ? false : super.shouldSideBeRendered(var1, var2, var3, var4, var5));
 	}
 }
+//mod
--- net/minecraft/src/EntityRenderer.java
+++ net/minecraft/src/EntityRenderer.java
@@ -138,7 +138,7 @@
 	}
 
 	private void func_917_f(float var1) {
-		if(!this.mc.gameSettings.thirdPersonView) {
+		if(this.mc.gameSettings.thirdPersonView == 0) {
 			EntityPlayerSP var2 = this.mc.thePlayer;
 			float var3 = var2.field_9290_aS - var2.field_9291_aR;
 			float var4 = var2.field_9290_aS + var3 * var1;
@@ -156,11 +156,11 @@
 		double var3 = var2.prevPosX + (var2.posX - var2.prevPosX) * (double)var1;
 		double var5 = var2.prevPosY + (var2.posY - var2.prevPosY) * (double)var1;
 		double var7 = var2.prevPosZ + (var2.posZ - var2.prevPosZ) * (double)var1;
-		if(this.mc.gameSettings.thirdPersonView) {
+		if(this.mc.gameSettings.thirdPersonView > 0) {
 			double var9 = 4.0D;
 			float var11 = var2.rotationYaw;
 			float var12 = var2.rotationPitch;
-			if(Keyboard.isKeyDown(Keyboard.KEY_F1)) {
+			if(this.mc.gameSettings.thirdPersonView == 2) {
 				var12 += 180.0F;
 				var9 += 2.0D;
 			}
@@ -185,7 +185,7 @@
 				}
 			}
 
-			if(Keyboard.isKeyDown(Keyboard.KEY_F1)) {
+			if(this.mc.gameSettings.thirdPersonView == 2) {
 				GL11.glRotatef(180.0F, 0.0F, 1.0F, 0.0F);
 			}
 
@@ -247,12 +247,12 @@
 			this.func_917_f(var1);
 		}
 
-		if(!this.mc.gameSettings.thirdPersonView && !Keyboard.isKeyDown(Keyboard.KEY_F1)) {
+		if(this.mc.gameSettings.thirdPersonView == 0 && !Keyboard.isKeyDown(this.mc.gameSettings.keyBindHide.keyCode)) {
 			this.field_1395_a.renderItemInFirstPerson(var1);
 		}
 
 		GL11.glPopMatrix();
-		if(!this.mc.gameSettings.thirdPersonView) {
+		if(this.mc.gameSettings.thirdPersonView == 0) {
 			this.field_1395_a.renderOverlays(var1);
 			this.hurtCameraEffect(var1);
 		}
@@ -294,7 +294,7 @@
 			int var11 = var9 - Mouse.getY() * var9 / this.mc.displayHeight - 1;
 			if(this.mc.theWorld != null) {
 				this.func_4134_c(var1);
-				if(!Keyboard.isKeyDown(Keyboard.KEY_F1)) {
+				if(!Keyboard.isKeyDown(this.mc.gameSettings.keyBindHide.keyCode)) {
 					this.mc.ingameGUI.renderGameOverlay(var1, this.mc.currentScreen != null, var10, var11);
 				}
 			} else {
--- net/minecraft/src/BlockOre.java
+++ net/minecraft/src/BlockOre.java
@@ -8,10 +8,17 @@
 	}
 
 	public int idDropped(int var1, Random var2) {
-		return this.blockID == Block.oreCoal.blockID ? Item.coal.shiftedIndex : (this.blockID == Block.oreDiamond.blockID ? Item.diamond.shiftedIndex : this.blockID);
+		return this.blockID == Block.oreCoal.blockID ? Item.coal.shiftedIndex : (this.blockID == Block.oreDiamond.blockID ? Item.diamond.shiftedIndex : (this.blockID == Block.orePlumbum.blockID ? Item.plumbum.shiftedIndex : this.blockID));
 	}
 
 	public int quantityDropped(Random var1) {
-		return 1;
+		int i = 0;
+		if (this.blockID == Block.oreCoal.blockID){
+			i = var1.nextInt(2);
+		}
+		if(this.blockID == Block.orePlumbum.blockID){
+			i = var1.nextInt(5);
+		}
+		return 1 + i;
 	}
 }
--- net/minecraft/src/EntityArrow.java
+++ net/minecraft/src/EntityArrow.java
@@ -143,7 +143,7 @@
 		float var17;
 		if(var3 != null) {
 			if(var3.entityHit != null) {
-				if(var3.entityHit.canAttackEntity(this.field_682_g, 4)) {
+				if(var3.entityHit.canAttackExtended(this.field_682_g, 4, 1)) {
 					this.worldObj.playSoundAtEntity(this, "random.drr", 1.0F, 1.2F / (this.rand.nextFloat() * 0.2F + 0.9F));
 					this.setEntityDead();
 				} else {
--- net/minecraft/src/GuiMainMenu.java
+++ net/minecraft/src/GuiMainMenu.java
@@ -1,5 +1,6 @@
 package net.minecraft.src;
 
+import net.minecraft.client.Minecraft;
 import java.io.BufferedReader;
 import java.io.InputStreamReader;
 import java.util.ArrayList;
@@ -15,6 +16,8 @@
 	private LogoEffectRandomizer[][] logoEffects;
 	private float updateCounter = 0.0F;
 	private String splashText = "missingno";
+	private Block titleBlock = Block.stone;
+	private boolean blockControl = false;
 
 	public GuiMainMenu() {
 		try {
@@ -35,12 +38,24 @@
 				}
 			}
 		} catch (Exception var4) {
+			var4.printStackTrace();
 		}
-
 	}
 
 	public void updateScreen() {
 		++this.updateCounter;
+		if(!blockControl){
+			if(this.mc.gameSettings.titleBlock == -2){
+				titleBlock = Block.blocksList[Agrupation.titleBlocks.getRandom(rand)];
+			} else if (this.mc.gameSettings.titleBlock == -3){
+				titleBlock = this.getRandomBlock();
+			} else if (this.mc.gameSettings.titleBlock != -1){
+				if(Block.blocksList[this.mc.gameSettings.titleBlock] != null){
+					titleBlock = Block.blocksList[this.mc.gameSettings.titleBlock];
+				}
+			}
+			blockControl = true;
+		}
 		if(this.logoEffects != null) {
 			for(int var1 = 0; var1 < this.logoEffects.length; ++var1) {
 				for(int var2 = 0; var2 < this.logoEffects[var1].length; ++var2) {
@@ -48,7 +63,9 @@
 				}
 			}
 		}
-
+		if (this.updateCounter < 1.0F){
+			this.mc.setWindowTitle(Minecraft.getName());
+		}
 	}
 
 	protected void keyTyped(char var1, int var2) {
@@ -65,12 +82,15 @@
 			this.splashText = "Merry X-mas!";
 		} else if(var1.get(2) + 1 == 1 && var1.get(5) == 1) {
 			this.splashText = "Happy new year!";
+		} else if(var1.get(2) + 1 == 7 && var1.get(5) == 31) {
+			this.splashText = "Happy birthday, Dumbelfo!";
 		}
 
 		this.controlList.add(new GuiButton(1, this.width / 2 - 100, this.height / 4 + 48, "Singleplayer"));
 		this.controlList.add(new GuiButton(2, this.width / 2 - 100, this.height / 4 + 72, "Multiplayer"));
-		this.controlList.add(new GuiButton(3, this.width / 2 - 100, this.height / 4 + 96, "Mods and Texture Packs"));
-		this.controlList.add(new GuiButton(0, this.width / 2 - 100, this.height / 4 + 120 + 12, "Options..."));
+		this.controlList.add(new GuiMediumButton(0, this.width / 2 - 100, this.height / 4 + 96, "Options..."));
+		this.controlList.add(new GuiMediumButton(4, this.width / 2 + 2, this.height / 4 + 96, "Fullscreen"));
+		this.controlList.add(new GuiButton(3, this.width / 2 - 100, this.height / 4 + 120, "Quit Game"));
 		if(this.mc.field_6320_i == null) {
 			((GuiButton)this.controlList.get(1)).enabled = false;
 		}
@@ -91,9 +111,13 @@
 		}
 
 		if(var1.id == 3) {
-			this.mc.displayGuiScreen(new GuiTexturePacks(this));
+			this.mc.shutdown();
+			System.exit(0);
 		}
 
+		if(var1.id == 4) {
+			this.mc.toggleFullscreen();
+		}
 	}
 
 	public void drawScreen(int var1, int var2, float var3) {
@@ -111,7 +135,7 @@
 		GL11.glScalef(var5, var5, var5);
 		this.drawCenteredString(this.fontRenderer, this.splashText, 0, -8, 16776960);
 		GL11.glPopMatrix();
-		this.drawString(this.fontRenderer, "Minecraft Alpha v1.2.6", 2, 2, 5263440);
+		this.drawString(this.fontRenderer, this.mc.gameSettings.watermark, 2, 2, 5263440);
 		String var6 = "Copyright Mojang Specifications. Do not distribute.";
 		this.drawString(this.fontRenderer, var6, this.width - this.fontRenderer.getStringWidth(var6) - 2, this.height - 10, 16777215);
 		super.drawScreen(var1, var2, var3);
@@ -193,7 +217,7 @@
 						GL11.glTranslatef((float)var7, (float)var6, var10);
 						GL11.glScalef(var11, var11, var11);
 						GL11.glRotatef(var13, 0.0F, 1.0F, 0.0F);
-						var4.func_1238_a(Block.stone, var12);
+						var4.func_1238_a(titleBlock, var12);
 						GL11.glPopMatrix();
 					}
 				}
@@ -213,5 +237,13 @@
 
 	static Random getRand() {
 		return rand;
+	}
+	
+	private Block getRandomBlock(){
+		int k;
+		do{
+			k = this.rand.nextInt(254)+1;
+		} while(Block.blocksList[k] == null);
+		return Block.blocksList[k];
 	}
 }
--- net/minecraft/src/RenderManager.java
+++ net/minecraft/src/RenderManager.java
@@ -48,6 +48,7 @@
 		this.entityRenderMap.put(EntityMinecart.class, new RenderMinecart());
 		this.entityRenderMap.put(EntityBoat.class, new RenderBoat());
 		this.entityRenderMap.put(EntityFish.class, new RenderFish());
+		this.entityRenderMap.put(EntitySlimeFire.class, new RenderSlimeFire(new ModelSlime(16), new ModelSlime(0), 0.25F));
 		Iterator var1 = this.entityRenderMap.values().iterator();
 
 		while(var1.hasNext()) {
--- net/minecraft/src/EntityMobs.java
+++ net/minecraft/src/EntityMobs.java
@@ -27,7 +27,7 @@
 
 	protected Entity findPlayerToAttack() {
 		EntityPlayer var1 = this.worldObj.getClosestPlayerToEntity(this, 16.0D);
-		return var1 != null && this.canEntityBeSeen(var1) ? var1 : null;
+		return var1 != null && this.canEntityBeSeen(var1) && var1.doMobsTrackYou() ? var1 : null;
 	}
 
 	public boolean canAttackEntity(Entity var1, int var2) {
--- net/minecraft/src/EntityCreature.java
+++ net/minecraft/src/EntityCreature.java
@@ -8,6 +8,10 @@
 	public EntityCreature(World var1) {
 		super(var1);
 	}
+		
+	public boolean hasPath() {
+		return this.pathToEntity != null;
+	}
 
 	protected void func_418_b_() {
 		this.hasAttacked = false;
--- /dev/null
+++ net/minecraft/src/Log.java
@@ -1,0 +1,9 @@
+package net.minecraft.src;
+
+
+//Debug logger
+public class Log{
+	public static void log(Object a){
+		System.out.println(a);
+	}
+}
--- net/minecraft/src/BlockRedstoneOre.java
+++ net/minecraft/src/BlockRedstoneOre.java
@@ -65,7 +65,7 @@
 
 	private void func_319_i(World var1, int var2, int var3, int var4) {
 		Random var5 = var1.rand;
-		double var6 = 1.0D / 16.0D;
+		double var6 = 0.0625D;
 
 		for(int var8 = 0; var8 < 6; ++var8) {
 			double var9 = (double)((float)var2 + var5.nextFloat());
--- /dev/null
+++ net/minecraft/src/BlockBone.java
@@ -1,0 +1,22 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockBone extends Block {
+	protected BlockBone(int var1, int var2) {
+		super(var1, Material.bone);
+		this.blockIndexInTexture = var2;
+	}
+
+	public int quantityDropped(Random var1) {
+		return 1;
+	}
+
+	public int idDropped(int var1, Random var2) {
+		return this.blockID;
+	}
+
+	public int getBlockTextureFromSide(int var1) {
+		return var1 == 1 ? blockIndexInTexture + 1 : (var1 == 0 ? blockIndexInTexture + 1 : blockIndexInTexture); //If its 0(bottom) or 1 (top), its +1
+	}
+}
--- net/minecraft/src/GuiIngame.java
+++ net/minecraft/src/GuiIngame.java
@@ -20,6 +20,8 @@
 	private int field_9419_j = 0;
 	public float field_6446_b;
 	float field_931_c = 1.0F;
+	public boolean f3toggle = false;
+	private boolean f3pressed;
 
 	public GuiIngame(Minecraft var1) {
 		this.mc = var1;
@@ -37,7 +39,7 @@
 		}
 
 		ItemStack var9 = this.mc.thePlayer.inventory.armorItemInSlot(3);
-		if(!this.mc.gameSettings.thirdPersonView && var9 != null && var9.itemID == Block.pumpkin.blockID) {
+		if(this.mc.gameSettings.thirdPersonView == 0 && var9 != null && var9.itemID == Block.pumpkin.blockID) {
 			this.func_4063_a(var6, var7);
 		}
 
@@ -149,8 +151,18 @@
 		RenderHelper.disableStandardItemLighting();
 		GL11.glDisable(GL12.GL_RESCALE_NORMAL);
 		String var23;
-		if(Keyboard.isKeyDown(Keyboard.KEY_F3)) {
-			var8.drawStringWithShadow("Minecraft Alpha v1.2.6 (" + this.mc.field_6292_I + ")", 2, 2, 16777215);
+		
+		if(Keyboard.isKeyDown(this.mc.gameSettings.keyBindDebugMenu.keyCode) && !f3pressed){
+			f3pressed = true;
+			f3toggle = !f3toggle;
+		}
+		
+		if(!Keyboard.isKeyDown(this.mc.gameSettings.keyBindDebugMenu.keyCode) && f3pressed){
+			f3pressed = false;
+		}
+		
+		if(f3toggle) {
+			var8.drawStringWithShadow(this.mc.gameSettings.watermark + " (" + this.mc.field_6292_I + ")", 2, 2, 16777215);
 			var8.drawStringWithShadow(this.mc.func_6241_m(), 2, 12, 16777215);
 			var8.drawStringWithShadow(this.mc.func_6262_n(), 2, 22, 16777215);
 			var8.drawStringWithShadow(this.mc.func_6245_o(), 2, 32, 16777215);
@@ -165,8 +177,8 @@
 			this.drawString(var8, "x: " + this.mc.thePlayer.posX, 2, 64, 14737632);
 			this.drawString(var8, "y: " + this.mc.thePlayer.posY, 2, 72, 14737632);
 			this.drawString(var8, "z: " + this.mc.thePlayer.posZ, 2, 80, 14737632);
-		} else {
-			var8.drawStringWithShadow("Minecraft Alpha v1.2.6", 2, 2, 16777215);
+		} else if(this.mc.gameSettings.showWatermark){
+			var8.drawStringWithShadow(this.mc.gameSettings.watermark, 2, 2, 16777215);
 		}
 
 		if(this.field_9419_j > 0) {
--- net/minecraft/src/ItemHoe.java
+++ net/minecraft/src/ItemHoe.java
@@ -1,10 +1,10 @@
 package net.minecraft.src;
 
-public class ItemHoe extends Item {
+public class ItemHoe extends ItemTool {
+	private static Block[] blocksEffectiveAgainst = new Block[]{};
+
 	public ItemHoe(int var1, int var2) {
-		super(var1);
-		this.maxStackSize = 1;
-		this.maxDamage = 32 << var2;
+		super(var1, 1, var2, blocksEffectiveAgainst);
 	}
 
 	public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7) {
@@ -19,7 +19,11 @@
 				return true;
 			} else {
 				var3.setBlockWithNotify(var4, var5, var6, var10.blockID);
-				var1.damageItem(1);
+				if(this.ability == 2){
+					var1.damageItem(4);
+				} else {
+					var1.damageItem(1);
+				}
 				if(var3.rand.nextInt(8) == 0 && var8 == Block.grass.blockID) {
 					byte var11 = 1;
 
@@ -37,9 +41,5 @@
 				return true;
 			}
 		}
-	}
-
-	public boolean isFull3D() {
-		return true;
 	}
 }
--- /dev/null
+++ net/minecraft/src/WorldCreationSettings.java
@@ -1,0 +1,15 @@
+package net.minecraft.src;
+
+public class WorldCreationSettings {
+	public long seed;
+	public boolean cheats;
+	public boolean pyramids;
+	public int gamemode;
+	
+	public WorldCreationSettings(long s, boolean c, boolean p, int g){
+		this.seed = s;
+		this.cheats = c;
+		this.gamemode = g;
+		this.pyramids = p;
+	}
+}
--- net/minecraft/src/ChunkProviderHell.java
+++ net/minecraft/src/ChunkProviderHell.java
@@ -3,7 +3,7 @@
 import java.util.Random;
 
 public class ChunkProviderHell implements IChunkProvider {
-	private Random field_4170_h;
+	private Random field_4170_h; //RANDOM
 	private NoiseGeneratorOctaves field_4169_i;
 	private NoiseGeneratorOctaves field_4168_j;
 	private NoiseGeneratorOctaves field_4167_k;
@@ -351,6 +351,40 @@
 			var8 = this.field_4170_h.nextInt(128);
 			var9 = var5 + this.field_4170_h.nextInt(16) + 8;
 			(new WorldGenFlowers(Block.mushroomRed.blockID)).generate(this.field_4164_n, this.field_4170_h, var7, var8, var9);
+		}
+		
+		for(var7 = 0; var7 < var6; ++var7) {
+			var8 = var4 + this.field_4170_h.nextInt(16) + 8;
+			var9 = this.field_4170_h.nextInt(120) + 4;
+			var10 = var5 + this.field_4170_h.nextInt(16) + 8;
+
+			if(this.field_4170_h.nextInt(16) == 0){
+				(new WorldGenGlowingObsidian1()).generate(this.field_4164_n, this.field_4170_h, var8, var9, var10);
+			}
+		}
+
+		for(var7 = 0; var7 < 10; ++var7) {
+			var8 = var4 + this.field_4170_h.nextInt(16) + 8;
+			var9 = this.field_4170_h.nextInt(128);
+			var10 = var5 + this.field_4170_h.nextInt(16) + 8;
+
+			if(this.field_4170_h.nextInt(16) == 0){
+				(new WorldGenGlowingObsidian2()).generate(this.field_4164_n, this.field_4170_h, var8, var9, var10);
+			} 
+		}
+		
+		for(var7 = 0; var7 < 28; ++var7) {
+			var8 = var4 + this.field_4170_h.nextInt(16) + 8;
+			var9 = this.field_4170_h.nextInt(120) + 8;
+			var10 = var5 + this.field_4170_h.nextInt(16) + 8;
+			(new WorldGenMinableHell(Block.orePlumbum.blockID, 16)).generate(this.field_4164_n, this.field_4170_h, var8, var9, var10);
+		}	
+		
+		for(var7 = 0; var7 < 6; ++var7) {
+			var8 = var4 + this.field_4170_h.nextInt(16) + 8;
+			var9 = this.field_4170_h.nextInt(64);
+			var10 = var5 + this.field_4170_h.nextInt(16) + 8;
+			(new WorldGenBones()).generate(this.field_4164_n, this.field_4170_h, var8, var9, var10);
 		}
 
 		BlockSand.fallInstantly = false;
--- net/minecraft/src/ItemDoor.java
+++ net/minecraft/src/ItemDoor.java
@@ -7,7 +7,7 @@
 		super(var1);
 		this.field_321_a = var2;
 		this.maxDamage = 64;
-		this.maxStackSize = 1;
+		this.maxStackSize = 64;
 	}
 
 	public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7) {
--- /dev/null
+++ net/minecraft/src/WorldGenMinableHell.java
@@ -1,0 +1,47 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class WorldGenMinableHell extends WorldGenerator {
+	private int minableBlockId;
+	private int numberOfBlocks;
+
+	public WorldGenMinableHell(int var1, int var2) {
+		this.minableBlockId = var1;
+		this.numberOfBlocks = var2;
+	}
+
+	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
+		float var6 = var2.nextFloat() * (float)Math.PI;
+		double var7 = (double)((float)(var3 + 8) + MathHelper.sin(var6) * (float)this.numberOfBlocks / 8.0F);
+		double var9 = (double)((float)(var3 + 8) - MathHelper.sin(var6) * (float)this.numberOfBlocks / 8.0F);
+		double var11 = (double)((float)(var5 + 8) + MathHelper.cos(var6) * (float)this.numberOfBlocks / 8.0F);
+		double var13 = (double)((float)(var5 + 8) - MathHelper.cos(var6) * (float)this.numberOfBlocks / 8.0F);
+		double var15 = (double)(var4 + var2.nextInt(3) + 2);
+		double var17 = (double)(var4 + var2.nextInt(3) + 2);
+
+		for(int var19 = 0; var19 <= this.numberOfBlocks; ++var19) {
+			double var20 = var7 + (var9 - var7) * (double)var19 / (double)this.numberOfBlocks;
+			double var22 = var15 + (var17 - var15) * (double)var19 / (double)this.numberOfBlocks;
+			double var24 = var11 + (var13 - var11) * (double)var19 / (double)this.numberOfBlocks;
+			double var26 = var2.nextDouble() * (double)this.numberOfBlocks / 16.0D;
+			double var28 = (double)(MathHelper.sin((float)var19 * (float)Math.PI / (float)this.numberOfBlocks) + 1.0F) * var26 + 1.0D;
+			double var30 = (double)(MathHelper.sin((float)var19 * (float)Math.PI / (float)this.numberOfBlocks) + 1.0F) * var26 + 1.0D;
+
+			for(int var32 = (int)(var20 - var28 / 2.0D); var32 <= (int)(var20 + var28 / 2.0D); ++var32) {
+				for(int var33 = (int)(var22 - var30 / 2.0D); var33 <= (int)(var22 + var30 / 2.0D); ++var33) {
+					for(int var34 = (int)(var24 - var28 / 2.0D); var34 <= (int)(var24 + var28 / 2.0D); ++var34) {
+						double var35 = ((double)var32 + 0.5D - var20) / (var28 / 2.0D);
+						double var37 = ((double)var33 + 0.5D - var22) / (var30 / 2.0D);
+						double var39 = ((double)var34 + 0.5D - var24) / (var28 / 2.0D);
+						if(var35 * var35 + var37 * var37 + var39 * var39 < 1.0D && var1.getBlockId(var32, var33, var34) == Block.bloodStone.blockID) {
+							var1.setBlock(var32, var33, var34, this.minableBlockId);
+						}
+					}
+				}
+			}
+		}
+
+		return true;
+	}
+}
--- /dev/null
+++ ibxm/ScreamTracker3.java
@@ -1,0 +1,464 @@
+package ibxm;
+
+import java.io.DataInput;
+import java.io.EOFException;
+import java.io.IOException;
+import java.io.UnsupportedEncodingException;
+
+public class ScreamTracker3 {
+	private static final int[] effect_map = new int[]{255, 37, 11, 13, 10, 2, 1, 3, 4, 29, 0, 6, 5, 255, 255, 9, 255, 27, 7, 14, 15, 36, 16, 255, 255, 255, 255, 255, 255, 255, 255, 255};
+	private static final int[] effect_s_map = new int[]{0, 3, 5, 4, 7, 255, 255, 255, 8, 255, 9, 6, 12, 13, 14, 15};
+
+	public static boolean is_s3m(byte[] header_96_bytes) {
+		String s3m_identifier = ascii_text(header_96_bytes, 44, 4);
+		return s3m_identifier.equals("SCRM");
+	}
+
+	public static Module load_s3m(byte[] header_96_bytes, DataInput data_input) throws IOException {
+		byte[] s3m_file = read_s3m_file(header_96_bytes, data_input);
+		Module module = new Module();
+		module.song_title = ascii_text(s3m_file, 0, 28);
+		int num_pattern_orders = get_num_pattern_orders(s3m_file);
+		int num_instruments = get_num_instruments(s3m_file);
+		int num_patterns = get_num_patterns(s3m_file);
+		int flags = unsigned_short_le(s3m_file, 38);
+		int tracker_version = unsigned_short_le(s3m_file, 40);
+		if((flags & 64) == 64 || tracker_version == 4864) {
+			module.fast_volume_slides = true;
+		}
+
+		boolean signed_samples = false;
+		if(unsigned_short_le(s3m_file, 42) == 1) {
+			signed_samples = true;
+		}
+
+		module.global_volume = s3m_file[48] & 255;
+		module.default_speed = s3m_file[49] & 255;
+		module.default_tempo = s3m_file[50] & 255;
+		int master_volume = s3m_file[51] & 127;
+		module.channel_gain = master_volume << 15 >> 7;
+		boolean stereo_mode = (s3m_file[51] & 128) == 128;
+		boolean default_panning = (s3m_file[53] & 255) == 252;
+		int[] channel_map = new int[32];
+		int num_channels = 0;
+
+		int channel_idx;
+		for(channel_idx = 0; channel_idx < 32; ++channel_idx) {
+			int channel_config = s3m_file[64 + channel_idx] & 255;
+			channel_map[channel_idx] = -1;
+			if(channel_config < 16) {
+				channel_map[channel_idx] = num_channels++;
+			}
+		}
+
+		module.set_num_channels(num_channels);
+		int panning_offset = 96 + num_pattern_orders + num_instruments * 2 + num_patterns * 2;
+
+		for(channel_idx = 0; channel_idx < 32; ++channel_idx) {
+			if(channel_map[channel_idx] >= 0) {
+				int panning = 7;
+				if(stereo_mode) {
+					panning = 12;
+					if((s3m_file[64 + channel_idx] & 255) < 8) {
+						panning = 3;
+					}
+				}
+
+				if(default_panning) {
+					flags = s3m_file[panning_offset + channel_idx] & 255;
+					if((flags & 32) == 32) {
+						panning = flags & 15;
+					}
+				}
+
+				module.set_initial_panning(channel_map[channel_idx], panning * 17);
+			}
+		}
+
+		int[] sequence = read_s3m_sequence(s3m_file);
+		module.set_sequence_length(sequence.length);
+
+		for(int order_idx = 0; order_idx < sequence.length; ++order_idx) {
+			module.set_sequence(order_idx, sequence[order_idx]);
+		}
+
+		module.set_num_instruments(num_instruments);
+
+		for(int instrument_idx = 0; instrument_idx < num_instruments; ++instrument_idx) {
+			Instrument instrument = read_s3m_instrument(s3m_file, instrument_idx, signed_samples);
+			module.set_instrument(instrument_idx + 1, instrument);
+		}
+
+		module.set_num_patterns(num_patterns);
+
+		for(int pattern_idx = 0; pattern_idx < num_patterns; ++pattern_idx) {
+			module.set_pattern(pattern_idx, read_s3m_pattern(s3m_file, pattern_idx, channel_map));
+		}
+
+		return module;
+	}
+
+	private static int[] read_s3m_sequence(byte[] s3m_file) {
+		int num_pattern_orders = get_num_pattern_orders(s3m_file);
+		int sequence_length = 0;
+
+		int order_idx;
+		int pattern_order;
+		for(order_idx = 0; order_idx < num_pattern_orders; ++order_idx) {
+			pattern_order = s3m_file[96 + order_idx] & 255;
+			if(pattern_order == 255) {
+				break;
+			}
+
+			if(pattern_order < 254) {
+				++sequence_length;
+			}
+		}
+
+		int[] sequence = new int[sequence_length];
+		int sequence_idx = 0;
+
+		for(order_idx = 0; order_idx < num_pattern_orders; ++order_idx) {
+			pattern_order = s3m_file[96 + order_idx] & 255;
+			if(pattern_order == 255) {
+				break;
+			}
+
+			if(pattern_order < 254) {
+				sequence[sequence_idx] = pattern_order;
+				++sequence_idx;
+			}
+		}
+
+		return sequence;
+	}
+
+	private static Instrument read_s3m_instrument(byte[] s3m_file, int instrument_idx, boolean signed_samples) {
+		int instrument_offset = get_instrument_offset(s3m_file, instrument_idx);
+		Instrument instrument = new Instrument();
+		instrument.name = ascii_text(s3m_file, instrument_offset + 48, 28);
+		Sample sample = new Sample();
+		if(s3m_file[instrument_offset] == 1) {
+			int sample_data_length = get_sample_data_length(s3m_file, instrument_offset);
+			int loop_start = unsigned_short_le(s3m_file, instrument_offset + 20);
+			int loop_length = unsigned_short_le(s3m_file, instrument_offset + 24) - loop_start;
+			sample.volume = s3m_file[instrument_offset + 28] & 255;
+			if(s3m_file[instrument_offset + 30] != 0) {
+				throw new IllegalArgumentException("ScreamTracker3: Packed samples not supported!");
+			}
+
+			if((s3m_file[instrument_offset + 31] & 1) == 0) {
+				loop_length = 0;
+			}
+
+			if((s3m_file[instrument_offset + 31] & 2) != 0) {
+				throw new IllegalArgumentException("ScreamTracker3: Stereo samples not supported!");
+			}
+
+			boolean sixteen_bit = (s3m_file[instrument_offset + 31] & 4) != 0;
+			int c2_rate = unsigned_short_le(s3m_file, instrument_offset + 32);
+			sample.transpose = LogTable.log_2(c2_rate) - LogTable.log_2(8363);
+			int sample_data_offset = get_sample_data_offset(s3m_file, instrument_offset);
+			int sample_idx;
+			int amplitude;
+			short[] sample_data;
+			if(sixteen_bit) {
+				if(signed_samples) {
+					throw new IllegalArgumentException("ScreamTracker3: Signed 16-bit samples not supported!");
+				}
+
+				sample_data_length >>= 1;
+				sample_data = new short[sample_data_length];
+
+				for(sample_idx = 0; sample_idx < sample_data_length; ++sample_idx) {
+					amplitude = s3m_file[sample_data_offset + sample_idx * 2] & 255;
+					amplitude |= (s3m_file[sample_data_offset + sample_idx * 2 + 1] & 255) << 8;
+					sample_data[sample_idx] = (short)(amplitude - -Short.MIN_VALUE);
+				}
+			} else {
+				sample_data = new short[sample_data_length];
+				if(signed_samples) {
+					for(sample_idx = 0; sample_idx < sample_data_length; ++sample_idx) {
+						amplitude = s3m_file[sample_data_offset + sample_idx] << 8;
+						sample_data[sample_idx] = (short)amplitude;
+					}
+				} else {
+					for(sample_idx = 0; sample_idx < sample_data_length; ++sample_idx) {
+						amplitude = (s3m_file[sample_data_offset + sample_idx] & 255) << 8;
+						sample_data[sample_idx] = (short)(amplitude - -Short.MIN_VALUE);
+					}
+				}
+			}
+
+			sample.set_sample_data(sample_data, loop_start, loop_length, false);
+		}
+
+		instrument.set_num_samples(1);
+		instrument.set_sample(0, sample);
+		return instrument;
+	}
+
+	private static Pattern read_s3m_pattern(byte[] s3m_file, int pattern_idx, int[] channel_map) {
+		int num_channels = 0;
+
+		int channel_idx;
+		for(channel_idx = 0; channel_idx < 32; ++channel_idx) {
+			if(channel_map[channel_idx] >= num_channels) {
+				num_channels = channel_idx + 1;
+			}
+		}
+
+		int num_notes = num_channels * 64;
+		byte[] pattern_data = new byte[num_notes * 5];
+		int row_idx = 0;
+		int pattern_offset = get_pattern_offset(s3m_file, pattern_idx) + 2;
+
+		while(true) {
+			while(row_idx < 64) {
+				int token = s3m_file[pattern_offset] & 255;
+				++pattern_offset;
+				if(token > 0) {
+					channel_idx = channel_map[token & 31];
+					int note_idx = (num_channels * row_idx + channel_idx) * 5;
+					if((token & 32) == 32) {
+						if(channel_idx >= 0) {
+							int key = s3m_file[pattern_offset] & 255;
+							if(key == 255) {
+								key = 0;
+							} else if(key == 254) {
+								key = 97;
+							} else {
+								for(key = ((key & 240) >> 4) * 12 + (key & 15) + 1; key > 96; key -= 12) {
+								}
+							}
+
+							pattern_data[note_idx] = (byte)key;
+							pattern_data[note_idx + 1] = s3m_file[pattern_offset + 1];
+						}
+
+						pattern_offset += 2;
+					}
+
+					if((token & 64) == 64) {
+						if(channel_idx >= 0) {
+							int volume_column = (s3m_file[pattern_offset] & 255) + 16;
+							pattern_data[note_idx + 2] = (byte)volume_column;
+						}
+
+						++pattern_offset;
+					}
+
+					if((token & 128) == 128) {
+						if(channel_idx >= 0) {
+							int effect = s3m_file[pattern_offset] & 255;
+							int effect_param = s3m_file[pattern_offset + 1] & 255;
+							effect = effect_map[effect & 31];
+							if(effect == 255) {
+								effect = 0;
+								effect_param = 0;
+							}
+
+							if(effect == 14) {
+								effect = effect_s_map[(effect_param & 240) >> 4];
+								effect_param &= 15;
+								switch(effect) {
+								case 8:
+									effect = 8;
+									effect_param *= 17;
+									break;
+								case 9:
+									effect = 8;
+									if(effect_param > 7) {
+										effect_param -= 8;
+									} else {
+										effect_param += 8;
+									}
+
+									effect_param *= 17;
+									break;
+								case 255:
+									effect = 0;
+									effect_param = 0;
+									break;
+								default:
+									effect_param = (effect & 15) << 4 | effect_param & 15;
+									effect = 14;
+								}
+							}
+
+							pattern_data[note_idx + 3] = (byte)effect;
+							pattern_data[note_idx + 4] = (byte)effect_param;
+						}
+
+						pattern_offset += 2;
+					}
+				} else {
+					++row_idx;
+				}
+			}
+
+			Pattern pattern = new Pattern();
+			pattern.num_rows = 64;
+			pattern.set_pattern_data(pattern_data);
+			return pattern;
+		}
+	}
+
+	private static byte[] read_s3m_file(byte[] header_96_bytes, DataInput data_input) throws IOException {
+		if(!is_s3m(header_96_bytes)) {
+			throw new IllegalArgumentException("ScreamTracker3: Not an S3M file!");
+		} else {
+			int s3m_file_length = header_96_bytes.length;
+			int num_pattern_orders = get_num_pattern_orders(header_96_bytes);
+			int num_instruments = get_num_instruments(header_96_bytes);
+			int num_patterns = get_num_patterns(header_96_bytes);
+			s3m_file_length += num_pattern_orders;
+			s3m_file_length += num_instruments * 2;
+			s3m_file_length += num_patterns * 2;
+			byte[] s3m_file = read_more(header_96_bytes, s3m_file_length, data_input);
+
+			int instrument_idx;
+			int instrument_offset;
+			for(instrument_idx = 0; instrument_idx < num_instruments; ++instrument_idx) {
+				instrument_offset = get_instrument_offset(s3m_file, instrument_idx);
+				instrument_offset += 80;
+				if(instrument_offset > s3m_file_length) {
+					s3m_file_length = instrument_offset;
+				}
+			}
+
+			int pattern_idx;
+			int pattern_offset;
+			for(pattern_idx = 0; pattern_idx < num_patterns; ++pattern_idx) {
+				pattern_offset = get_pattern_offset(s3m_file, pattern_idx);
+				pattern_offset += 2;
+				if(pattern_offset > s3m_file_length) {
+					s3m_file_length = pattern_offset;
+				}
+			}
+
+			s3m_file = read_more(s3m_file, s3m_file_length, data_input);
+
+			for(instrument_idx = 0; instrument_idx < num_instruments; ++instrument_idx) {
+				instrument_offset = get_instrument_offset(s3m_file, instrument_idx);
+				int sample_data_offset = get_sample_data_offset(s3m_file, instrument_offset);
+				sample_data_offset += get_sample_data_length(s3m_file, instrument_offset);
+				if(sample_data_offset > s3m_file_length) {
+					s3m_file_length = sample_data_offset;
+				}
+			}
+
+			for(pattern_idx = 0; pattern_idx < num_patterns; ++pattern_idx) {
+				pattern_offset = get_pattern_offset(s3m_file, pattern_idx);
+				pattern_offset += get_pattern_length(s3m_file, pattern_offset);
+				pattern_offset += 2;
+				if(pattern_offset > s3m_file_length) {
+					s3m_file_length = pattern_offset;
+				}
+			}
+
+			s3m_file = read_more(s3m_file, s3m_file_length, data_input);
+			return s3m_file;
+		}
+	}
+
+	private static int get_num_pattern_orders(byte[] s3m_file) {
+		int num_pattern_orders = unsigned_short_le(s3m_file, 32);
+		return num_pattern_orders;
+	}
+
+	private static int get_num_instruments(byte[] s3m_file) {
+		int num_instruments = unsigned_short_le(s3m_file, 34);
+		return num_instruments;
+	}
+
+	private static int get_num_patterns(byte[] s3m_file) {
+		int num_patterns = unsigned_short_le(s3m_file, 36);
+		return num_patterns;
+	}
+
+	private static int get_instrument_offset(byte[] s3m_file, int instrument_idx) {
+		int pointer_offset = 96 + get_num_pattern_orders(s3m_file);
+		int instrument_offset = unsigned_short_le(s3m_file, pointer_offset + instrument_idx * 2) << 4;
+		return instrument_offset;
+	}
+
+	private static int get_sample_data_offset(byte[] s3m_file, int instrument_offset) {
+		int sample_data_offset = 0;
+		if(s3m_file[instrument_offset] == 1) {
+			sample_data_offset = (s3m_file[instrument_offset + 13] & 255) << 20;
+			sample_data_offset |= unsigned_short_le(s3m_file, instrument_offset + 14) << 4;
+		}
+
+		return sample_data_offset;
+	}
+
+	private static int get_sample_data_length(byte[] s3m_file, int instrument_offset) {
+		int sample_data_length = 0;
+		if(s3m_file[instrument_offset] == 1) {
+			sample_data_length = unsigned_short_le(s3m_file, instrument_offset + 16);
+			boolean sixteen_bit = (s3m_file[instrument_offset + 31] & 4) != 0;
+			if(sixteen_bit) {
+				sample_data_length <<= 1;
+			}
+		}
+
+		return sample_data_length;
+	}
+
+	private static int get_pattern_offset(byte[] s3m_file, int pattern_idx) {
+		int pointer_offset = 96 + get_num_pattern_orders(s3m_file);
+		pointer_offset += get_num_instruments(s3m_file) * 2;
+		int pattern_offset = unsigned_short_le(s3m_file, pointer_offset + pattern_idx * 2) << 4;
+		return pattern_offset;
+	}
+
+	private static int get_pattern_length(byte[] s3m_file, int pattern_offset) {
+		int pattern_length = unsigned_short_le(s3m_file, pattern_offset);
+		return pattern_length;
+	}
+
+	private static byte[] read_more(byte[] old_data, int new_length, DataInput data_input) throws IOException {
+		byte[] new_data = old_data;
+		if(new_length > old_data.length) {
+			new_data = new byte[new_length];
+			System.arraycopy(old_data, 0, new_data, 0, old_data.length);
+
+			try {
+				data_input.readFully(new_data, old_data.length, new_data.length - old_data.length);
+			} catch (EOFException var5) {
+				System.out.println("ScreamTracker3: Module has been truncated!");
+			}
+		}
+
+		return new_data;
+	}
+
+	private static int unsigned_short_le(byte[] buffer, int offset) {
+		int value = buffer[offset] & 255;
+		value |= (buffer[offset + 1] & 255) << 8;
+		return value;
+	}
+
+	private static String ascii_text(byte[] buffer, int offset, int length) {
+		byte[] string_buffer = new byte[length];
+
+		for(int idx = 0; idx < length; ++idx) {
+			byte chr = buffer[offset + idx];
+			if(chr < 32) {
+				chr = 32;
+			}
+
+			string_buffer[idx] = (byte)chr;
+		}
+
+		String string;
+		try {
+			string = new String(string_buffer, 0, length, "ISO-8859-1");
+		} catch (UnsupportedEncodingException var8) {
+			string = "";
+		}
+
+		return string;
+	}
+}
--- /dev/null
+++ ibxm/ProTracker.java
@@ -1,0 +1,240 @@
+package ibxm;
+
+import java.io.DataInput;
+import java.io.EOFException;
+import java.io.IOException;
+import java.io.UnsupportedEncodingException;
+
+public class ProTracker {
+	public static boolean is_mod(byte[] header_1084_bytes) {
+		boolean is_mod = false;
+		if(calculate_num_channels(header_1084_bytes) > 0) {
+			is_mod = true;
+		}
+
+		return is_mod;
+	}
+
+	public static Module load_mod(byte[] header_1084_bytes, DataInput data_input) throws IOException {
+		int num_channels = calculate_num_channels(header_1084_bytes);
+		if(num_channels < 1) {
+			throw new IllegalArgumentException("ProTracker: Unrecognised module format!");
+		} else {
+			Module module = new Module();
+			module.song_title = ascii_text(header_1084_bytes, 0, 20);
+			module.pal = num_channels == 4;
+			module.global_volume = 64;
+			module.channel_gain = 12288;
+			module.default_speed = 6;
+			module.default_tempo = 125;
+			module.set_num_channels(num_channels);
+
+			for(int channel_idx = 0; channel_idx < num_channels; ++channel_idx) {
+				short panning = 64;
+				if((channel_idx & 3) == 1 || (channel_idx & 3) == 2) {
+					panning = 192;
+				}
+
+				module.set_initial_panning(channel_idx, panning);
+			}
+
+			int sequence_length = header_1084_bytes[950] & 127;
+			int restart_idx = header_1084_bytes[951] & 127;
+			if(restart_idx >= sequence_length) {
+				restart_idx = 0;
+			}
+
+			module.restart_sequence_index = restart_idx;
+			module.set_sequence_length(sequence_length);
+
+			for(int sequence_idx = 0; sequence_idx < sequence_length; ++sequence_idx) {
+				module.set_sequence(sequence_idx, header_1084_bytes[952 + sequence_idx] & 127);
+			}
+
+			int num_patterns = calculate_num_patterns(header_1084_bytes);
+			module.set_num_patterns(num_patterns);
+
+			for(int pattern_idx = 0; pattern_idx < num_patterns; ++pattern_idx) {
+				module.set_pattern(pattern_idx, read_mod_pattern(data_input, num_channels));
+			}
+
+			module.set_num_instruments(31);
+
+			for(int instrument_idx = 1; instrument_idx <= 31; ++instrument_idx) {
+				module.set_instrument(instrument_idx, read_mod_instrument(header_1084_bytes, instrument_idx, data_input));
+			}
+
+			return module;
+		}
+	}
+
+	private static int calculate_num_patterns(byte[] module_header) {
+		int num_patterns = 0;
+
+		for(int pattern_idx = 0; pattern_idx < 128; ++pattern_idx) {
+			int order_entry = module_header[952 + pattern_idx] & 127;
+			if(order_entry >= num_patterns) {
+				num_patterns = order_entry + 1;
+			}
+		}
+
+		return num_patterns;
+	}
+
+	private static int calculate_num_channels(byte[] module_header) {
+		int num_channels;
+		switch(module_header[1082] << 8 | module_header[1083]) {
+		case 17224:
+			num_channels = (module_header[1080] - 48) * 10 + (module_header[1081] - 48);
+			break;
+		case 18510:
+			num_channels = module_header[1080] - 48;
+			break;
+		case 19233:
+		case 19246:
+		case 21550:
+		case 21556:
+			num_channels = 4;
+			break;
+		default:
+			num_channels = 0;
+		}
+
+		return num_channels;
+	}
+
+	private static Pattern read_mod_pattern(DataInput data_input, int num_channels) throws IOException {
+		Pattern pattern = new Pattern();
+		pattern.num_rows = 64;
+		byte[] input_pattern_data = new byte[64 * num_channels * 4];
+		byte[] output_pattern_data = new byte[64 * num_channels * 5];
+		data_input.readFully(input_pattern_data);
+		int input_idx = 0;
+
+		for(int output_idx = 0; input_idx < input_pattern_data.length; output_idx += 5) {
+			int period = (input_pattern_data[input_idx] & 15) << 8;
+			period |= input_pattern_data[input_idx + 1] & 255;
+			output_pattern_data[output_idx] = to_key(period);
+			int instrument = input_pattern_data[input_idx] & 16;
+			instrument |= (input_pattern_data[input_idx + 2] & 240) >> 4;
+			output_pattern_data[output_idx + 1] = (byte)instrument;
+			int effect = input_pattern_data[input_idx + 2] & 15;
+			int effect_param = input_pattern_data[input_idx + 3] & 255;
+			if(effect == 1 && effect_param == 0) {
+				effect = 0;
+			}
+
+			if(effect == 2 && effect_param == 0) {
+				effect = 0;
+			}
+
+			if(effect == 8 && num_channels == 4) {
+				effect = 0;
+				effect_param = 0;
+			}
+
+			if(effect == 10 && effect_param == 0) {
+				effect = 0;
+			}
+
+			if(effect == 5 && effect_param == 0) {
+				effect = 3;
+			}
+
+			if(effect == 6 && effect_param == 0) {
+				effect = 4;
+			}
+
+			output_pattern_data[output_idx + 3] = (byte)effect;
+			output_pattern_data[output_idx + 4] = (byte)effect_param;
+			input_idx += 4;
+		}
+
+		pattern.set_pattern_data(output_pattern_data);
+		return pattern;
+	}
+
+	private static Instrument read_mod_instrument(byte[] mod_header, int idx, DataInput data_input) throws IOException {
+		int header_offset = (idx - 1) * 30 + 20;
+		Instrument instrument = new Instrument();
+		instrument.name = ascii_text(mod_header, header_offset, 22);
+		Sample sample = new Sample();
+		int sample_data_length = unsigned_short_be(mod_header, header_offset + 22) << 1;
+		int fine_tune = mod_header[header_offset + 24] & 15;
+		if(fine_tune > 7) {
+			fine_tune -= 16;
+		}
+
+		sample.transpose = (fine_tune << 15) / 96;
+		sample.volume = mod_header[header_offset + 25] & 127;
+		int loop_start = unsigned_short_be(mod_header, header_offset + 26) << 1;
+		int loop_length = unsigned_short_be(mod_header, header_offset + 28) << 1;
+		if(loop_length < 4) {
+			loop_length = 0;
+		}
+
+		byte[] raw_sample_data = new byte[sample_data_length];
+		short[] sample_data = new short[sample_data_length];
+
+		try {
+			data_input.readFully(raw_sample_data);
+		} catch (EOFException var14) {
+			System.out.println("ProTracker: Instrument " + idx + " has samples missing.");
+		}
+
+		for(int sample_idx = 0; sample_idx < raw_sample_data.length; ++sample_idx) {
+			sample_data[sample_idx] = (short)(raw_sample_data[sample_idx] << 8);
+		}
+
+		sample.set_sample_data(sample_data, loop_start, loop_length, false);
+		instrument.set_num_samples(1);
+		instrument.set_sample(0, sample);
+		return instrument;
+	}
+
+	private static byte to_key(int period) {
+		int key;
+		if(period < 32) {
+			key = 0;
+		} else {
+			int oct = LogTable.log_2(7256) - LogTable.log_2(period);
+			if(oct < 0) {
+				key = 0;
+			} else {
+				key = oct * 12;
+				key >>= 14;
+				key = (key >> 1) + (key & 1);
+			}
+		}
+
+		return (byte)key;
+	}
+
+	private static int unsigned_short_be(byte[] buf, int offset) {
+		int value = (buf[offset] & 255) << 8;
+		value |= buf[offset + 1] & 255;
+		return value;
+	}
+
+	private static String ascii_text(byte[] buffer, int offset, int length) {
+		byte[] string_buffer = new byte[length];
+
+		for(int idx = 0; idx < length; ++idx) {
+			byte chr = buffer[offset + idx];
+			if(chr < 32) {
+				chr = 32;
+			}
+
+			string_buffer[idx] = (byte)chr;
+		}
+
+		String string;
+		try {
+			string = new String(string_buffer, 0, length, "ISO-8859-1");
+		} catch (UnsupportedEncodingException var8) {
+			string = "";
+		}
+
+		return string;
+	}
+}
--- /dev/null
+++ net/minecraft/src/OptionBoolean.java
@@ -1,0 +1,20 @@
+package net.minecraft.src;
+
+public class OptionBoolean extends Option {
+	private String t;
+	private String f;
+	
+	public OptionBoolean(String n, String dn, int i, String tr, String fa){
+		super(n, dn, i);
+		this.t = tr;
+		this.f = fa;
+	}
+	
+	public OptionBoolean(String n, String dn, int i){
+		this(n, dn, i, "ON", "OFF");
+	}
+	
+	public final String getDisplayString(Object Value){
+		return this.displayName + ": " + ((boolean) Value ? t : f);
+	}
+}
--- /dev/null
+++ net/minecraft/src/BlockTimeReactor.java
@@ -1,0 +1,55 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockTimeReactor extends Block {
+	protected BlockTimeReactor(int var1, int var2) {
+		super(var1, var2, Material.iron);
+	}
+	public boolean blockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5) {
+		Random rand = new Random();
+		ItemStack v32 = var5.inventory.getCurrentItem();
+		if(v32 != null && v32.itemID == Item.lightStoneDust.shiftedIndex){
+			var1.worldTime = var1.worldTime + 500;
+			var1.playSoundEffect((double)((float)var2 + 0.5F), (double)((float)var3 + 0.5F), (double)((float)var4 + 0.5F), "random.glass", rand.nextFloat() * 0.25F + 0.5F, rand.nextFloat() * 0.8F + 0.5F);
+			for(int var7 = 0; var7 < 4; ++var7) {
+				var1.spawnParticle("redsmoke", (double)var2 - 0.5D + Math.random() * 2.0D, (double)var3 - 0.5D + Math.random() * 2.0D, (double)var4 - 0.5D + Math.random() * 2.0D, 0.0D, 0.0D, 0.0D);
+			}
+			--var5.inventory.getCurrentItem().stackSize;
+			if(var5.inventory.getCurrentItem().stackSize < 1){
+				var5.inventory.mainInventory[var5.inventory.currentItem] = null;
+			}
+		}
+		if(v32 != null && v32.itemID == Block.lightStone.blockID){
+			var1.worldTime = var1.worldTime + 1700;
+			var1.playSoundEffect((double)((float)var2 + 0.5F), (double)((float)var3 + 0.5F), (double)((float)var4 + 0.5F), "random.glass", rand.nextFloat() * 0.25F + 0.75F, rand.nextFloat() * 1.0F + 0.5F);
+			for(int var7 = 0; var7 < 10; ++var7) {
+				var1.spawnParticle("redsmoke", (double)var2 - 0.5D + Math.random() * 2.0D, (double)var3 - 0.5D + Math.random() * 2.0D, (double)var4 - 0.5D + Math.random() * 2.0D, 0.0D, 0.0D, 0.0D);
+			}
+			--var5.inventory.getCurrentItem().stackSize;
+			if(var5.inventory.getCurrentItem().stackSize < 1){
+				var5.inventory.mainInventory[var5.inventory.currentItem] = null;
+			}
+			return true;
+		}
+		return false;
+	}
+	public int getBlockTexture(IBlockAccess var1, int var2, int var3, int var4, int var5) {
+		if(var5 == 1) { //top
+			return this.blockIndexInTexture + 16;
+		} else if (var5 == 0){ //Bottom
+			return this.blockIndexInTexture + 15;
+		} else {
+			return this.blockIndexInTexture;
+		}
+	}
+	public int getBlockTextureFromSide(int var1) {
+		if(var1 == 1){ //Top
+			return this.blockIndexInTexture + 16;
+		} else if (var1 == 0){ //Bottom
+			return this.blockIndexInTexture + 15;
+		} else {
+			return this.blockIndexInTexture;
+		}
+	}
+}
--- /dev/null
+++ paulscode/sound/codecs/CodecIBXM.java
@@ -1,0 +1,333 @@
+package paulscode.sound.codecs;
+
+import ibxm.FastTracker2;
+import ibxm.IBXM;
+import ibxm.Module;
+import ibxm.ProTracker;
+import ibxm.ScreamTracker3;
+import java.io.DataInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.net.URL;
+import java.nio.ByteBuffer;
+import java.nio.ByteOrder;
+import java.nio.ShortBuffer;
+import javax.sound.sampled.AudioFormat;
+import paulscode.sound.ICodec;
+import paulscode.sound.SoundBuffer;
+import paulscode.sound.SoundSystemConfig;
+import paulscode.sound.SoundSystemLogger;
+
+public class CodecIBXM implements ICodec {
+
+   private static final boolean GET = false;
+   private static final boolean SET = true;
+   private static final boolean XXX = false;
+   private boolean endOfStream = false;
+   private boolean initialized = false;
+   private AudioFormat myAudioFormat = null;
+   private boolean reverseBytes = false;
+   private IBXM ibxm;
+   private Module module;
+   private int songDuration;
+   private int playPosition;
+   private SoundSystemLogger logger = SoundSystemConfig.getLogger();
+
+
+   public void reverseByteOrder(boolean b) {
+      this.reverseBytes = b;
+   }
+
+   public boolean initialize(URL url) {
+      this.initialized(true, false);
+      this.cleanup();
+      if(url == null) {
+         this.errorMessage("url null in method \'initialize\'");
+         this.cleanup();
+         return false;
+      } else {
+         InputStream is = null;
+
+         try {
+            is = url.openStream();
+         } catch (IOException var8) {
+            this.errorMessage("Unable to open stream in method \'initialize\'");
+            this.printStackTrace(var8);
+            return false;
+         }
+
+         if(this.ibxm == null) {
+            this.ibxm = new IBXM('\ubb80');
+         }
+
+         if(this.myAudioFormat == null) {
+            this.myAudioFormat = new AudioFormat(48000.0F, 16, 2, true, true);
+         }
+
+         try {
+            this.setModule(loadModule(is));
+         } catch (IllegalArgumentException var9) {
+            this.errorMessage("Illegal argument in method \'initialize\'");
+            this.printStackTrace(var9);
+            if(is != null) {
+               try {
+                  is.close();
+               } catch (IOException var5) {
+                  ;
+               }
+            }
+
+            return false;
+         } catch (IOException var10) {
+            this.errorMessage("Error loading module in method \'initialize\'");
+            this.printStackTrace(var10);
+            if(is != null) {
+               try {
+                  is.close();
+               } catch (IOException var6) {
+                  ;
+               }
+            }
+
+            return false;
+         }
+
+         if(is != null) {
+            try {
+               is.close();
+            } catch (IOException var7) {
+               ;
+            }
+         }
+
+         this.endOfStream(true, false);
+         this.initialized(true, true);
+         return true;
+      }
+   }
+
+   public boolean initialized() {
+      return this.initialized(false, false);
+   }
+
+   public SoundBuffer read() {
+      if(this.endOfStream(false, false)) {
+         return null;
+      } else if(this.module == null) {
+         this.errorMessage("Module null in method \'read\'");
+         return null;
+      } else if(this.myAudioFormat == null) {
+         this.errorMessage("Audio Format null in method \'read\'");
+         return null;
+      } else {
+         int bufferFrameSize = SoundSystemConfig.getStreamingBufferSize() / 4;
+         int frames = this.songDuration - this.playPosition;
+         if(frames > bufferFrameSize) {
+            frames = bufferFrameSize;
+         }
+
+         if(frames <= 0) {
+            this.endOfStream(true, true);
+            return null;
+         } else {
+            byte[] outputBuffer = new byte[frames * 4];
+            this.ibxm.get_audio(outputBuffer, frames);
+            this.playPosition += frames;
+            if(this.playPosition >= this.songDuration) {
+               this.endOfStream(true, true);
+            }
+
+            if(this.reverseBytes) {
+               reverseBytes(outputBuffer, 0, frames * 4);
+            }
+
+            SoundBuffer buffer = new SoundBuffer(outputBuffer, this.myAudioFormat);
+            return buffer;
+         }
+      }
+   }
+
+   public SoundBuffer readAll() {
+      if(this.module == null) {
+         this.errorMessage("Module null in method \'readAll\'");
+         return null;
+      } else if(this.myAudioFormat == null) {
+         this.errorMessage("Audio Format null in method \'readAll\'");
+         return null;
+      } else {
+         int bufferFrameSize = SoundSystemConfig.getFileChunkSize() / 4;
+         byte[] outputBuffer = new byte[bufferFrameSize * 4];
+         byte[] fullBuffer = null;
+         int totalBytes = 0;
+
+         while(!this.endOfStream(false, false) && totalBytes < SoundSystemConfig.getMaxFileSize()) {
+            int frames = this.songDuration - this.playPosition;
+            if(frames > bufferFrameSize) {
+               frames = bufferFrameSize;
+            }
+
+            this.ibxm.get_audio(outputBuffer, frames);
+            totalBytes += frames * 4;
+            fullBuffer = appendByteArrays(fullBuffer, outputBuffer, frames * 4);
+            this.playPosition += frames;
+            if(this.playPosition >= this.songDuration) {
+               this.endOfStream(true, true);
+            }
+         }
+
+         if(this.reverseBytes) {
+            reverseBytes(fullBuffer, 0, totalBytes);
+         }
+
+         SoundBuffer buffer = new SoundBuffer(fullBuffer, this.myAudioFormat);
+         return buffer;
+      }
+   }
+
+   public boolean endOfStream() {
+      return this.endOfStream(false, false);
+   }
+
+   public void cleanup() {
+      this.playPosition = 0;
+   }
+
+   public AudioFormat getAudioFormat() {
+      return this.myAudioFormat;
+   }
+
+   private static Module loadModule(InputStream input) throws IllegalArgumentException, IOException {
+      DataInputStream data_input_stream = new DataInputStream(input);
+      byte[] xm_header = new byte[60];
+      data_input_stream.readFully(xm_header);
+      if(FastTracker2.is_xm(xm_header)) {
+         return FastTracker2.load_xm(xm_header, data_input_stream);
+      } else {
+         byte[] s3m_header = new byte[96];
+         System.arraycopy(xm_header, 0, s3m_header, 0, 60);
+         data_input_stream.readFully(s3m_header, 60, 36);
+         if(ScreamTracker3.is_s3m(s3m_header)) {
+            return ScreamTracker3.load_s3m(s3m_header, data_input_stream);
+         } else {
+            byte[] mod_header = new byte[1084];
+            System.arraycopy(s3m_header, 0, mod_header, 0, 96);
+            data_input_stream.readFully(mod_header, 96, 988);
+            return ProTracker.load_mod(mod_header, data_input_stream);
+         }
+      }
+   }
+
+   private void setModule(Module m) {
+      if(m != null) {
+         this.module = m;
+      }
+
+      this.ibxm.set_module(this.module);
+      this.songDuration = this.ibxm.calculate_song_duration();
+   }
+
+   private synchronized boolean initialized(boolean action, boolean value) {
+      if(action) {
+         this.initialized = value;
+      }
+
+      return this.initialized;
+   }
+
+   private synchronized boolean endOfStream(boolean action, boolean value) {
+      if(action) {
+         this.endOfStream = value;
+      }
+
+      return this.endOfStream;
+   }
+
+   private static byte[] trimArray(byte[] array, int maxLength) {
+      byte[] trimmedArray = null;
+      if(array != null && array.length > maxLength) {
+         trimmedArray = new byte[maxLength];
+         System.arraycopy(array, 0, trimmedArray, 0, maxLength);
+      }
+
+      return trimmedArray;
+   }
+
+   public static void reverseBytes(byte[] buffer) {
+      reverseBytes(buffer, 0, buffer.length);
+   }
+
+   public static void reverseBytes(byte[] buffer, int offset, int size) {
+      for(int i = offset; i < offset + size; i += 2) {
+         byte b = buffer[i];
+         buffer[i] = buffer[i + 1];
+         buffer[i + 1] = b;
+      }
+
+   }
+
+   private static byte[] convertAudioBytes(byte[] audio_bytes, boolean two_bytes_data) {
+      ByteBuffer dest = ByteBuffer.allocateDirect(audio_bytes.length);
+      dest.order(ByteOrder.nativeOrder());
+      ByteBuffer src = ByteBuffer.wrap(audio_bytes);
+      src.order(ByteOrder.LITTLE_ENDIAN);
+      if(two_bytes_data) {
+         ShortBuffer arrayBackedBuffer = dest.asShortBuffer();
+         ShortBuffer src_short = src.asShortBuffer();
+
+         while(src_short.hasRemaining()) {
+            arrayBackedBuffer.put(src_short.get());
+         }
+      } else {
+         while(src.hasRemaining()) {
+            dest.put(src.get());
+         }
+      }
+
+      dest.rewind();
+      if(!dest.hasArray()) {
+         byte[] arrayBackedBuffer1 = new byte[dest.capacity()];
+         dest.get(arrayBackedBuffer1);
+         dest.clear();
+         return arrayBackedBuffer1;
+      } else {
+         return dest.array();
+      }
+   }
+
+   private static byte[] appendByteArrays(byte[] arrayOne, byte[] arrayTwo, int length) {
+      if(arrayOne == null && arrayTwo == null) {
+         return null;
+      } else {
+         byte[] newArray;
+         Object arrayTwo1;
+         if(arrayOne == null) {
+            newArray = new byte[length];
+            System.arraycopy(arrayTwo, 0, newArray, 0, length);
+            arrayTwo1 = null;
+         } else {
+            Object arrayOne1;
+            if(arrayTwo == null) {
+               newArray = new byte[arrayOne.length];
+               System.arraycopy(arrayOne, 0, newArray, 0, arrayOne.length);
+               arrayOne1 = null;
+            } else {
+               newArray = new byte[arrayOne.length + length];
+               System.arraycopy(arrayOne, 0, newArray, 0, arrayOne.length);
+               System.arraycopy(arrayTwo, 0, newArray, arrayOne.length, length);
+               arrayOne1 = null;
+               arrayTwo1 = null;
+            }
+         }
+
+         return newArray;
+      }
+   }
+
+   private void errorMessage(String message) {
+      this.logger.errorMessage("CodecWav", message, 0);
+   }
+
+   private void printStackTrace(Exception e) {
+      this.logger.printStackTrace(e, 1);
+   }
+}
--- net/minecraft/src/MobSpawnerHell.java
+++ net/minecraft/src/MobSpawnerHell.java
@@ -2,7 +2,7 @@
 
 public class MobSpawnerHell extends MobSpawnerBase {
 	public MobSpawnerHell() {
-		this.biomeMonsters = new Class[]{EntityGhast.class, EntityPigZombie.class};
+		this.biomeMonsters = new Class[]{EntityGhast.class, EntityPigZombie.class, EntitySlimeFire.class};
 		this.biomeCreatures = new Class[0];
 	}
 }
--- net/minecraft/src/TileEntityFurnace.java
+++ net/minecraft/src/TileEntityFurnace.java
@@ -173,7 +173,8 @@
 	}
 
 	private int getSmeltingResultItem(int var1) {
-		return var1 == Block.oreIron.blockID ? Item.ingotIron.shiftedIndex : (var1 == Block.oreGold.blockID ? Item.ingotGold.shiftedIndex : (var1 == Block.oreDiamond.blockID ? Item.diamond.shiftedIndex : (var1 == Block.sand.blockID ? Block.glass.blockID : (var1 == Item.porkRaw.shiftedIndex ? Item.porkCooked.shiftedIndex : (var1 == Item.fishRaw.shiftedIndex ? Item.fishCooked.shiftedIndex : (var1 == Block.cobblestone.blockID ? Block.stone.blockID : (var1 == Item.clay.shiftedIndex ? Item.brick.shiftedIndex : -1)))))));
+		//return var1 == Block.oreIron.blockID ? Item.ingotIron.shiftedIndex : (var1 == Block.oreGold.blockID ? Item.ingotGold.shiftedIndex : (var1 == Block.oreDiamond.blockID ? Item.diamond.shiftedIndex : (var1 == Block.sand.blockID ? Block.glass.blockID : (var1 == Item.porkRaw.shiftedIndex ? Item.porkCooked.shiftedIndex : (var1 == Item.fishRaw.shiftedIndex ? Item.fishCooked.shiftedIndex : (var1 == Block.cobblestone.blockID ? Block.stone.blockID : (var1 == Item.clay.shiftedIndex ? Item.brick.shiftedIndex : (var1 == Block.sandstone.blockID ? Block.smoothSandstone.blockID : -1))))))));
+		return FurnaceRecipes.recipes.getSmeltResult(var1);
 	}
 
 	private int getItemBurnTime(ItemStack var1) {
--- net/minecraft/src/EntitySpider.java
+++ net/minecraft/src/EntitySpider.java
@@ -14,9 +14,9 @@
 
 	protected Entity findPlayerToAttack() {
 		float var1 = this.getEntityBrightness(1.0F);
-		if(var1 < 0.5F) {
-			double var2 = 16.0D;
-			return this.worldObj.getClosestPlayerToEntity(this, var2);
+		EntityPlayer var2 = this.worldObj.getClosestPlayerToEntity(this, 16.0D);
+		if(var1 < 0.5F && var2 != null && var2.doMobsTrackYou()) {
+			return var2;
 		} else {
 			return null;
 		}
--- net/minecraft/src/BlockClay.java
+++ net/minecraft/src/BlockClay.java
@@ -12,6 +12,6 @@
 	}
 
 	public int quantityDropped(Random var1) {
-		return 4;
+		return 1 + var1.nextInt(3);
 	}
 }
--- net/minecraft/src/WorldProvider.java
+++ net/minecraft/src/WorldProvider.java
@@ -6,7 +6,7 @@
 	public World worldObj;
 	public WorldChunkManager worldChunkMgr;
 	public boolean field_4220_c = false;
-	public boolean field_6479_d = false;
+	public boolean field_6479_d = false; //Is hell
 	public boolean field_6478_e = false;
 	public float[] lightBrightnessTable = new float[16];
 	public int field_4218_e = 0;
@@ -42,7 +42,7 @@
 
 	public boolean canCoordinateBeSpawn(int var1, int var2) {
 		int var3 = this.worldObj.func_614_g(var1, var2);
-		return var3 == Block.sand.blockID;
+		return Agrupation.playerSpawn.contains(var3);
 	}
 
 	public float calculateCelestialAngle(long var1, float var3) {
--- /dev/null
+++ ibxm/FastTracker2.java
@@ -1,0 +1,261 @@
+package ibxm;
+
+import java.io.DataInput;
+import java.io.EOFException;
+import java.io.IOException;
+import java.io.UnsupportedEncodingException;
+
+public class FastTracker2 {
+	public static boolean is_xm(byte[] header_60_bytes) {
+		String xm_identifier = ascii_text(header_60_bytes, 0, 17);
+		return xm_identifier.equals("Extended Module: ");
+	}
+
+	public static Module load_xm(byte[] header_60_bytes, DataInput data_input) throws IOException {
+		if(!is_xm(header_60_bytes)) {
+			throw new IllegalArgumentException("Not an XM file!");
+		} else {
+			int xm_version = unsigned_short_le(header_60_bytes, 58);
+			if(xm_version != 260) {
+				throw new IllegalArgumentException("Sorry, XM version " + xm_version + " is not supported!");
+			} else {
+				Module module = new Module();
+				module.song_title = ascii_text(header_60_bytes, 17, 20);
+				String tracker_name = ascii_text(header_60_bytes, 38, 20);
+				boolean delta_env = tracker_name.startsWith("DigiBooster Pro");
+				byte[] structure_header = new byte[4];
+				data_input.readFully(structure_header);
+				int song_header_length = int_le(structure_header, 0);
+				byte[] song_header = new byte[song_header_length];
+				data_input.readFully(song_header, 4, song_header_length - 4);
+				int sequence_length = unsigned_short_le(song_header, 4);
+				module.restart_sequence_index = unsigned_short_le(song_header, 6);
+				int num_channels = unsigned_short_le(song_header, 8);
+				int num_patterns = unsigned_short_le(song_header, 10);
+				int num_instruments = unsigned_short_le(song_header, 12);
+				int xm_flags = unsigned_short_le(song_header, 14);
+				module.linear_periods = (xm_flags & 1) == 1;
+				module.global_volume = 64;
+				module.channel_gain = 12288;
+				module.default_speed = unsigned_short_le(song_header, 16);
+				module.default_tempo = unsigned_short_le(song_header, 18);
+				module.set_num_channels(num_channels);
+
+				int idx;
+				for(idx = 0; idx < num_channels; ++idx) {
+					module.set_initial_panning(idx, 128);
+				}
+
+				module.set_sequence_length(sequence_length);
+
+				for(idx = 0; idx < sequence_length; ++idx) {
+					module.set_sequence(idx, song_header[20 + idx] & 255);
+				}
+
+				module.set_num_patterns(num_patterns);
+
+				for(idx = 0; idx < num_patterns; ++idx) {
+					module.set_pattern(idx, read_xm_pattern(data_input, num_channels));
+				}
+
+				module.set_num_instruments(num_instruments);
+
+				for(idx = 1; idx <= num_instruments; ++idx) {
+					try {
+						Instrument instrument = read_xm_instrument(data_input, delta_env);
+						module.set_instrument(idx, instrument);
+					} catch (EOFException var17) {
+						System.out.println("Instrument " + idx + " is missing!");
+					}
+				}
+
+				return module;
+			}
+		}
+	}
+
+	private static Pattern read_xm_pattern(DataInput data_input, int num_channels) throws IOException {
+		byte[] structure_header = new byte[4];
+		data_input.readFully(structure_header);
+		int pattern_header_length = int_le(structure_header, 0);
+		byte[] pattern_header = new byte[pattern_header_length];
+		data_input.readFully(pattern_header, 4, pattern_header_length - 4);
+		byte packing_type = pattern_header[4];
+		if(packing_type != 0) {
+			throw new IllegalArgumentException("Pattern packing type " + packing_type + " is not supported!");
+		} else {
+			Pattern pattern = new Pattern();
+			pattern.num_rows = unsigned_short_le(pattern_header, 5);
+			int pattern_data_length = unsigned_short_le(pattern_header, 7);
+			byte[] pattern_data = new byte[pattern_data_length];
+			data_input.readFully(pattern_data);
+			pattern.set_pattern_data(pattern_data);
+			return pattern;
+		}
+	}
+
+	private static Instrument read_xm_instrument(DataInput data_input, boolean delta_env) throws IOException {
+		byte[] structure_header = new byte[4];
+		data_input.readFully(structure_header);
+		int instrument_header_length = int_le(structure_header, 0);
+		byte[] instrument_header = new byte[instrument_header_length];
+		data_input.readFully(instrument_header, 4, instrument_header_length - 4);
+		Instrument instrument = new Instrument();
+		instrument.name = ascii_text(instrument_header, 4, 22);
+		int num_samples = unsigned_short_le(instrument_header, 27);
+		if(num_samples > 0) {
+			instrument.set_num_samples(num_samples);
+
+			int idx;
+			for(idx = 0; idx < 96; ++idx) {
+				instrument.set_key_to_sample(idx + 1, instrument_header[33 + idx] & 255);
+			}
+
+			Envelope envelope = new Envelope();
+			int env_num_points = instrument_header[225] & 255;
+			envelope.set_num_points(env_num_points);
+
+			int env_tick;
+			int env_ampl;
+			for(idx = 0; idx < env_num_points; ++idx) {
+				env_tick = unsigned_short_le(instrument_header, 129 + idx * 4);
+				env_ampl = unsigned_short_le(instrument_header, 131 + idx * 4);
+				envelope.set_point(idx, env_tick, env_ampl, delta_env);
+			}
+
+			envelope.set_sustain_point(instrument_header[227] & 255);
+			envelope.set_loop_points(instrument_header[228] & 255, instrument_header[229] & 255);
+			int flags = instrument_header[233] & 255;
+			instrument.volume_envelope_active = (flags & 1) == 1;
+			envelope.sustain = (flags & 2) == 2;
+			envelope.looped = (flags & 4) == 4;
+			instrument.set_volume_envelope(envelope);
+			envelope = new Envelope();
+			env_num_points = instrument_header[226] & 255;
+			envelope.set_num_points(env_num_points);
+
+			for(idx = 0; idx < env_num_points; ++idx) {
+				env_tick = unsigned_short_le(instrument_header, 177 + idx * 4);
+				env_ampl = unsigned_short_le(instrument_header, 179 + idx * 4);
+				envelope.set_point(idx, env_tick, env_ampl, delta_env);
+			}
+
+			envelope.set_sustain_point(instrument_header[230] & 255);
+			envelope.set_loop_points(instrument_header[231] & 255, instrument_header[232] & 255);
+			flags = instrument_header[234] & 255;
+			instrument.panning_envelope_active = (flags & 1) == 1;
+			envelope.sustain = (flags & 2) == 2;
+			envelope.looped = (flags & 4) == 4;
+			instrument.set_panning_envelope(envelope);
+			instrument.vibrato_type = instrument_header[235] & 255;
+			instrument.vibrato_sweep = instrument_header[236] & 255;
+			instrument.vibrato_depth = instrument_header[237] & 255;
+			instrument.vibrato_rate = instrument_header[238] & 255;
+			instrument.volume_fade_out = unsigned_short_le(instrument_header, 239);
+			byte[] sample_headers = new byte[num_samples * 40];
+			data_input.readFully(sample_headers);
+
+			for(idx = 0; idx < num_samples; ++idx) {
+				instrument.set_sample(idx, read_xm_sample(sample_headers, idx, data_input));
+			}
+		}
+
+		return instrument;
+	}
+
+	private static Sample read_xm_sample(byte[] sample_headers, int sample_idx, DataInput data_input) throws IOException {
+		int header_offset = sample_idx * 40;
+		Sample sample = new Sample();
+		int sample_length = int_le(sample_headers, header_offset);
+		int loop_start = int_le(sample_headers, header_offset + 4);
+		int loop_length = int_le(sample_headers, header_offset + 8);
+		sample.volume = sample_headers[header_offset + 12] & 255;
+		byte fine_tune = sample_headers[header_offset + 13];
+		int var22 = (fine_tune << 15) / 1536;
+		sample.set_panning = true;
+		int flags = sample_headers[header_offset + 14] & 255;
+		if((flags & 3) == 0) {
+			loop_length = 0;
+		}
+
+		boolean ping_pong = (flags & 2) == 2;
+		boolean sixteen_bit = (flags & 16) == 16;
+		sample.panning = sample_headers[header_offset + 15] & 255;
+		byte relative_note = sample_headers[header_offset + 16];
+		int var23 = (relative_note << 15) / 12;
+		sample.transpose = var23 + var22;
+		sample.name = ascii_text(sample_headers, header_offset + 18, 22);
+		byte[] raw_sample_data = new byte[sample_length];
+
+		try {
+			data_input.readFully(raw_sample_data);
+		} catch (EOFException var20) {
+			System.out.println("Sample has been truncated!");
+		}
+
+		int in_idx = 0;
+		int out_idx = 0;
+		boolean sam = false;
+		int last_sam = 0;
+		short[] decoded_sample_data;
+		int var21;
+		if(sixteen_bit) {
+			for(decoded_sample_data = new short[sample_length >> 1]; in_idx < raw_sample_data.length; ++out_idx) {
+				var21 = raw_sample_data[in_idx] & 255;
+				var21 |= (raw_sample_data[in_idx + 1] & 255) << 8;
+				last_sam += var21;
+				decoded_sample_data[out_idx] = (short)last_sam;
+				in_idx += 2;
+			}
+
+			sample.set_sample_data(decoded_sample_data, loop_start >> 1, loop_length >> 1, ping_pong);
+		} else {
+			for(decoded_sample_data = new short[sample_length]; in_idx < raw_sample_data.length; ++out_idx) {
+				var21 = raw_sample_data[in_idx] & 255;
+				last_sam += var21;
+				decoded_sample_data[out_idx] = (short)(last_sam << 8);
+				++in_idx;
+			}
+
+			sample.set_sample_data(decoded_sample_data, loop_start, loop_length, ping_pong);
+		}
+
+		return sample;
+	}
+
+	private static int unsigned_short_le(byte[] buffer, int offset) {
+		int value = buffer[offset] & 255;
+		value |= (buffer[offset + 1] & 255) << 8;
+		return value;
+	}
+
+	private static int int_le(byte[] buffer, int offset) {
+		int value = buffer[offset] & 255;
+		value |= (buffer[offset + 1] & 255) << 8;
+		value |= (buffer[offset + 2] & 255) << 16;
+		value |= (buffer[offset + 3] & 127) << 24;
+		return value;
+	}
+
+	private static String ascii_text(byte[] buffer, int offset, int length) {
+		byte[] string_buffer = new byte[length];
+
+		for(int idx = 0; idx < length; ++idx) {
+			byte chr = buffer[offset + idx];
+			if(chr < 32) {
+				chr = 32;
+			}
+
+			string_buffer[idx] = (byte)chr;
+		}
+
+		String string;
+		try {
+			string = new String(string_buffer, 0, length, "ISO-8859-1");
+		} catch (UnsupportedEncodingException var8) {
+			string = "";
+		}
+
+		return string;
+	}
+}
--- net/minecraft/src/CraftingManager.java
+++ net/minecraft/src/CraftingManager.java
@@ -22,20 +22,20 @@
 		(new RecipesArmor()).func_1148_a(this);
 		this.addRecipe(new ItemStack(Item.paper, 3), new Object[]{"###", Character.valueOf('#'), Item.reed});
 		this.addRecipe(new ItemStack(Item.book, 1), new Object[]{"#", "#", "#", Character.valueOf('#'), Item.paper});
-		this.addRecipe(new ItemStack(Block.fence, 2), new Object[]{"###", "###", Character.valueOf('#'), Item.stick});
+		this.addRecipe(new ItemStack(Block.fence, 3), new Object[]{"###", "###", Character.valueOf('#'), Item.stick});
 		this.addRecipe(new ItemStack(Block.jukebox, 1), new Object[]{"###", "#X#", "###", Character.valueOf('#'), Block.planks, Character.valueOf('X'), Item.diamond});
 		this.addRecipe(new ItemStack(Block.bookShelf, 1), new Object[]{"###", "XXX", "###", Character.valueOf('#'), Block.planks, Character.valueOf('X'), Item.book});
 		this.addRecipe(new ItemStack(Block.blockSnow, 1), new Object[]{"##", "##", Character.valueOf('#'), Item.snowball});
 		this.addRecipe(new ItemStack(Block.blockClay, 1), new Object[]{"##", "##", Character.valueOf('#'), Item.clay});
 		this.addRecipe(new ItemStack(Block.brick, 1), new Object[]{"##", "##", Character.valueOf('#'), Item.brick});
-		this.addRecipe(new ItemStack(Block.lightStone, 1), new Object[]{"###", "###", "###", Character.valueOf('#'), Item.lightStoneDust});
-		this.addRecipe(new ItemStack(Block.cloth, 1), new Object[]{"###", "###", "###", Character.valueOf('#'), Item.silk});
+		this.addRecipe(new ItemStack(Block.lightStone, 1), new Object[]{"##", "##", Character.valueOf('#'), Item.lightStoneDust});
+		this.addRecipe(new ItemStack(Block.cloth, 1), new Object[]{"##", "##", Character.valueOf('#'), Item.silk});
 		this.addRecipe(new ItemStack(Block.tnt, 1), new Object[]{"X#X", "#X#", "X#X", Character.valueOf('X'), Item.gunpowder, Character.valueOf('#'), Block.sand});
-		this.addRecipe(new ItemStack(Block.stairSingle, 3), new Object[]{"###", Character.valueOf('#'), Block.cobblestone});
-		this.addRecipe(new ItemStack(Block.ladder, 1), new Object[]{"# #", "###", "# #", Character.valueOf('#'), Item.stick});
-		this.addRecipe(new ItemStack(Item.doorWood, 1), new Object[]{"##", "##", "##", Character.valueOf('#'), Block.planks});
+		this.addRecipe(new ItemStack(Block.stairSingle, 6), new Object[]{"###", Character.valueOf('#'), Block.cobblestone});
+		this.addRecipe(new ItemStack(Block.ladder, 3), new Object[]{"# #", "###", "# #", Character.valueOf('#'), Item.stick});
+		this.addRecipe(new ItemStack(Item.doorWood, 3), new Object[]{"##", "##", "##", Character.valueOf('#'), Block.planks});
 		this.addRecipe(new ItemStack(Item.doorSteel, 1), new Object[]{"##", "##", "##", Character.valueOf('#'), Item.ingotIron});
-		this.addRecipe(new ItemStack(Item.sign, 1), new Object[]{"###", "###", " X ", Character.valueOf('#'), Block.planks, Character.valueOf('X'), Item.stick});
+		this.addRecipe(new ItemStack(Item.sign, 3), new Object[]{"###", "###", " X ", Character.valueOf('#'), Block.planks, Character.valueOf('X'), Item.stick});
 		this.addRecipe(new ItemStack(Block.planks, 4), new Object[]{"#", Character.valueOf('#'), Block.wood});
 		this.addRecipe(new ItemStack(Item.stick, 4), new Object[]{"#", "#", Character.valueOf('#'), Block.planks});
 		this.addRecipe(new ItemStack(Block.torchWood, 4), new Object[]{"X", "#", Character.valueOf('X'), Item.coal, Character.valueOf('#'), Item.stick});
@@ -60,7 +60,21 @@
 		this.addRecipe(new ItemStack(Item.compass, 1), new Object[]{" # ", "#X#", " # ", Character.valueOf('#'), Item.ingotIron, Character.valueOf('X'), Item.redstone});
 		this.addRecipe(new ItemStack(Block.button, 1), new Object[]{"#", "#", Character.valueOf('#'), Block.stone});
 		this.addRecipe(new ItemStack(Block.pressurePlateStone, 1), new Object[]{"###", Character.valueOf('#'), Block.stone});
-		this.addRecipe(new ItemStack(Block.pressurePlatePlanks, 1), new Object[]{"###", Character.valueOf('#'), Block.planks});
+		this.addRecipe(new ItemStack(Block.pressurePlatePlanks, 2), new Object[]{"###", Character.valueOf('#'), Block.planks});
+		this.addRecipe(new ItemStack(Block.pressurePlateGold, 1), new Object[]{"###", Character.valueOf('#'), Item.ingotGold});
+		this.addRecipe(new ItemStack(Block.adobe, 4), new Object[]{"#X", "X#", Character.valueOf('#'), Block.dirt, Character.valueOf('X'), Item.wheat});
+		this.addRecipe(new ItemStack(Block.adobe, 4), new Object[]{"X#", "#X", Character.valueOf('#'), Block.dirt, Character.valueOf('X'), Item.wheat});
+		this.addRecipe(new ItemStack(Block.timeReactor, 1), new Object[]{"###","XXX","###", Character.valueOf('#'), Block.glowingObsidian, Character.valueOf('X'), Block.lightStone});
+		this.addRecipe(new ItemStack(Block.redstoneLampOff, 1), new Object[]{" # ","#X#"," # ", Character.valueOf('#'), Item.lightStoneDust, Character.valueOf('X'), Item.redstone});
+		this.addRecipe(new ItemStack(Block.stairDouble, 1), new Object[]{"#", "#", Character.valueOf('#'), Block.stairSingle});
+		this.addRecipe(new ItemStack(Block.blockBone, 1), new Object[]{"##", "##", Character.valueOf('#'), Item.zombieTooth});
+		this.addRecipe(new ItemStack(Item.ingotGold, 1), new Object[]{"###", "###", Character.valueOf('#'), Item.nuggetGold});
+		this.addRecipe(new ItemStack(Item.nuggetGold, 6), new Object[]{"#", Character.valueOf('#'), Item.ingotGold});
+		this.addRecipe(new ItemStack(Block.minecartTrackGold, 32), new Object[]{"X X", "X#X", "X X", Character.valueOf('X'), Item.ingotGold, Character.valueOf('#'), Item.stick});
+		this.addRecipe(new ItemStack(Block.sandstone, 2), new Object[]{"##", "##", Character.valueOf('#'), Block.sand});
+		this.addRecipe(new ItemStack(Block.itemFilter, 1), new Object[]{"#X#", "XXX", "#X#", Character.valueOf('#'), Item.stick, Character.valueOf('X'), Item.silk});
+		this.addRecipe(new ItemStack(Block.alchemyStationWood, 1), new Object[]{"#X#", "#A#", "#B#", Character.valueOf('#'), Block.wood, Character.valueOf('X'), Block.glass, Character.valueOf('A'), Item.gunpowder, Character.valueOf('B'), Block.blockPlumbum});
+		this.addRecipe(new ItemStack(Block.alchemyStationIron, 1), new Object[]{"#X#", "#A#", "#B#", Character.valueOf('#'), Block.blockSteel, Character.valueOf('X'), Block.glass, Character.valueOf('A'), Item.gunpowder, Character.valueOf('B'), Block.blockPlumbum});
 		Collections.sort(this.recipes, new RecipeSorter(this));
 		System.out.println(this.recipes.size() + " recipes");
 	}
--- /dev/null
+++ ibxm/Channel.java
@@ -1,0 +1,948 @@
+package ibxm;
+
+public class Channel {
+	public int pattern_loop_row;
+	private Module module;
+	private Instrument instrument;
+	private Sample sample;
+	private int[] global_volume;
+	private int[] current_note;
+	private boolean linear_periods;
+	private boolean fast_volume_slides;
+	private boolean key_on;
+	private boolean silent;
+	private int sample_idx;
+	private int sample_frac;
+	private int step;
+	private int left_gain;
+	private int right_gain;
+	private int volume;
+	private int panning;
+	private int fine_tune;
+	private int period;
+	private int porta_period;
+	private int key_add;
+	private int tremolo_speed;
+	private int tremolo_depth;
+	private int tremolo_tick;
+	private int tremolo_wave;
+	private int tremolo_add;
+	private int vibrato_speed;
+	private int vibrato_depth;
+	private int vibrato_tick;
+	private int vibrato_wave;
+	private int vibrato_add;
+	private int volume_slide_param;
+	private int portamento_param;
+	private int retrig_param;
+	private int volume_envelope_tick;
+	private int panning_envelope_tick;
+	private int effect_tick;
+	private int trigger_tick;
+	private int fade_out_volume;
+	private int random_seed;
+	private int log_2_sampling_rate;
+	private static final int LOG_2_29024 = LogTable.log_2(29024);
+	private static final int LOG_2_8287 = LogTable.log_2(8287);
+	private static final int LOG_2_8363 = LogTable.log_2(8363);
+	private static final int LOG_2_1712 = LogTable.log_2(1712);
+	private static final int[] sine_table = new int[]{0, 24, 49, 74, 97, 120, 141, 161, 180, 197, 212, 224, 235, 244, 250, 253, 255, 253, 250, 244, 235, 224, 212, 197, 180, 161, 141, 120, 97, 74, 49, 24};
+
+	public Channel(Module mod, int sampling_rate, int[] global_vol) {
+		this.module = mod;
+		this.global_volume = global_vol;
+		this.linear_periods = this.module.linear_periods;
+		this.fast_volume_slides = this.module.fast_volume_slides;
+		this.current_note = new int[5];
+		this.log_2_sampling_rate = LogTable.log_2(sampling_rate);
+	}
+
+	public void reset() {
+		this.tremolo_speed = 0;
+		this.tremolo_depth = 0;
+		this.tremolo_wave = 0;
+		this.vibrato_speed = 0;
+		this.vibrato_depth = 0;
+		this.vibrato_wave = 0;
+		this.volume_slide_param = 0;
+		this.portamento_param = 0;
+		this.retrig_param = 0;
+		this.random_seed = 11256099;
+		this.instrument = this.module.get_instrument(0);
+		this.row(48, 256, 0, 0, 0);
+	}
+
+	public void resample(int[] mixing_buffer, int frame_offset, int frames, int quality) {
+		if(!this.silent) {
+			switch(quality) {
+			case 1:
+				this.sample.resample_linear(this.sample_idx, this.sample_frac, this.step, this.left_gain, this.right_gain, mixing_buffer, frame_offset, frames);
+				break;
+			case 2:
+				this.sample.resample_sinc(this.sample_idx, this.sample_frac, this.step, this.left_gain, this.right_gain, mixing_buffer, frame_offset, frames);
+				break;
+			default:
+				this.sample.resample_nearest(this.sample_idx, this.sample_frac, this.step, this.left_gain, this.right_gain, mixing_buffer, frame_offset, frames);
+			}
+		}
+
+	}
+
+	public void update_sample_idx(int samples) {
+		this.sample_frac += this.step * samples;
+		this.sample_idx += this.sample_frac >> 15;
+		this.sample_frac &= Short.MAX_VALUE;
+	}
+
+	public void set_volume(int vol) {
+		if(vol < 0) {
+			vol = 0;
+		}
+
+		if(vol > 64) {
+			vol = 64;
+		}
+
+		this.volume = vol;
+	}
+
+	public void set_panning(int pan) {
+		if(pan < 0) {
+			pan = 0;
+		}
+
+		if(pan > 255) {
+			pan = 255;
+		}
+
+		this.panning = pan;
+	}
+
+	public void row(int key, int inst_idx, int volume_column, int effect, int effect_param) {
+		effect &= 255;
+		if(effect >= 48) {
+			effect = 0;
+		}
+
+		if(effect == 0 && effect_param != 0) {
+			effect = 64;
+		}
+
+		if(effect == 14) {
+			effect = 48 + ((effect_param & 240) >> 4);
+			effect_param &= 15;
+		}
+
+		if(effect == 33) {
+			effect = 64 + ((effect_param & 240) >> 4);
+			effect_param &= 15;
+		}
+
+		this.current_note[0] = key;
+		this.current_note[1] = inst_idx;
+		this.current_note[2] = volume_column;
+		this.current_note[3] = effect;
+		this.current_note[4] = effect_param;
+		this.effect_tick = 0;
+		++this.trigger_tick;
+		this.update_envelopes();
+		this.key_add = 0;
+		this.vibrato_add = 0;
+		this.tremolo_add = 0;
+		if(effect != 61 || effect_param <= 0) {
+			this.trigger(key, inst_idx, volume_column, effect);
+			switch(volume_column & 240) {
+			case 0:
+			case 96:
+			case 112:
+			case 208:
+			case 224:
+				break;
+			case 128:
+				this.set_volume(this.volume - (volume_column & 15));
+				break;
+			case 144:
+				this.set_volume(this.volume + (volume_column & 15));
+				break;
+			case 160:
+				this.set_vibrato_speed(volume_column & 15);
+				break;
+			case 176:
+				this.set_vibrato_depth(volume_column & 15);
+				this.vibrato();
+				break;
+			case 192:
+				this.set_panning((volume_column & 15) << 4);
+				break;
+			case 240:
+				this.set_portamento_param(volume_column & 15);
+				break;
+			default:
+				this.set_volume(volume_column - 16);
+			}
+		}
+
+		if(this.instrument.vibrato_depth > 0) {
+			this.auto_vibrato();
+		}
+
+		switch(effect) {
+		case 1:
+			this.set_portamento_param(effect_param);
+			this.portamento_up();
+			break;
+		case 2:
+			this.set_portamento_param(effect_param);
+			this.portamento_down();
+			break;
+		case 3:
+			this.set_portamento_param(effect_param);
+			break;
+		case 4:
+			this.set_vibrato_speed((effect_param & 240) >> 4);
+			this.set_vibrato_depth(effect_param & 15);
+			this.vibrato();
+			break;
+		case 5:
+			this.set_volume_slide_param(effect_param);
+			this.volume_slide();
+			break;
+		case 6:
+			this.set_volume_slide_param(effect_param);
+			this.vibrato();
+			this.volume_slide();
+			break;
+		case 7:
+			this.set_tremolo_speed((effect_param & 240) >> 4);
+			this.set_tremolo_depth(effect_param & 15);
+			this.tremolo();
+			break;
+		case 8:
+			this.set_panning(effect_param);
+			break;
+		case 9:
+			this.set_sample_index(effect_param << 8);
+			break;
+		case 10:
+			this.set_volume_slide_param(effect_param);
+			this.volume_slide();
+		case 11:
+		case 13:
+		case 14:
+		case 15:
+		case 18:
+		case 19:
+		case 22:
+		case 23:
+		case 24:
+		case 26:
+		case 28:
+		case 30:
+		case 31:
+		case 32:
+		case 33:
+		case 34:
+		case 35:
+		case 37:
+		case 38:
+		case 39:
+		case 40:
+		case 41:
+		case 42:
+		case 43:
+		case 44:
+		case 45:
+		case 46:
+		case 47:
+		case 48:
+		case 51:
+		case 53:
+		case 54:
+		case 56:
+		case 61:
+		case 62:
+		case 63:
+		case 64:
+		default:
+			break;
+		case 12:
+			this.set_volume(effect_param);
+			break;
+		case 16:
+			this.set_global_volume(effect_param);
+			break;
+		case 17:
+			this.set_volume_slide_param(effect_param);
+			break;
+		case 20:
+			if(effect_param == 0) {
+				this.key_on = false;
+			}
+			break;
+		case 21:
+			this.set_envelope_tick(effect_param);
+			break;
+		case 25:
+			this.set_volume_slide_param(effect_param);
+			break;
+		case 27:
+			this.set_retrig_param(effect_param);
+			this.retrig_volume_slide();
+			break;
+		case 29:
+			this.set_retrig_param(effect_param);
+			this.tremor();
+			break;
+		case 36:
+			this.set_vibrato_speed((effect_param & 240) >> 4);
+			this.set_vibrato_depth(effect_param & 15);
+			this.fine_vibrato();
+			break;
+		case 49:
+			this.set_portamento_param(240 | effect_param);
+			this.portamento_up();
+			break;
+		case 50:
+			this.set_portamento_param(240 | effect_param);
+			this.portamento_down();
+			break;
+		case 52:
+			this.set_vibrato_wave(effect_param);
+			break;
+		case 55:
+			this.set_tremolo_wave(effect_param);
+			break;
+		case 57:
+			this.set_retrig_param(effect_param);
+			break;
+		case 58:
+			this.set_volume_slide_param(effect_param << 4 | 15);
+			this.volume_slide();
+			break;
+		case 59:
+			this.set_volume_slide_param(240 | effect_param);
+			this.volume_slide();
+			break;
+		case 60:
+			if(effect_param == 0) {
+				this.set_volume(0);
+			}
+			break;
+		case 65:
+			this.set_portamento_param(224 | effect_param);
+			this.portamento_up();
+			break;
+		case 66:
+			this.set_portamento_param(224 | effect_param);
+			this.portamento_down();
+		}
+
+		this.calculate_amplitude();
+		this.calculate_frequency();
+	}
+
+	public void tick() {
+		int volume_column = this.current_note[2];
+		int effect = this.current_note[3];
+		int effect_param = this.current_note[4];
+		++this.effect_tick;
+		if(effect == 61 && effect_param == this.effect_tick) {
+			this.row(this.current_note[0], this.current_note[1], volume_column, 0, 0);
+		} else {
+			++this.trigger_tick;
+			++this.vibrato_tick;
+			++this.tremolo_tick;
+			this.update_envelopes();
+			this.key_add = 0;
+			this.vibrato_add = 0;
+			this.tremolo_add = 0;
+			if(this.instrument.vibrato_depth > 0) {
+				this.auto_vibrato();
+			}
+
+			switch(volume_column & 240) {
+			case 96:
+				this.set_volume(this.volume - (volume_column & 15));
+				break;
+			case 112:
+				this.set_volume(this.volume + (volume_column & 15));
+				break;
+			case 176:
+				this.vibrato();
+				break;
+			case 208:
+				this.set_panning(this.panning - (volume_column & 15));
+				break;
+			case 224:
+				this.set_panning(this.panning + (volume_column & 15));
+				break;
+			case 240:
+				this.tone_portamento();
+			}
+
+			switch(effect) {
+			case 1:
+				this.portamento_up();
+				break;
+			case 2:
+				this.portamento_down();
+				break;
+			case 3:
+				this.tone_portamento();
+				break;
+			case 4:
+				this.vibrato();
+				break;
+			case 5:
+				this.tone_portamento();
+				this.volume_slide();
+				break;
+			case 6:
+				this.vibrato();
+				this.volume_slide();
+				break;
+			case 7:
+				this.tremolo();
+			case 8:
+			case 9:
+			case 11:
+			case 12:
+			case 13:
+			case 14:
+			case 15:
+			case 16:
+			case 18:
+			case 19:
+			case 21:
+			case 22:
+			case 23:
+			case 24:
+			case 26:
+			case 28:
+			case 30:
+			case 31:
+			case 32:
+			case 33:
+			case 34:
+			case 35:
+			case 37:
+			case 38:
+			case 39:
+			case 40:
+			case 41:
+			case 42:
+			case 43:
+			case 44:
+			case 45:
+			case 46:
+			case 47:
+			case 48:
+			case 49:
+			case 50:
+			case 51:
+			case 52:
+			case 53:
+			case 54:
+			case 55:
+			case 56:
+			case 58:
+			case 59:
+			case 61:
+			case 62:
+			case 63:
+			default:
+				break;
+			case 10:
+				this.volume_slide();
+				break;
+			case 17:
+				this.global_volume_slide();
+				break;
+			case 20:
+				if(this.effect_tick == effect_param) {
+					this.key_on = false;
+				}
+				break;
+			case 25:
+				this.panning_slide();
+				break;
+			case 27:
+				this.retrig_volume_slide();
+				break;
+			case 29:
+				this.tremor();
+				break;
+			case 36:
+				this.fine_vibrato();
+				break;
+			case 57:
+				this.retrig_volume_slide();
+				break;
+			case 60:
+				if(this.effect_tick == effect_param) {
+					this.set_volume(0);
+				}
+				break;
+			case 64:
+				switch(this.effect_tick % 3) {
+				case 1:
+					this.key_add = (effect_param & 240) >> 4;
+					break;
+				case 2:
+					this.key_add = effect_param & 15;
+				}
+			}
+		}
+
+		this.calculate_amplitude();
+		this.calculate_frequency();
+	}
+
+	private void set_vibrato_speed(int speed) {
+		if(speed > 0) {
+			this.vibrato_speed = speed;
+		}
+
+	}
+
+	private void set_vibrato_depth(int depth) {
+		if(depth > 0) {
+			this.vibrato_depth = depth;
+		}
+
+	}
+
+	private void set_vibrato_wave(int wave) {
+		if(wave < 0 || wave > 7) {
+			wave = 0;
+		}
+
+		this.vibrato_wave = wave;
+	}
+
+	private void set_tremolo_speed(int speed) {
+		if(speed > 0) {
+			this.tremolo_speed = speed;
+		}
+
+	}
+
+	private void set_tremolo_depth(int depth) {
+		if(depth > 0) {
+			this.tremolo_depth = depth;
+		}
+
+	}
+
+	private void set_tremolo_wave(int wave) {
+		if(wave < 0 || wave > 7) {
+			wave = 0;
+		}
+
+		this.tremolo_wave = wave;
+	}
+
+	private void vibrato() {
+		int vibrato_phase = this.vibrato_tick * this.vibrato_speed;
+		this.vibrato_add += this.waveform(vibrato_phase, this.vibrato_wave) * this.vibrato_depth >> 5;
+	}
+
+	private void fine_vibrato() {
+		int vibrato_phase = this.vibrato_tick * this.vibrato_speed;
+		this.vibrato_add += this.waveform(vibrato_phase, this.vibrato_wave) * this.vibrato_depth >> 7;
+	}
+
+	private void tremolo() {
+		int tremolo_phase = this.tremolo_tick * this.tremolo_speed;
+		this.tremolo_add += this.waveform(tremolo_phase, this.tremolo_wave) * this.tremolo_depth >> 6;
+	}
+
+	private void set_portamento_param(int param) {
+		if(param != 0) {
+			this.portamento_param = param;
+		}
+
+	}
+
+	private void tone_portamento() {
+		int new_period;
+		if(this.porta_period < this.period) {
+			new_period = this.period - (this.portamento_param << 2);
+			if(new_period < this.porta_period) {
+				new_period = this.porta_period;
+			}
+
+			this.set_period(new_period);
+		}
+
+		if(this.porta_period > this.period) {
+			new_period = this.period + (this.portamento_param << 2);
+			if(new_period > this.porta_period) {
+				new_period = this.porta_period;
+			}
+
+			this.set_period(new_period);
+		}
+
+	}
+
+	private void portamento_up() {
+		if((this.portamento_param & 240) == 224) {
+			if(this.effect_tick == 0) {
+				this.set_period(this.period - (this.portamento_param & 15));
+			}
+		} else if((this.portamento_param & 240) == 240) {
+			if(this.effect_tick == 0) {
+				this.set_period(this.period - ((this.portamento_param & 15) << 2));
+			}
+		} else if(this.effect_tick > 0) {
+			this.set_period(this.period - (this.portamento_param << 2));
+		}
+
+	}
+
+	private void portamento_down() {
+		if((this.portamento_param & 240) == 224) {
+			if(this.effect_tick == 0) {
+				this.set_period(this.period + (this.portamento_param & 15));
+			}
+		} else if((this.portamento_param & 240) == 240) {
+			if(this.effect_tick == 0) {
+				this.set_period(this.period + ((this.portamento_param & 15) << 2));
+			}
+		} else if(this.effect_tick > 0) {
+			this.set_period(this.period + (this.portamento_param << 2));
+		}
+
+	}
+
+	private void set_period(int p) {
+		if(p < 32) {
+			p = 32;
+		}
+
+		if(p > -Short.MIN_VALUE) {
+			p = -Short.MIN_VALUE;
+		}
+
+		this.period = p;
+	}
+
+	private void set_global_volume(int vol) {
+		if(vol < 0) {
+			vol = 0;
+		}
+
+		if(vol > 64) {
+			vol = 64;
+		}
+
+		this.global_volume[0] = vol;
+	}
+
+	private void set_volume_slide_param(int param) {
+		if(param != 0) {
+			this.volume_slide_param = param;
+		}
+
+	}
+
+	private void global_volume_slide() {
+		int up = (this.volume_slide_param & 240) >> 4;
+		int down = this.volume_slide_param & 15;
+		this.set_global_volume(this.global_volume[0] + up - down);
+	}
+
+	private void volume_slide() {
+		int up = (this.volume_slide_param & 240) >> 4;
+		int down = this.volume_slide_param & 15;
+		if(down == 15 && up > 0) {
+			if(this.effect_tick == 0) {
+				this.set_volume(this.volume + up);
+			}
+		} else if(up == 15 && down > 0) {
+			if(this.effect_tick == 0) {
+				this.set_volume(this.volume - down);
+			}
+		} else if(this.effect_tick > 0 || this.fast_volume_slides) {
+			this.set_volume(this.volume + up - down);
+		}
+
+	}
+
+	private void panning_slide() {
+		int left = (this.volume_slide_param & 240) >> 4;
+		int right = this.volume_slide_param & 15;
+		this.set_panning(this.panning - left + right);
+	}
+
+	private void set_retrig_param(int param) {
+		if(param != 0) {
+			this.retrig_param = param;
+		}
+
+	}
+
+	private void tremor() {
+		int on_ticks = ((this.retrig_param & 240) >> 4) + 1;
+		int cycle_length = on_ticks + (this.retrig_param & 15) + 1;
+		int cycle_index = this.trigger_tick % cycle_length;
+		if(cycle_index >= on_ticks) {
+			this.tremolo_add = -64;
+		}
+
+	}
+
+	private void retrig_volume_slide() {
+		int retrig_volume = (this.retrig_param & 240) >> 4;
+		int retrig_tick = this.retrig_param & 15;
+		if(retrig_tick > 0 && this.trigger_tick % retrig_tick == 0) {
+			this.set_sample_index(0);
+			switch(retrig_volume) {
+			case 1:
+				this.set_volume(this.volume - 1);
+				break;
+			case 2:
+				this.set_volume(this.volume - 2);
+				break;
+			case 3:
+				this.set_volume(this.volume - 4);
+				break;
+			case 4:
+				this.set_volume(this.volume - 8);
+				break;
+			case 5:
+				this.set_volume(this.volume - 16);
+				break;
+			case 6:
+				this.set_volume(this.volume - this.volume / 3);
+				break;
+			case 7:
+				this.set_volume(this.volume / 2);
+			case 8:
+			default:
+				break;
+			case 9:
+				this.set_volume(this.volume + 1);
+				break;
+			case 10:
+				this.set_volume(this.volume + 2);
+				break;
+			case 11:
+				this.set_volume(this.volume + 4);
+				break;
+			case 12:
+				this.set_volume(this.volume + 8);
+				break;
+			case 13:
+				this.set_volume(this.volume + 16);
+				break;
+			case 14:
+				this.set_volume(this.volume + this.volume / 2);
+				break;
+			case 15:
+				this.set_volume(this.volume * 2);
+			}
+		}
+
+	}
+
+	private void set_sample_index(int index) {
+		if(index < 0) {
+			index = 0;
+		}
+
+		this.sample_idx = index;
+		this.sample_frac = 0;
+	}
+
+	private void set_envelope_tick(int tick) {
+		this.volume_envelope_tick = tick;
+		this.panning_envelope_tick = tick;
+	}
+
+	private void trigger(int key, int instrument_idx, int volume_column, int effect) {
+		if(instrument_idx > 0) {
+			this.instrument = this.module.get_instrument(instrument_idx);
+			this.sample = this.instrument.get_sample_from_key(key);
+			this.set_volume(this.sample.volume);
+			if(this.sample.set_panning) {
+				this.set_panning(this.sample.panning);
+			}
+
+			this.set_envelope_tick(0);
+			this.fade_out_volume = -Short.MIN_VALUE;
+			this.key_on = true;
+		}
+
+		if(key > 0) {
+			if(key < 97) {
+				this.porta_period = this.key_to_period(key);
+				if(effect != 3 && effect != 5 && (volume_column & 240) != 240) {
+					this.trigger_tick = 0;
+					if(this.vibrato_wave < 4) {
+						this.vibrato_tick = 0;
+					}
+
+					if(this.tremolo_wave < 4) {
+						this.tremolo_tick = 0;
+					}
+
+					this.set_period(this.porta_period);
+					this.set_sample_index(0);
+				}
+			} else {
+				this.key_on = false;
+			}
+		}
+
+	}
+
+	private void update_envelopes() {
+		Envelope envelope;
+		if(this.instrument.volume_envelope_active) {
+			if(!this.key_on) {
+				this.fade_out_volume -= this.instrument.volume_fade_out & '\uffff';
+				if(this.fade_out_volume < 0) {
+					this.fade_out_volume = 0;
+				}
+			}
+
+			envelope = this.instrument.get_volume_envelope();
+			this.volume_envelope_tick = envelope.next_tick(this.volume_envelope_tick, this.key_on);
+		}
+
+		if(this.instrument.panning_envelope_active) {
+			envelope = this.instrument.get_panning_envelope();
+			this.panning_envelope_tick = envelope.next_tick(this.panning_envelope_tick, this.key_on);
+		}
+
+	}
+
+	private void auto_vibrato() {
+		int sweep = this.instrument.vibrato_sweep & 255;
+		int depth = this.instrument.vibrato_depth & 15;
+		int rate = this.instrument.vibrato_rate & 63;
+		if(this.trigger_tick < sweep) {
+			depth = depth * this.trigger_tick / sweep;
+		}
+
+		this.vibrato_add += this.waveform(this.trigger_tick * rate, 0) * depth >> 9;
+	}
+
+	private int waveform(int phase, int wform) {
+		int amplitude = 0;
+		switch(wform & 3) {
+		case 0:
+			if((phase & 32) == 0) {
+				amplitude = sine_table[phase & 31];
+			} else {
+				amplitude = -sine_table[phase & 31];
+			}
+			break;
+		case 1:
+			if((phase & 32) == 0) {
+				amplitude = (phase & 31) << 3;
+			} else {
+				amplitude = ((phase & 31) << 3) - 255;
+			}
+			break;
+		case 2:
+			if((phase & 32) == 0) {
+				amplitude = 255;
+			} else {
+				amplitude = -255;
+			}
+			break;
+		case 3:
+			amplitude = (this.random_seed >> 15) - 255;
+			this.random_seed = this.random_seed * 65 + 17 & 16777215;
+		}
+
+		return amplitude;
+	}
+
+	private int key_to_period(int key) {
+		int octave = (key << 15) / 12 + this.sample.transpose;
+		int period_out;
+		if(this.linear_periods) {
+			period_out = 7744 - (octave * 768 >> 15);
+		} else {
+			int log_2_period = LOG_2_29024 - octave;
+			period_out = LogTable.raise_2(log_2_period);
+			period_out >>= 14;
+			period_out = (period_out >> 1) + (period_out & 1);
+		}
+
+		return period_out;
+	}
+
+	private void calculate_amplitude() {
+		int envelope_volume = 0;
+		Envelope envelope;
+		if(this.instrument.volume_envelope_active) {
+			envelope = this.instrument.get_volume_envelope();
+			envelope_volume = envelope.calculate_ampl(this.volume_envelope_tick);
+		} else if(this.key_on) {
+			envelope_volume = 64;
+		}
+
+		int tremolo_volume = this.volume + this.tremolo_add;
+		if(tremolo_volume < 0) {
+			tremolo_volume = 0;
+		}
+
+		if(tremolo_volume > 64) {
+			tremolo_volume = 64;
+		}
+
+		int amplitude = tremolo_volume << 9;
+		amplitude = amplitude * envelope_volume >> 6;
+		amplitude = amplitude * this.fade_out_volume >> 15;
+		amplitude = amplitude * this.global_volume[0] >> 6;
+		amplitude = amplitude * this.module.channel_gain >> 15;
+		this.silent = this.sample.has_finished(this.sample_idx);
+		if(amplitude <= 0) {
+			this.silent = true;
+		} else {
+			int envelope_panning = 32;
+			if(this.instrument.panning_envelope_active) {
+				envelope = this.instrument.get_panning_envelope();
+				envelope_panning = envelope.calculate_ampl(this.panning_envelope_tick);
+			}
+
+			int mixer_panning = (this.panning & 255) << 7;
+			int panning_range = -Short.MIN_VALUE - mixer_panning;
+			if(panning_range > mixer_panning) {
+				panning_range = mixer_panning;
+			}
+
+			mixer_panning += panning_range * (envelope_panning - 32) >> 5;
+			this.left_gain = amplitude * (-Short.MIN_VALUE - mixer_panning) >> 15;
+			this.right_gain = amplitude * mixer_panning >> 15;
+		}
+
+	}
+
+	private void calculate_frequency() {
+		int vibrato_period = this.period + this.vibrato_add;
+		if(vibrato_period < 32) {
+			vibrato_period = 32;
+		}
+
+		if(vibrato_period > -Short.MIN_VALUE) {
+			vibrato_period = -Short.MIN_VALUE;
+		}
+
+		int log_2_freq;
+		if(this.linear_periods) {
+			log_2_freq = LOG_2_8363 + (4608 - vibrato_period << 15) / 768;
+		} else {
+			log_2_freq = this.module.pal ? LOG_2_8287 : LOG_2_8363;
+			log_2_freq = log_2_freq + LOG_2_1712 - LogTable.log_2(vibrato_period);
+		}
+
+		log_2_freq += (this.key_add << 15) / 12;
+		this.step = LogTable.raise_2(log_2_freq - this.log_2_sampling_rate);
+	}
+}
--- net/minecraft/src/BlockIce.java
+++ net/minecraft/src/BlockIce.java
@@ -3,6 +3,8 @@
 import java.util.Random;
 
 public class BlockIce extends BlockBreakable {
+	public static boolean meltsTowater = true;
+	
 	public BlockIce(int var1, int var2) {
 		super(var1, var2, Material.ice, false);
 		this.slipperiness = 0.98F;
@@ -19,10 +21,17 @@
 
 	public void onBlockRemoval(World var1, int var2, int var3, int var4) {
 		Material var5 = var1.getBlockMaterial(var2, var3 - 1, var4);
-		if(var5.func_880_c() || var5.getIsLiquid()) {
-			var1.setBlockWithNotify(var2, var3, var4, Block.waterStill.blockID);
+		if(var1.isNether()){
+			var1.playSoundEffect(var2 + 0.5D, var3 + 0.5D, var4 + 0.5D, "random.fizz", 0.5F, 2.6F + (var1.rand.nextFloat() - var1.rand.nextFloat()) * 0.8F);
+
+			for(int var28 = 0; var28 < 8; ++var28) {
+				var1.spawnParticle("largesmoke", (double)var2 + Math.random(), (double)var3 + Math.random(), (double)var4 + Math.random(), 0.0D, 0.0D, 0.0D);
+			}
+		} else {
+			if(meltsTowater && (var5.func_880_c() || var5.getIsLiquid())) {
+				var1.setBlockWithNotify(var2, var3, var4, Block.waterStill.blockID);
+			}
 		}
-
 	}
 
 	public int quantityDropped(Random var1) {
--- /dev/null
+++ ibxm/Sample.java
@@ -1,0 +1,230 @@
+package ibxm;
+
+public class Sample {
+	public String name = "";
+	public boolean set_panning;
+	public int volume;
+	public int panning;
+	public int transpose;
+	private int loop_start;
+	private int loop_length;
+	private short[] sample_data;
+	private static final int POINT_SHIFT = 4;
+	private static final int POINTS = 16;
+	private static final int OVERLAP = 8;
+	private static final int INTERP_SHIFT = 11;
+	private static final int INTERP_BITMASK = 2047;
+	private static final short[] sinc_table = new short[]{(short)0, (short)-7, (short)27, (short)-71, (short)142, (short)-227, (short)299, (short)32439, (short)299, (short)-227, (short)142, (short)-71, (short)27, (short)-7, (short)0, (short)0, (short)0, (short)0, (short)-5, (short)36, (short)-142, (short)450, (short)-1439, (short)32224, (short)2302, (short)-974, (short)455, (short)-190, (short)64, (short)-15, (short)2, (short)0, (short)0, (short)6, (short)-33, (short)128, (short)-391, (short)1042, (short)-2894, (short)31584, (short)4540, (short)-1765, (short)786, (short)-318, (short)105, (short)-25, (short)3, (short)0, (short)0, (short)10, (short)-55, (short)204, (short)-597, (short)1533, (short)-4056, (short)30535, (short)6977, (short)-2573, (short)1121, (short)-449, (short)148, (short)-36, (short)5, (short)0, (short)-1, (short)13, (short)-71, (short)261, (short)-757, (short)1916, (short)-4922, (short)29105, (short)9568, (short)-3366, (short)1448, (short)-578, (short)191, (short)-47, (short)7, (short)0, (short)-1, (short)15, (short)-81, (short)300, (short)-870, (short)2185, (short)-5498, (short)27328, (short)12263, (short)-4109, (short)1749, (short)-698, (short)232, (short)-58, (short)9, (short)0, (short)-1, (short)15, (short)-86, (short)322, (short)-936, (short)2343, (short)-5800, (short)25249, (short)15006, (short)-4765, (short)2011, (short)-802, (short)269, (short)-68, (short)10, (short)0, (short)-1, (short)15, (short)-87, (short)328, (short)-957, (short)2394, (short)-5849, (short)22920, (short)17738, (short)-5298, (short)2215, (short)-885, (short)299, (short)-77, (short)12, (short)0, (short)0, (short)14, (short)-83, (short)319, (short)-938, (short)2347, (short)-5671, (short)20396, (short)20396, (short)-5671, (short)2347, (short)-938, (short)319, (short)-83, (short)14, (short)0, (short)0, (short)12, (short)-77, (short)299, (short)-885, (short)2215, (short)-5298, (short)17738, (short)22920, (short)-5849, (short)2394, (short)-957, (short)328, (short)-87, (short)15, (short)-1, (short)0, (short)10, (short)-68, (short)269, (short)-802, (short)2011, (short)-4765, (short)15006, (short)25249, (short)-5800, (short)2343, (short)-936, (short)322, (short)-86, (short)15, (short)-1, (short)0, (short)9, (short)-58, (short)232, (short)-698, (short)1749, (short)-4109, (short)12263, (short)27328, (short)-5498, (short)2185, (short)-870, (short)300, (short)-81, (short)15, (short)-1, (short)0, (short)7, (short)-47, (short)191, (short)-578, (short)1448, (short)-3366, (short)9568, (short)29105, (short)-4922, (short)1916, (short)-757, (short)261, (short)-71, (short)13, (short)-1, (short)0, (short)5, (short)-36, (short)148, (short)-449, (short)1121, (short)-2573, (short)6977, (short)30535, (short)-4056, (short)1533, (short)-597, (short)204, (short)-55, (short)10, (short)0, (short)0, (short)3, (short)-25, (short)105, (short)-318, (short)786, (short)-1765, (short)4540, (short)31584, (short)-2894, (short)1042, (short)-391, (short)128, (short)-33, (short)6, (short)0, (short)0, (short)2, (short)-15, (short)64, (short)-190, (short)455, (short)-974, (short)2302, (short)32224, (short)-1439, (short)450, (short)-142, (short)36, (short)-5, (short)0, (short)0, (short)0, (short)0, (short)-7, (short)27, (short)-71, (short)142, (short)-227, (short)299, (short)32439, (short)299, (short)-227, (short)142, (short)-71, (short)27, (short)-7, (short)0};
+
+	public Sample() {
+		this.set_sample_data(new short[0], 0, 0, false);
+	}
+
+	public void set_sample_data(short[] data, int loop_start, int loop_length, boolean ping_pong) {
+		if(loop_start < 0) {
+			loop_start = 0;
+		}
+
+		if(loop_start >= data.length) {
+			loop_start = data.length - 1;
+		}
+
+		if(loop_start + loop_length > data.length) {
+			loop_length = data.length - loop_start;
+		}
+
+		int offset;
+		short sample;
+		if(loop_length <= 1) {
+			this.sample_data = new short[8 + data.length + 24];
+			System.arraycopy(data, 0, this.sample_data, 8, data.length);
+
+			for(offset = 0; offset < 8; ++offset) {
+				sample = this.sample_data[8 + data.length - 1];
+				sample = (short)(sample * (8 - offset) / 8);
+				this.sample_data[8 + data.length + offset] = sample;
+			}
+
+			loop_start = 8 + data.length + 8;
+			loop_length = 1;
+		} else {
+			if(!ping_pong) {
+				this.sample_data = new short[8 + loop_start + loop_length + 16];
+				System.arraycopy(data, 0, this.sample_data, 8, loop_start + loop_length);
+				loop_start += 8;
+			} else {
+				this.sample_data = new short[8 + loop_start + loop_length * 2 + 16];
+				System.arraycopy(data, 0, this.sample_data, 8, loop_start + loop_length);
+
+				for(offset = 0; offset < loop_length; ++offset) {
+					sample = data[loop_start + loop_length - offset - 1];
+					this.sample_data[8 + loop_start + loop_length + offset] = sample;
+				}
+
+				loop_start += 8;
+				loop_length *= 2;
+			}
+
+			for(offset = 0; offset < 16; ++offset) {
+				sample = this.sample_data[loop_start + offset];
+				this.sample_data[loop_start + loop_length + offset] = sample;
+			}
+		}
+
+		this.loop_start = loop_start;
+		this.loop_length = loop_length;
+	}
+
+	public void resample_nearest(int sample_idx, int sample_frac, int step, int left_gain, int right_gain, int[] mix_buffer, int frame_offset, int frames) {
+		sample_idx += 8;
+		int loop_end = this.loop_start + this.loop_length - 1;
+		int offset = frame_offset << 1;
+
+		for(int end = frame_offset + frames - 1 << 1; frames > 0; frames = end - offset + 2 >> 1) {
+			if(sample_idx > loop_end) {
+				if(this.loop_length <= 1) {
+					break;
+				}
+
+				sample_idx = this.loop_start + (sample_idx - this.loop_start) % this.loop_length;
+			}
+
+			int max_sample_idx = sample_idx + (sample_frac + (frames - 1) * step >> 15);
+			int var10001;
+			if(max_sample_idx > loop_end) {
+				while(sample_idx <= loop_end) {
+					var10001 = offset++;
+					mix_buffer[var10001] += this.sample_data[sample_idx] * left_gain >> 15;
+					var10001 = offset++;
+					mix_buffer[var10001] += this.sample_data[sample_idx] * right_gain >> 15;
+					sample_frac += step;
+					sample_idx += sample_frac >> 15;
+					sample_frac &= Short.MAX_VALUE;
+				}
+			} else {
+				while(offset <= end) {
+					var10001 = offset++;
+					mix_buffer[var10001] += this.sample_data[sample_idx] * left_gain >> 15;
+					var10001 = offset++;
+					mix_buffer[var10001] += this.sample_data[sample_idx] * right_gain >> 15;
+					sample_frac += step;
+					sample_idx += sample_frac >> 15;
+					sample_frac &= Short.MAX_VALUE;
+				}
+			}
+		}
+
+	}
+
+	public void resample_linear(int sample_idx, int sample_frac, int step, int left_gain, int right_gain, int[] mix_buffer, int frame_offset, int frames) {
+		sample_idx += 8;
+		int loop_end = this.loop_start + this.loop_length - 1;
+		int offset = frame_offset << 1;
+
+		for(int end = frame_offset + frames - 1 << 1; frames > 0; frames = end - offset + 2 >> 1) {
+			if(sample_idx > loop_end) {
+				if(this.loop_length <= 1) {
+					break;
+				}
+
+				sample_idx = this.loop_start + (sample_idx - this.loop_start) % this.loop_length;
+			}
+
+			int max_sample_idx = sample_idx + (sample_frac + (frames - 1) * step >> 15);
+			short amplitude;
+			int var14;
+			int var10001;
+			if(max_sample_idx > loop_end) {
+				while(sample_idx <= loop_end) {
+					amplitude = this.sample_data[sample_idx];
+					var14 = amplitude + ((this.sample_data[sample_idx + 1] - amplitude) * sample_frac >> 15);
+					var10001 = offset++;
+					mix_buffer[var10001] += var14 * left_gain >> 15;
+					var10001 = offset++;
+					mix_buffer[var10001] += var14 * right_gain >> 15;
+					sample_frac += step;
+					sample_idx += sample_frac >> 15;
+					sample_frac &= Short.MAX_VALUE;
+				}
+			} else {
+				while(offset <= end) {
+					amplitude = this.sample_data[sample_idx];
+					var14 = amplitude + ((this.sample_data[sample_idx + 1] - amplitude) * sample_frac >> 15);
+					var10001 = offset++;
+					mix_buffer[var10001] += var14 * left_gain >> 15;
+					var10001 = offset++;
+					mix_buffer[var10001] += var14 * right_gain >> 15;
+					sample_frac += step;
+					sample_idx += sample_frac >> 15;
+					sample_frac &= Short.MAX_VALUE;
+				}
+			}
+		}
+
+	}
+
+	public void resample_sinc(int sample_idx, int sample_frac, int step, int left_gain, int right_gain, int[] mix_buffer, int frame_offset, int frames) {
+		int loop_end = this.loop_start + this.loop_length - 1;
+		int offset = frame_offset << 1;
+
+		for(int end = frame_offset + frames - 1 << 1; offset <= end; sample_frac &= Short.MAX_VALUE) {
+			if(sample_idx > loop_end) {
+				if(this.loop_length <= 1) {
+					break;
+				}
+
+				sample_idx = this.loop_start + (sample_idx - this.loop_start) % this.loop_length;
+			}
+
+			int table_idx = sample_frac >> 11 << 4;
+			int a1 = sinc_table[table_idx + 0] * this.sample_data[sample_idx + 0] >> 15;
+			a1 += sinc_table[table_idx + 1] * this.sample_data[sample_idx + 1] >> 15;
+			a1 += sinc_table[table_idx + 2] * this.sample_data[sample_idx + 2] >> 15;
+			a1 += sinc_table[table_idx + 3] * this.sample_data[sample_idx + 3] >> 15;
+			a1 += sinc_table[table_idx + 4] * this.sample_data[sample_idx + 4] >> 15;
+			a1 += sinc_table[table_idx + 5] * this.sample_data[sample_idx + 5] >> 15;
+			a1 += sinc_table[table_idx + 6] * this.sample_data[sample_idx + 6] >> 15;
+			a1 += sinc_table[table_idx + 7] * this.sample_data[sample_idx + 7] >> 15;
+			a1 += sinc_table[table_idx + 8] * this.sample_data[sample_idx + 8] >> 15;
+			a1 += sinc_table[table_idx + 9] * this.sample_data[sample_idx + 9] >> 15;
+			a1 += sinc_table[table_idx + 10] * this.sample_data[sample_idx + 10] >> 15;
+			a1 += sinc_table[table_idx + 11] * this.sample_data[sample_idx + 11] >> 15;
+			a1 += sinc_table[table_idx + 12] * this.sample_data[sample_idx + 12] >> 15;
+			a1 += sinc_table[table_idx + 13] * this.sample_data[sample_idx + 13] >> 15;
+			a1 += sinc_table[table_idx + 14] * this.sample_data[sample_idx + 14] >> 15;
+			a1 += sinc_table[table_idx + 15] * this.sample_data[sample_idx + 15] >> 15;
+			int a2 = sinc_table[table_idx + 16] * this.sample_data[sample_idx + 0] >> 15;
+			a2 += sinc_table[table_idx + 17] * this.sample_data[sample_idx + 1] >> 15;
+			a2 += sinc_table[table_idx + 18] * this.sample_data[sample_idx + 2] >> 15;
+			a2 += sinc_table[table_idx + 19] * this.sample_data[sample_idx + 3] >> 15;
+			a2 += sinc_table[table_idx + 20] * this.sample_data[sample_idx + 4] >> 15;
+			a2 += sinc_table[table_idx + 21] * this.sample_data[sample_idx + 5] >> 15;
+			a2 += sinc_table[table_idx + 22] * this.sample_data[sample_idx + 6] >> 15;
+			a2 += sinc_table[table_idx + 23] * this.sample_data[sample_idx + 7] >> 15;
+			a2 += sinc_table[table_idx + 24] * this.sample_data[sample_idx + 8] >> 15;
+			a2 += sinc_table[table_idx + 25] * this.sample_data[sample_idx + 9] >> 15;
+			a2 += sinc_table[table_idx + 26] * this.sample_data[sample_idx + 10] >> 15;
+			a2 += sinc_table[table_idx + 27] * this.sample_data[sample_idx + 11] >> 15;
+			a2 += sinc_table[table_idx + 28] * this.sample_data[sample_idx + 12] >> 15;
+			a2 += sinc_table[table_idx + 29] * this.sample_data[sample_idx + 13] >> 15;
+			a2 += sinc_table[table_idx + 30] * this.sample_data[sample_idx + 14] >> 15;
+			a2 += sinc_table[table_idx + 31] * this.sample_data[sample_idx + 15] >> 15;
+			int amplitude = a1 + ((a2 - a1) * (sample_frac & 2047) >> 11);
+			mix_buffer[offset] += amplitude * left_gain >> 15;
+			mix_buffer[offset + 1] += amplitude * right_gain >> 15;
+			offset += 2;
+			sample_frac += step;
+			sample_idx += sample_frac >> 15;
+		}
+
+	}
+
+	public boolean has_finished(int sample_idx) {
+		boolean finished = false;
+		if(this.loop_length <= 1 && sample_idx > this.loop_start) {
+			finished = true;
+		}
+
+		return finished;
+	}
+}
--- /dev/null
+++ net/minecraft/src/EntitySlimeFire.java
@@ -1,0 +1,138 @@
+package net.minecraft.src;
+
+public class EntitySlimeFire extends EntityMobs {
+	public float field_768_a;
+	public float field_767_b;
+	private int field_769_d = 0;
+	public int field_770_c = 1; //Size
+
+	public EntitySlimeFire(World var1) {
+		super(var1);
+		this.texture = "/mob/slimefire.png";
+		this.field_770_c = 1 << this.rand.nextInt(4); //Random gives 0-3 and bitwise operator << duplicates 1 random times. so possible values ar 1, 2, 4 or 8
+		this.yOffset = 0.0F;
+		this.field_769_d = this.rand.nextInt(20) + 10;
+		this.func_441_c(this.field_770_c);
+	}
+
+	public void func_441_c(int var1) { //Initializes values
+		this.field_770_c = var1;
+		this.setSize(0.6F * (float)var1, 0.6F * (float)var1);
+		this.health = var1 * var1;
+		this.setPosition(this.posX, this.posY, this.posZ);
+		this.isImmuneToFire = true;
+		//this.field_762_e = var1 * 2; //Damage?
+	}
+
+	public void writeEntityToNBT(NBTTagCompound var1) {
+		super.writeEntityToNBT(var1);
+		var1.setInteger("Size", this.field_770_c - 1);
+	}
+
+	public void readEntityFromNBT(NBTTagCompound var1) {
+		super.readEntityFromNBT(var1);
+		this.field_770_c = var1.getInteger("Size") + 1;
+	}
+	public void onUpdate() {
+
+		this.field_767_b = this.field_768_a;
+		boolean var1 = this.onGround;
+		super.onUpdate();
+		if(this.worldObj.difficultySetting == 0) {
+			this.setEntityDead();
+		}
+		if(this.onGround && !var1) {
+			for(int var2 = 0; var2 < this.field_770_c * 8; ++var2) {
+				float var3 = this.rand.nextFloat() * (float)Math.PI * 2.0F;
+				float var4 = this.rand.nextFloat() * 0.5F + 0.5F;
+				float var5 = MathHelper.sin(var3) * (float)this.field_770_c * 0.5F * var4;
+				float var6 = MathHelper.cos(var3) * (float)this.field_770_c * 0.5F * var4;
+				this.worldObj.spawnParticle("slimefire", this.posX + (double)var5, this.boundingBox.minY, this.posZ + (double)var6, 0.0D, 0.0D, 0.0D);
+			}
+
+			if(this.field_770_c > 2) {
+				this.worldObj.playSoundAtEntity(this, "mob.slime", this.getSoundVolume(), ((this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F) / 0.8F);
+			}
+
+			this.field_768_a = -0.5F;
+		}
+
+		this.field_768_a *= 0.6F;
+	}
+
+	protected void func_418_b_() {
+		EntityPlayer var1 = this.worldObj.getClosestPlayerToEntity(this, 16.0D);
+		if(var1 != null) {
+			this.faceEntity(var1, 10.0F);
+		}
+
+		if(this.onGround && this.field_769_d-- <= 0) {
+			this.field_769_d = this.rand.nextInt(20) + 10;
+			if(var1 != null) {
+				this.field_769_d /= 3;
+			}
+
+			this.isJumping = true;
+			if(this.field_770_c > 1) {
+				this.worldObj.playSoundAtEntity(this, "mob.slime", this.getSoundVolume(), ((this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F) * 0.8F);
+			}
+
+			this.field_768_a = 1.0F;
+			this.field_9342_ah = 1.0F - this.rand.nextFloat() * 2.0F;
+			this.field_9340_ai = (float)(1 * this.field_770_c);
+		} else {
+			this.isJumping = false;
+			if(this.onGround) {
+				this.field_9342_ah = this.field_9340_ai = 0.0F;
+			}
+		}
+
+	}
+
+	public void setEntityDead() {
+		if(this.field_770_c > 1 && this.health < 1) {
+			for(int var1 = 0; var1 < 4; ++var1) {
+				float var2 = ((float)(var1 % 2) - 0.5F) * (float)this.field_770_c / 4.0F;
+				float var3 = ((float)(var1 / 2) - 0.5F) * (float)this.field_770_c / 4.0F;
+				EntitySlimeFire var4 = new EntitySlimeFire(this.worldObj);
+				var4.func_441_c(this.field_770_c / 2);
+				var4.setLocationAndAngles(this.posX + (double)var2, this.posY + 0.5D, this.posZ + (double)var3, this.rand.nextFloat() * 360.0F, 0.0F);
+				this.worldObj.entityJoinedWorld(var4);
+			}
+		}
+
+		super.setEntityDead();
+	}
+
+	public void onCollideWithPlayer(EntityPlayer var1) {
+		if(this.canEntityBeSeen(var1) && (double)this.getDistanceToEntity(var1) < 0.6D * (double)this.field_770_c && var1.canAttackEntity(this, (field_770_c != 8) ? field_770_c : 6)) {
+			this.worldObj.playSoundAtEntity(this, "mob.slimeattack", 1.0F, (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F);
+		}
+
+	}
+
+	protected String getHurtSound() {
+		return "mob.slime";
+	}
+
+	protected String getDeathSound() {
+		return "mob.slime";
+	}
+
+	protected int getDropItemId() {
+		return this.field_770_c == 1 ? Item.fireSlimeBall.shiftedIndex : 0;
+	}
+
+	/* public boolean getCanSpawnHere() {
+		Chunk var1 = this.worldObj.getChunkFromBlockCoords(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posZ));
+		return (this.field_770_c == 1 || this.worldObj.difficultySetting > 0) && this.rand.nextInt(5) == 0 && var1.func_997_a(987234911L).nextInt(10) == 0 && this.posY < 24.0D;
+	} */
+
+	protected float getSoundVolume() {
+		return 0.6F;
+	}
+	
+	public boolean getCanSpawnHere() {
+		return super.getCanSpawnHere() && this.rand.nextInt(6) == 0;
+	}
+}
--- /dev/null
+++ net/minecraft/src/GuiTextBox.java
@@ -1,0 +1,122 @@
+package net.minecraft.src;
+
+import net.minecraft.client.Minecraft;
+import org.lwjgl.opengl.GL11;
+
+public class GuiTextBox extends Gui {
+	protected int width;
+	protected int height;
+	public int xPosition;
+	public int yPosition;
+	public String displayString;
+	private int tick;
+
+	protected GuiTextBox(int width, int height, int x, int y, String var6) {
+		this.width = width;
+		this.height = height;
+		this.xPosition = x;
+		this.yPosition = y;
+		this.displayString = var6;
+	}
+	
+	protected GuiTextBox(int x, int y, String var6) {
+		this.width = 200;
+		this.height = 20;
+		this.xPosition = x;
+		this.yPosition = y;
+		this.displayString = var6;
+	}
+	
+	public void countTick(){
+		this.tick++;
+	}
+
+	public void drawTextBox(Minecraft var1) {
+		FontRenderer f = var1.fontRenderer;
+		int var4 = this.xPosition;
+		int var5 = this.yPosition;
+		int var6 = this.width;
+		int var7 = this.height;
+		this.drawRect(this.xPosition - 1, this.yPosition - 1, this.xPosition + this.width + 1, this.yPosition + this.height + 1, -6250336);
+		this.drawRect(this.xPosition, this.yPosition, this.xPosition + this.width, this.yPosition + this.height, -16777216);
+		this.drawString(f, this.displayString + (this.tick / 6 % 2 == 0 ? "_" : ""), this.xPosition + 4, this.yPosition + (this.height - 8) / 2, 14737632);
+	}
+	
+	public void handleKeyType(char var1, int var2){
+		if(var1 == 22) {
+			String var3 = GuiScreen.getClipboardString();
+			if(var3 == null) {
+				var3 = "";
+			}
+
+			int var4 = 32 - this.displayString.length();
+			if(var4 > var3.length()) {
+				var4 = var3.length();
+			}
+
+			if(var4 > 0) {
+				this.displayString = this.displayString + var3.substring(0, var4);
+			}
+		}
+
+		if(var2 == 14 && this.displayString.length() > 0) {
+			this.displayString = this.displayString.substring(0, this.displayString.length() - 1);
+		}
+
+		if(" !\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_\'abcdefghijklmnopqrstuvwxyz{|}~\u2302\u00c7\u00fc\u00e9\u00e2\u00e4\u00e0\u00e5\u00e7\u00ea\u00eb\u00e8\u00ef\u00ee\u00ec\u00c4\u00c5\u00c9\u00e6\u00c6\u00f4\u00f6\u00f2\u00fb\u00f9\u00ff\u00d6\u00dc\u00f8\u00a3\u00d8\u00d7\u0192\u00e1\u00ed\u00f3\u00fa\u00f1\u00d1\u00aa\u00ba\u00bf\u00ae\u00ac\u00bd\u00bc\u00a1\u00ab\u00bb".indexOf(var1) >= 0 && this.displayString.length() < 32) {
+			this.displayString = this.displayString + var1;
+		}
+	}
+	
+	public void handleKeyTypeOnlyNumbers(char var1, int var2){
+		if(var1 == 22) {
+			String var3 = GuiScreen.getClipboardString();
+			if(var3 == null) {
+				var3 = "";
+			}
+
+			int var4 = 32 - this.displayString.length();
+			if(var4 > var3.length()) {
+				var4 = var3.length();
+			}
+
+			if(var4 > 0) {
+				this.displayString = this.displayString + var3.substring(0, var4);
+			}
+		}
+
+		if(var2 == 14 && this.displayString.length() > 0) {
+			this.displayString = this.displayString.substring(0, this.displayString.length() - 1);
+		}
+
+		if("0123456789".indexOf(var1) >= 0 && this.displayString.length() < 32) {
+			this.displayString = this.displayString + var1;
+		}
+	}
+	
+	public void handleKeyTypeOnlyNumbersAndDot(char var1, int var2){
+		if(var1 == 22) {
+			String var3 = GuiScreen.getClipboardString();
+			if(var3 == null) {
+				var3 = "";
+			}
+
+			int var4 = 32 - this.displayString.length();
+			if(var4 > var3.length()) {
+				var4 = var3.length();
+			}
+
+			if(var4 > 0) {
+				this.displayString = this.displayString + var3.substring(0, var4);
+			}
+		}
+
+		if(var2 == 14 && this.displayString.length() > 0) {
+			this.displayString = this.displayString.substring(0, this.displayString.length() - 1);
+		}
+
+		if("0123456789.".indexOf(var1) >= 0 && this.displayString.length() < 32) {
+			this.displayString = this.displayString + var1;
+		}
+	}
+}
--- net/minecraft/src/EntityBoat.java
+++ net/minecraft/src/EntityBoat.java
@@ -61,15 +61,7 @@
 			this.field_807_a += var2 * 10;
 			this.func_9281_M();
 			if(this.field_807_a > 40) {
-				int var3;
-				for(var3 = 0; var3 < 3; ++var3) {
-					this.dropItemWithOffset(Block.planks.blockID, 1, 0.0F);
-				}
-
-				for(var3 = 0; var3 < 2; ++var3) {
-					this.dropItemWithOffset(Item.stick.shiftedIndex, 1, 0.0F);
-				}
-
+				this.dropItemWithOffset(Item.boat.shiftedIndex, 1, 0.0F);
 				this.setEntityDead();
 			}
 
@@ -228,15 +220,7 @@
 			if(this.field_9297_aI && var8 > 0.15D) {
 				if(!this.worldObj.multiplayerWorld) {
 					this.setEntityDead();
-
-					int var24;
-					for(var24 = 0; var24 < 3; ++var24) {
-						this.dropItemWithOffset(Block.planks.blockID, 1, 0.0F);
-					}
-
-					for(var24 = 0; var24 < 2; ++var24) {
-						this.dropItemWithOffset(Item.stick.shiftedIndex, 1, 0.0F);
-					}
+					this.dropItemWithOffset(Item.boat.shiftedIndex, 1, 0.0F);
 				}
 			} else {
 				this.motionX *= (double)0.99F;
--- net/minecraft/src/ChunkProviderGenerate.java
+++ net/minecraft/src/ChunkProviderGenerate.java
@@ -301,6 +301,7 @@
 
 	public void populate(IChunkProvider var1, int var2, int var3) {
 		BlockSand.fallInstantly = true;
+		BlockIce.meltsTowater = false;
 		int var4 = var2 * 16;
 		int var5 = var3 * 16;
 		MobSpawnerBase var6 = this.worldObj.func_4075_a().func_4073_a(var4 + 16, var5 + 16);
@@ -336,7 +337,7 @@
 			(new WorldGenDungeons()).generate(this.worldObj, this.rand, var14, var15, var16);
 		}
 
-		for(var13 = 0; var13 < 10; ++var13) {
+		for(var13 = 0; var13 < 16; ++var13) {
 			var14 = var4 + this.rand.nextInt(16);
 			var15 = this.rand.nextInt(128);
 			var16 = var5 + this.rand.nextInt(16);
@@ -356,7 +357,7 @@
 			var16 = var5 + this.rand.nextInt(16);
 			(new WorldGenMinable(Block.gravel.blockID, 32)).generate(this.worldObj, this.rand, var14, var15, var16);
 		}
-
+		
 		for(var13 = 0; var13 < 20; ++var13) {
 			var14 = var4 + this.rand.nextInt(16);
 			var15 = this.rand.nextInt(128);
@@ -435,9 +436,20 @@
 		if(var6 == MobSpawnerBase.rainforest && this.rand.nextInt(3) == 0) {
 			var24 = new WorldGenBigTree();
 		}
+		
+		
 
 		int var17;
 		int var18;
+		int var19;
+		
+		if(this.worldObj.grassPyramids && this.rand.nextInt(64) == 0) {
+			var17 = var4 + this.rand.nextInt(16) + 8;
+			var18 = this.rand.nextInt(32) + 96;
+			var19 = var5 + this.rand.nextInt(16) + 8;
+			(new WorldGenGrassPyramid()).generate(this.worldObj, this.rand, var17, var18, var19);
+		}
+		
 		for(var16 = 0; var16 < var14; ++var16) {
 			var17 = var4 + this.rand.nextInt(16) + 8;
 			var18 = var5 + this.rand.nextInt(16) + 8;
@@ -445,7 +457,6 @@
 			((WorldGenerator)var24).generate(this.worldObj, this.rand, var17, this.worldObj.getHeightValue(var17, var18), var18);
 		}
 
-		int var19;
 		for(var16 = 0; var16 < 2; ++var16) {
 			var17 = var4 + this.rand.nextInt(16) + 8;
 			var18 = this.rand.nextInt(128);
@@ -460,6 +471,13 @@
 			(new WorldGenFlowers(Block.plantRed.blockID)).generate(this.worldObj, this.rand, var16, var17, var18);
 		}
 
+		if(this.rand.nextInt(2) == 0) {
+			var16 = var4 + this.rand.nextInt(16) + 8;
+			var17 = this.rand.nextInt(128);
+			var18 = var5 + this.rand.nextInt(16) + 8;
+			(new WorldGenFlowers(Block.blueRose.blockID)).generate(this.worldObj, this.rand, var16, var17, var18);
+		}
+
 		if(this.rand.nextInt(4) == 0) {
 			var16 = var4 + this.rand.nextInt(16) + 8;
 			var17 = this.rand.nextInt(128);
@@ -528,8 +546,16 @@
 				}
 			}
 		}
+		
+		if(this.rand.nextInt(1048576) == 0) {
+			var17 = var4 + this.rand.nextInt(16) + 8;
+			var18 = this.rand.nextInt(32) + 96;
+			var19 = var5 + this.rand.nextInt(16) + 8;
+			(new WorldGenPyramid(Agrupation.pyramidGenerate.getRandom(this.rand))).generate(this.worldObj, this.rand, var17, var18, var19);
+		}
 
 		BlockSand.fallInstantly = false;
+		BlockIce.meltsTowater = true;
 	}
 
 	public boolean saveChunks(boolean var1, IProgressUpdate var2) {
@@ -542,5 +568,13 @@
 
 	public boolean func_536_b() {
 		return true;
+	}
+	
+	private int getRandomBlock(){
+		int k;
+		do{
+			k = this.rand.nextInt(103)+1;
+		} while(Block.blocksList[k] == null);
+		return k;
 	}
 }
--- /dev/null
+++ net/minecraft/src/BlockRedstoneLamp.java
@@ -1,0 +1,45 @@
+package net.minecraft.src;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Random;
+
+public class BlockRedstoneLamp extends Block {
+	private boolean lampActive = false;
+
+	protected BlockRedstoneLamp(int var1, int var2, boolean var3) {
+		super(var1, var2, Material.circuits);
+		this.lampActive = var3;
+		this.setTickOnLoad(true);
+	}
+
+	public int tickRate() {
+		return 2;
+	}
+	
+	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
+		//System.out.println("a");
+		if(lampActive){
+			if(!var1.isBlockIndirectlyGettingPowered(var2, var3, var4)){
+				var1.setBlockWithNotify(var2, var3, var4, Block.redstoneLampOff.blockID);
+			}
+		} else {
+			if(var1.isBlockIndirectlyGettingPowered(var2, var3, var4)){
+				var1.setBlockWithNotify(var2, var3, var4, Block.redstoneLampOn.blockID);
+			}
+		}
+		//var1.scheduleBlockUpdate(var2, var3, var4, this.blockID);
+	}
+	
+	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
+		this.updateTick(var1, var2, var3, var4, new Random());
+	}
+	
+	public void onBlockAdded(World var1, int var2, int var3, int var4) {
+		this.updateTick(var1, var2, var3, var4, new Random());
+	}
+	
+	public int idDropped(int var1, Random var2) {
+		return Block.redstoneLampOff.blockID;
+	}
+}
--- net/minecraft/src/GuiContainer.java
+++ net/minecraft/src/GuiContainer.java
@@ -24,11 +24,15 @@
 		GL11.glTranslatef((float)var4, (float)var5, 0.0F);
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
 		GL11.glEnable(GL12.GL_RESCALE_NORMAL);
+		Slot s = null;
 
 		for(int var6 = 0; var6 < this.inventorySlots.size(); ++var6) {
 			SlotInventory var7 = (SlotInventory)this.inventorySlots.get(var6);
 			this.drawSlotInventory(var7);
 			if(var7.isAtCursorPos(var1, var2)) {
+				if(var7 != null && var7.getStack() != null){
+					s = var7;
+				}
 				GL11.glDisable(GL11.GL_LIGHTING);
 				GL11.glDisable(GL11.GL_DEPTH_TEST);
 				int var8 = var7.xPos;
@@ -51,6 +55,17 @@
 		GL11.glDisable(GL11.GL_LIGHTING);
 		GL11.glDisable(GL11.GL_DEPTH_TEST);
 		this.drawGuiContainerForegroundLayer();
+		if(s != null && this.mc.gameSettings.itemNames){
+			String str = "";
+			str = s.getStack().getName(this.mc.translator);
+			if(str.length() > 0) {
+				int i1 = var1 - var4 + 12;
+				int i2 = var2 - var5 - 12;
+				int i3 = this.fontRenderer.getStringWidth(str);
+				this.drawGradientRect(i1 - 3, i2 - 3, i1 + i3 + 3, i2 + 8 + 3, -1073741824, -1073741824);
+				this.fontRenderer.drawStringWithShadow(str, i1, i2, -1);
+			}
+		}
 		GL11.glEnable(GL11.GL_LIGHTING);
 		GL11.glEnable(GL11.GL_DEPTH_TEST);
 		GL11.glPopMatrix();
--- /dev/null
+++ net/minecraft/src/GuiTinyButton.java
@@ -1,0 +1,7 @@
+package net.minecraft.src;
+
+public class GuiTinyButton extends GuiButton {
+	public GuiTinyButton(int var1, int var2, int var3, String var4) {
+		super(var1, var2, var3, 20, 20, var4);
+	}
+}
--- net/minecraft/src/BlockChest.java
+++ net/minecraft/src/BlockChest.java
@@ -128,27 +128,28 @@
 
 	public void onBlockRemoval(World var1, int var2, int var3, int var4) {
 		TileEntityChest var5 = (TileEntityChest)var1.getBlockTileEntity(var2, var3, var4);
-
-		for(int var6 = 0; var6 < var5.getSizeInventory(); ++var6) {
-			ItemStack var7 = var5.getStackInSlot(var6);
-			if(var7 != null) {
-				float var8 = this.field_457_a.nextFloat() * 0.8F + 0.1F;
-				float var9 = this.field_457_a.nextFloat() * 0.8F + 0.1F;
-				float var10 = this.field_457_a.nextFloat() * 0.8F + 0.1F;
-
-				while(var7.stackSize > 0) {
-					int var11 = this.field_457_a.nextInt(21) + 10;
-					if(var11 > var7.stackSize) {
-						var11 = var7.stackSize;
+		if(var5 != null) {
+			for(int var6 = 0; var6 < var5.getSizeInventory(); ++var6) {
+				ItemStack var7 = var5.getStackInSlot(var6);
+				if(var7 != null) {
+					float var8 = this.field_457_a.nextFloat() * 0.8F + 0.1F;
+					float var9 = this.field_457_a.nextFloat() * 0.8F + 0.1F;
+					float var10 = this.field_457_a.nextFloat() * 0.8F + 0.1F;
+	
+					while(var7.stackSize > 0) {
+						int var11 = this.field_457_a.nextInt(21) + 10;
+						if(var11 > var7.stackSize) {
+							var11 = var7.stackSize;
+						}
+	
+						var7.stackSize -= var11;
+						EntityItem var12 = new EntityItem(var1, (double)((float)var2 + var8), (double)((float)var3 + var9), (double)((float)var4 + var10), new ItemStack(var7.itemID, var11, var7.itemDamage));
+						float var13 = 0.05F;
+						var12.motionX = (double)((float)this.field_457_a.nextGaussian() * var13);
+						var12.motionY = (double)((float)this.field_457_a.nextGaussian() * var13 + 0.2F);
+						var12.motionZ = (double)((float)this.field_457_a.nextGaussian() * var13);
+						var1.entityJoinedWorld(var12);
 					}
-
-					var7.stackSize -= var11;
-					EntityItem var12 = new EntityItem(var1, (double)((float)var2 + var8), (double)((float)var3 + var9), (double)((float)var4 + var10), new ItemStack(var7.itemID, var11, var7.itemDamage));
-					float var13 = 0.05F;
-					var12.motionX = (double)((float)this.field_457_a.nextGaussian() * var13);
-					var12.motionY = (double)((float)this.field_457_a.nextGaussian() * var13 + 0.2F);
-					var12.motionZ = (double)((float)this.field_457_a.nextGaussian() * var13);
-					var1.entityJoinedWorld(var12);
 				}
 			}
 		}
@@ -186,6 +187,7 @@
 			}
 
 			var5.displayGUIChest((IInventory)var6);
+			var1.playSoundEffect((double)var2 + 0.5D, (double)var3 + 0.5D, (double)var4 + 0.5D, "random.door_open", 1.0F, var1.rand.nextFloat() * 0.1F + 0.9F);
 			return true;
 		}
 	}
--- /dev/null
+++ net/minecraft/src/TransferableImage.java
@@ -1,0 +1,42 @@
+package net.minecraft.src;
+
+import java.awt.*;
+import java.awt.datatransfer.*;
+import java.awt.image.*;
+import java.io.*;
+
+public class TransferableImage implements Transferable {
+
+    Image i;
+
+    public TransferableImage( Image i ) {
+        this.i = i;
+    }
+
+    public Object getTransferData( DataFlavor flavor )
+    throws UnsupportedFlavorException, IOException {
+        if ( flavor.equals( DataFlavor.imageFlavor ) && i != null ) {
+            return i;
+        }
+        else {
+            throw new UnsupportedFlavorException( flavor );
+        }
+    }
+
+    public DataFlavor[] getTransferDataFlavors() {
+        DataFlavor[] flavors = new DataFlavor[ 1 ];
+        flavors[ 0 ] = DataFlavor.imageFlavor;
+        return flavors;
+    }
+
+    public boolean isDataFlavorSupported( DataFlavor flavor ) {
+        DataFlavor[] flavors = getTransferDataFlavors();
+        for ( int i = 0; i < flavors.length; i++ ) {
+            if ( flavor.equals( flavors[ i ] ) ) {
+                return true;
+            }
+        }
+
+        return false;
+    }
+}
--- net/minecraft/src/BlockFluids.java
+++ net/minecraft/src/BlockFluids.java
@@ -194,6 +194,11 @@
 			double var8 = (double)var3 + this.maxY;
 			double var10 = (double)((float)var4 + var5.nextFloat());
 			var1.spawnParticle("lava", var12, var8, var10, 0.0D, 0.0D, 0.0D);
+			var12 = (double)((float)var2 + var5.nextFloat());
+			var8 = (double)var3 + this.maxY;
+			var10 = (double)((float)var4 + var5.nextFloat());
+			var1.spawnParticle("lava", var12, var8, var10, 0.0D, 0.0D, 0.0D);
+			var1.playSoundEffect((double)((float)var2 + 0.5F), (double)((float)var3 + 0.5F), (double)((float)var4 + 0.5F), "liquid.lavapop", var5.nextFloat() * 0.25F + 12.0F / 16.0F, var5.nextFloat() * 1.0F + 0.5F);
 		}
 
 	}
--- net/minecraft/src/PlayerControllerSP.java
+++ net/minecraft/src/PlayerControllerSP.java
@@ -26,7 +26,11 @@
 		ItemStack var8 = this.mc.thePlayer.getCurrentEquippedItem();
 		boolean var9 = this.mc.thePlayer.canHarvestBlock(Block.blocksList[var5]);
 		if(var8 != null) {
-			var8.hitBlock(var5, var1, var2, var3);
+			if(this.mc.theWorld.isNether()){
+				var8.hitBlockNether(var5, var1, var2, var3);
+			} else {
+				var8.hitBlock(var5, var1, var2, var3);
+			}
 			if(var8.stackSize == 0) {
 				var8.func_1097_a(this.mc.thePlayer);
 				this.mc.thePlayer.destroyCurrentEquippedItem();
@@ -34,7 +38,11 @@
 		}
 
 		if(var7 && var9) {
-			Block.blocksList[var5].harvestBlock(this.mc.theWorld, var1, var2, var3, var6);
+			if(var8 != null && var8.silks()){
+				Block.blocksList[var5].harvestSilkBlock(this.mc.theWorld, var1, var2, var3, var6);
+			} else {
+				Block.blocksList[var5].harvestBlock(this.mc.theWorld, var1, var2, var3, var6);
+			}
 		}
 
 		return var7;
--- net/minecraft/src/BlockStairs.java
+++ net/minecraft/src/BlockStairs.java
@@ -88,11 +88,11 @@
 	public int func_234_g() {
 		return this.modelBlock.func_234_g();
 	}
-
+/* 
 	public int idDropped(int var1, Random var2) {
 		return this.modelBlock.idDropped(var1, var2);
 	}
-
+ */
 	public int quantityDropped(Random var1) {
 		return this.modelBlock.quantityDropped(var1);
 	}
@@ -141,7 +141,7 @@
 	public void onBlockRemoval(World var1, int var2, int var3, int var4) {
 		this.modelBlock.onBlockRemoval(var1, var2, var3, var4);
 	}
-
+/* 
 	public void dropBlockAsItemWithChance(World var1, int var2, int var3, int var4, int var5, float var6) {
 		this.modelBlock.dropBlockAsItemWithChance(var1, var2, var3, var4, var5, var6);
 	}
@@ -149,7 +149,7 @@
 	public void dropBlockAsItem(World var1, int var2, int var3, int var4, int var5) {
 		this.modelBlock.dropBlockAsItem(var1, var2, var3, var4, var5);
 	}
-
+ */
 	public void onEntityWalking(World var1, int var2, int var3, int var4, Entity var5) {
 		this.modelBlock.onEntityWalking(var1, var2, var3, var4, var5);
 	}
--- net/minecraft/src/GuiButton.java
+++ net/minecraft/src/GuiButton.java
@@ -12,6 +12,8 @@
 	public int id;
 	public boolean enabled;
 	public boolean enabled2;
+	public GuiBubble description;
+	public boolean hasDescription = false;
 
 	public GuiButton(int var1, int var2, int var3, String var4) {
 		this(var1, var2, var3, 200, 20, var4);
@@ -28,6 +30,18 @@
 		this.width = var4;
 		this.height = var5;
 		this.displayString = var6;
+		this.description = new GuiBubble("");
+	}
+	
+	public void setDescription(String s){
+		if(s.length() > 0){
+			this.hasDescription = true;
+			this.description.displayString = s;
+		} else {
+			this.hasDescription = false;
+			this.description.displayString = "";
+		}
+		
 	}
 
 	protected int getHoverState(boolean var1) {
@@ -61,6 +75,16 @@
 
 		}
 	}
+	
+	public boolean getIfHover(int var2, int var3){
+		return var2 >= this.xPosition && var3 >= this.yPosition && var2 < this.xPosition + this.width && var3 < this.yPosition + this.height;
+	}
+	
+	public void drawDescription(Minecraft var1, int var2, int var3){
+		if(this.enabled && this.getIfHover(var2, var3) && this.hasDescription){
+			description.drawBubble(var1, var2, var3);
+		}
+	}
 
 	protected void mouseDragged(Minecraft var1, int var2, int var3) {
 	}
@@ -69,6 +93,6 @@
 	}
 
 	public boolean mousePressed(Minecraft var1, int var2, int var3) {
-		return this.enabled && var2 >= this.xPosition && var3 >= this.yPosition && var2 < this.xPosition + this.width && var3 < this.yPosition + this.height;
+		return this.enabled && this.enabled2 && var2 >= this.xPosition && var3 >= this.yPosition && var2 < this.xPosition + this.width && var3 < this.yPosition + this.height;
 	}
 }
--- net/minecraft/src/BlockLightStone.java
+++ net/minecraft/src/BlockLightStone.java
@@ -10,4 +10,9 @@
 	public int idDropped(int var1, Random var2) {
 		return Item.lightStoneDust.shiftedIndex;
 	}
+
+	public int quantityDropped(Random var1) {
+		return 2 + var1.nextInt(3);
+	}
 }
+//mod
--- net/minecraft/client/Minecraft.java
+++ net/minecraft/client/Minecraft.java
@@ -9,7 +9,9 @@
 import java.awt.Graphics;
 import java.io.File;
 import net.minecraft.src.AxisAlignedBB;
+import net.minecraft.src.Agrupation;
 import net.minecraft.src.Block;
+import net.minecraft.src.CreativeSettings;
 import net.minecraft.src.EffectRenderer;
 import net.minecraft.src.EntityPlayer;
 import net.minecraft.src.EntityPlayerSP;
@@ -21,6 +23,7 @@
 import net.minecraft.src.GameSettings;
 import net.minecraft.src.GameWindowListener;
 import net.minecraft.src.GuiChat;
+import net.minecraft.src.GuiCheats;
 import net.minecraft.src.GuiConflictWarning;
 import net.minecraft.src.GuiConnecting;
 import net.minecraft.src.GuiGameOver;
@@ -42,6 +45,8 @@
 import net.minecraft.src.MovementInputFromOptions;
 import net.minecraft.src.MovingObjectPosition;
 import net.minecraft.src.OpenGlCapsChecker;
+import net.minecraft.src.Option;
+import net.minecraft.src.OptionsPage;
 import net.minecraft.src.PlayerController;
 import net.minecraft.src.PlayerControllerTest;
 import net.minecraft.src.RenderEngine;
@@ -65,9 +70,12 @@
 import net.minecraft.src.ThreadDownloadResources;
 import net.minecraft.src.ThreadSleepForever;
 import net.minecraft.src.Timer;
+import net.minecraft.src.TransferableImage;
+import net.minecraft.src.Translation;
 import net.minecraft.src.UnexpectedThrowable;
 import net.minecraft.src.Vec3D;
 import net.minecraft.src.World;
+import net.minecraft.src.WorldCreationSettings;
 import net.minecraft.src.WorldProvider;
 import net.minecraft.src.WorldProviderHell;
 import net.minecraft.src.WorldRenderer;
@@ -128,13 +136,16 @@
 	private static File minecraftDir = null;
 	public volatile boolean running = true;
 	public String field_6292_I = "";
-	boolean field_6291_J = false;
+	boolean field_6291_J = false; //Screenshot key pressed
 	long field_6290_K = -1L;
 	public boolean field_6289_L = false;
 	private int field_6302_aa = 0;
 	public boolean field_6288_M = false;
 	long field_6287_N = System.currentTimeMillis();
 	private int field_6300_ab = 0;
+	public Translation translator = Translation.english;
+	public static String name = "Mystic Alpha";
+	public static String version = "v1.0.2";
 
 	public Minecraft(Component var1, Canvas var2, MinecraftApplet var3, int var4, int var5, boolean var6) {
 		this.field_9236_T = var4;
@@ -180,7 +191,8 @@
 			Display.setDisplayMode(new DisplayMode(this.displayWidth, this.displayHeight));
 		}
 
-		Display.setTitle("Minecraft Minecraft Alpha v1.2.6");
+		setWindowTitle(Minecraft.getName());
+		//Display.setTitle("Minecraft Minecraft Alpha v1.2.6");
 
 		try {
 			Display.create();
@@ -253,7 +265,15 @@
 		} else {
 			this.displayGuiScreen(new GuiMainMenu());
 		}
-
+		System.out.println("Minecraft directory is: " + minecraftDir);
+	}
+	
+	public void setWindowTitle(String t){
+		Display.setTitle(t);
+	}
+	
+	public static String getName(){
+		return Minecraft.name + " " + Minecraft.version;
 	}
 
 	private void loadScreen() throws LWJGLException {
@@ -358,6 +378,7 @@
 				var1 = new GuiMainMenu();
 			} else if(var1 == null && this.thePlayer.health <= 0) {
 				var1 = new GuiGameOver();
+				this.ingameGUI.addChatMessage(field_6320_i.inventory +" has died");
 			}
 
 			this.currentScreen = (GuiScreen)var1;
@@ -371,7 +392,6 @@
 			} else {
 				this.func_6259_e();
 			}
-
 		}
 	}
 
@@ -480,7 +500,7 @@
 						Thread.sleep(5L);
 					}
 
-					if(!Keyboard.isKeyDown(Keyboard.KEY_F7)) {
+					if(!Keyboard.isKeyDown(this.gameSettings.keyBindUpdateDisplay.keyCode)) {
 						Display.update();
 					}
 
@@ -500,14 +520,14 @@
 						Thread.sleep(10L);
 					}
 
-					if(Keyboard.isKeyDown(Keyboard.KEY_F3)) {
+					if(this.ingameGUI.f3toggle && Keyboard.isKeyDown(this.gameSettings.keyBindGraph.keyCode)) {
 						this.func_6238_a(var20);
 					} else {
 						this.field_6290_K = System.nanoTime();
 					}
 
 					Thread.yield();
-					if(Keyboard.isKeyDown(Keyboard.KEY_F7)) {
+					if(Keyboard.isKeyDown(this.gameSettings.keyBindUpdateDisplay.keyCode)) {
 						Display.update();
 					}
 
@@ -547,11 +567,10 @@
 	}
 
 	private void func_6248_s() {
-		if(Keyboard.isKeyDown(Keyboard.KEY_F2)) {
+		if(Keyboard.isKeyDown(this.gameSettings.keyBindScreenshot.keyCode)) {
+			boolean b = Keyboard.isKeyDown(this.gameSettings.keyBindClipboard.keyCode);
 			if(!this.field_6291_J) {
-				if(Keyboard.isKeyDown(Keyboard.KEY_F1)) {
-					this.ingameGUI.addChatMessage(ScreenShotHelper.func_4148_a(minecraftDir, this.displayWidth, this.displayHeight));
-				}
+				this.ingameGUI.addChatMessage(ScreenShotHelper.func_4148_a(minecraftDir, this.displayWidth, this.displayHeight, b, this.gameSettings.screenClipboard));
 
 				this.field_6291_J = true;
 			}
@@ -906,7 +925,7 @@
 											this.thePlayer.func_460_a(Keyboard.getEventKey(), Keyboard.getEventKeyState());
 										} while(!Keyboard.getEventKeyState());
 
-										if(Keyboard.getEventKey() == Keyboard.KEY_F11) {
+										if(Keyboard.getEventKey() == this.gameSettings.keyBindFullscreen.keyCode) {
 											this.toggleFullscreen();
 										} else {
 											if(this.currentScreen != null) {
@@ -916,17 +935,23 @@
 													this.func_6252_g();
 												}
 
-												if(Keyboard.getEventKey() == Keyboard.KEY_S && Keyboard.isKeyDown(Keyboard.KEY_F3)) {
+												if(Keyboard.getEventKey() == Keyboard.KEY_S && Keyboard.isKeyDown(this.gameSettings.keyBindDebugMenu.keyCode)) {
 													this.forceReload();
 												}
 
-												if(Keyboard.getEventKey() == Keyboard.KEY_F5) {
-													this.gameSettings.thirdPersonView = !this.gameSettings.thirdPersonView;
+												if(Keyboard.getEventKey() == this.gameSettings.keyBindPerspective.keyCode) {
+													this.gameSettings.thirdPersonView = this.gameSettings.thirdPersonView == 2 ? 0 : this.gameSettings.thirdPersonView + 1;
 												}
 
 												if(Keyboard.getEventKey() == this.gameSettings.keyBindInventory.keyCode) {
 													this.displayGuiScreen(new GuiInventory(this.thePlayer.inventory, this.thePlayer.inventory.craftingInventory));
 												}
+												
+												if(Keyboard.getEventKey() == this.gameSettings.keyBindCheats.keyCode) {
+													if(this.currentScreen == null && this.theWorld.cheatsActivated) {
+														this.displayGuiScreen(new GuiCheats(this));
+													}
+												}
 
 												if(Keyboard.getEventKey() == this.gameSettings.keyBindDrop.keyCode) {
 													this.thePlayer.dropPlayerItemWithRandomChoice(this.thePlayer.inventory.decrStackSize(this.thePlayer.inventory.currentItem, 1), false);
@@ -1038,23 +1063,32 @@
 		return this.theWorld != null && this.theWorld.multiplayerWorld;
 	}
 
-	public void func_6247_b(String var1) {
+	public void func_6247_b(String var1, WorldCreationSettings wcs) {
+		System.out.println("Loading " + var1);
+		if(this.gameSettings != null && this.gameSettings.changeWindowTitle){
+			setWindowTitle(Minecraft.getName() + " - World " + var1.substring(5));
+		}
 		this.func_6261_a((World)null);
 		System.gc();
-		World var2 = new World(new File(getMinecraftDir(), "saves"), var1);
+		World var2 = new World(new File(getMinecraftDir(), "saves"), var1, wcs);
+
 		if(var2.field_1033_r) {
 			this.func_6263_a(var2, "Generating level");
 		} else {
 			this.func_6263_a(var2, "Loading level");
 		}
-
+		if(wcs != null){
+			this.setGamemode(wcs.gamemode);
+		}
 	}
 
 	public void func_6237_k() {
 		if(this.thePlayer.dimension == -1) {
 			this.thePlayer.dimension = 0;
+			this.ingameGUI.addChatMessage(field_6320_i.inventory +" has left the nether");
 		} else {
 			this.thePlayer.dimension = -1;
+			this.ingameGUI.addChatMessage(field_6320_i.inventory +" has entered the nether");
 		}
 
 		this.theWorld.setEntityDead(this.thePlayer);
@@ -1108,6 +1142,7 @@
 			if(!this.isMultiplayerWorld()) {
 				if(var3 == null) {
 					this.thePlayer = (EntityPlayerSP)var1.func_4085_a(EntityPlayerSP.class);
+					this.updateCreativeSettings();
 				}
 			} else if(this.thePlayer != null) {
 				this.thePlayer.preparePlayerToSpawn();
@@ -1123,6 +1158,7 @@
 			System.out.println("Player is now " + this.thePlayer);
 			if(this.thePlayer == null) {
 				this.thePlayer = (EntityPlayerSP)this.field_6327_b.func_4087_b(var1);
+				this.updateCreativeSettings();
 				this.thePlayer.preparePlayerToSpawn();
 				this.field_6327_b.flipPlayer(this.thePlayer);
 			}
@@ -1152,6 +1188,23 @@
 		System.gc();
 		this.field_6287_N = 0L;
 	}
+	
+	public void updateCreativeSettings(){
+		if(this.gameSettings == null){
+			return;
+		}
+		CreativeSettings cs = gameSettings.transferToPlayer();
+		if (this.thePlayer != null) {
+			this.thePlayer.setSettings(cs);
+		}
+	}
+	
+	public void setGamemode(int g){
+		if(this.thePlayer != null){
+			this.thePlayer.gamemode = (short) g;
+			System.out.println("Player gamemode changed to: " + g);
+		}	
+	}
 
 	private void func_6255_d(String var1) {
 		this.loadingScreen.func_596_a(var1);
@@ -1231,6 +1284,7 @@
 		}
 
 		this.thePlayer = (EntityPlayerSP)this.field_6327_b.func_4087_b(this.theWorld);
+		this.updateCreativeSettings();
 		this.thePlayer.preparePlayerToSpawn();
 		this.field_6327_b.flipPlayer(this.thePlayer);
 		this.theWorld.func_608_a(this.thePlayer);
@@ -1279,6 +1333,7 @@
 	}
 
 	public static void main(String[] var0) {
+		//System.out.println("Purchase the game, please");
 		String var1 = "Player" + System.currentTimeMillis() % 1000L;
 		if(var0.length > 0) {
 			var1 = var0[0];
@@ -1290,7 +1345,6 @@
 		}
 
 		var1 = "Player" + System.currentTimeMillis() % 1000L;
-		var1 = "Player524";
 		func_6269_a(var1, var2);
 	}
 }
--- net/minecraft/src/GuiOptions.java
+++ net/minecraft/src/GuiOptions.java
@@ -4,6 +4,9 @@
 	private GuiScreen parentScreen;
 	protected String screenTitle = "Options";
 	private GameSettings options;
+	private int page;
+	private int numPages;
+	private boolean pagesActivated = false;
 
 	public GuiOptions(GuiScreen var1, GameSettings var2) {
 		this.parentScreen = var1;
@@ -11,24 +14,86 @@
 	}
 
 	public void initGui() {
-		for(int var1 = 0; var1 < this.options.numberOfOptions; ++var1) {
-			int var2 = this.options.getOptionControlType(var1);
+		numPages = this.options.getNumberOfPages();
+		pagesActivated = numPages > 1;
+		
+		this.createButtons();
+
+		this.controlList.add(new GuiMediumButton(100, this.width / 2 - 151, this.height / 6 + 132, "Controls..."));
+		this.controlList.add(new GuiMediumButton(300, this.width / 2 - 49, this.height / 6 + 132, "Texture Packs"));
+		this.controlList.add(new GuiMediumButton(400, this.width / 2 + 53, this.height / 6 + 132, "Watermark"));
+		if(pagesActivated){
+			this.controlList.add(new GuiTinyButton(500, this.width / 2 - 155 - 24 , this.height / 6 + 48 + 12, "<"));
+			this.controlList.add(new GuiTinyButton(600, this.width / 2 + 155 + 4 , this.height / 6 + 48 + 12, ">"));
+		}
+		this.controlList.add(new GuiButton(200, this.width / 2 - 100, this.height / 6 + 132+24, "Done"));
+		this.updateButtons();
+	}
+	
+	protected void createButtons(){
+		for(int var1 = 0; var1 < 10; ++var1) {
+			this.controlList.add(new GuiSmallButton(var1, this.width / 2 - 155 + var1 % 2 * 160, this.height / 6 + 24 * (var1 >> 1), ""));
+		}
+	}
+	
+	protected void updateButtons(){
+		int num = this.options.getNumberOfOptionsInPage(this.page);
+		
+		for(int var1 = num; var1 < 10; ++var1){
+			((GuiButton)this.controlList.get(var1)).displayString = "";
+		}
+		
+		int mov = 0;
+		for(int var1 = 0; var1 < num; ++var1, ++mov) {
+			if(!this.options.pages[page].options[var1].isActivated){
+				mov--;
+				continue;
+			}
+			int var2 = this.options.getOptionControlType(this.page, var1);
 			if(var2 == 0) {
-				this.controlList.add(new GuiSmallButton(var1, this.width / 2 - 155 + var1 % 2 * 160, this.height / 6 + 24 * (var1 >> 1), this.options.getOptionDisplayString(var1)));
+				GuiButton cur = ((GuiButton)this.controlList.get(var1));
+				if(cur instanceof GuiSlider){
+					this.controlList.set(var1, new GuiSmallButton(var1, this.width / 2 - 155 + mov % 2 * 160, this.height / 6 + 24 * (mov >> 1), this.options.getOptionDisplayString(this.page, var1)));
+				} else {
+					cur.displayString = this.options.getOptionDisplayString(this.page, var1);
+				}
 			} else {
-				this.controlList.add(new GuiSlider(var1, this.width / 2 - 155 + var1 % 2 * 160, this.height / 6 + 24 * (var1 >> 1), var1, this.options.getOptionDisplayString(var1), this.options.getOptionFloatValue(var1)));
+				GuiButton cur = ((GuiButton)this.controlList.get(var1));
+				if(cur instanceof GuiSmallButton){
+					this.controlList.set(var1, new GuiSlider(var1, this.width / 2 - 155 + mov % 2 * 160, this.height / 6 + 24 * (mov >> 1), ((page) * 10) + var1, this.options.getOptionDisplayString(this.page, var1), (float) this.options.getValueByIdentifier(this.options.getIdentifier(page, var1))));
+				} else {
+					cur.displayString = this.options.getOptionDisplayString(this.page, var1);
+				}
 			}
 		}
-
-		this.controlList.add(new GuiButton(100, this.width / 2 - 100, this.height / 6 + 120 + 12, "Controls..."));
-		this.controlList.add(new GuiButton(200, this.width / 2 - 100, this.height / 6 + 168, "Done"));
+		
+		for(int var1 = 0; var1 < 10; ++var1){
+			((GuiButton)this.controlList.get(var1)).enabled2 = true;
+		}
+		
+		for(int var1 = num; var1 < 10; ++var1){
+			((GuiButton)this.controlList.get(var1)).enabled2 = false;
+		}
+		
+		for(int var1 = 0; var1 < num; ++var1){
+			((GuiButton)this.controlList.get(var1)).setDescription(this.options.getDescription(this.page, var1));
+		}
+		this.updatePageButtons();
+	}
+	
+	public void updatePageButtons(){
+		if(pagesActivated){
+			((GuiButton)this.controlList.get(10+3)).enabled = page > 0;
+			((GuiButton)this.controlList.get(10+4)).enabled = page < this.numPages - 1;
+		}
 	}
 
 	protected void actionPerformed(GuiButton var1) {
 		if(var1.enabled) {
 			if(var1.id < 100) {
-				this.options.setOptionValue(var1.id, 1);
-				var1.displayString = this.options.getOptionDisplayString(var1.id);
+				int var289 = this.options.getIdentifier(this.page, var1.id);
+				this.options.setOptionValue(var289, 1);
+				var1.displayString = this.options.getOptionDisplayString(this.page, var1.id);
 			}
 
 			if(var1.id == 100) {
@@ -40,13 +105,43 @@
 				this.mc.gameSettings.saveOptions();
 				this.mc.displayGuiScreen(this.parentScreen);
 			}
-
+			
+			if(var1.id == 300) {
+				this.mc.gameSettings.saveOptions();
+				this.mc.displayGuiScreen(new GuiTexturePacks(this));
+			}	
+			
+			if(var1.id == 400) {
+				this.mc.gameSettings.saveOptions();
+				this.mc.displayGuiScreen(new GuiWatermark(this, this.options));
+			}
+			
+			if(var1.id == 500) {
+				page--;
+				updateButtons();
+			}	
+			
+			if(var1.id == 600) {
+				page++;
+				updateButtons();
+			}
+			
 		}
 	}
 
 	public void drawScreen(int var1, int var2, float var3) {
 		this.drawDefaultBackground();
-		this.drawCenteredString(this.fontRenderer, this.screenTitle, this.width / 2, 20, 16777215);
+		this.drawCenteredString(this.fontRenderer, this.screenTitle + " - " + this.options.pages[page].title, this.width / 2, 20, 16777215);
 		super.drawScreen(var1, var2, var3);
+	}
+	
+	protected void keyTyped(char var1, int var2){
+		if(var2 == 205){ //Flecha derecha
+			this.actionPerformed((GuiButton)this.controlList.get(14));
+		} else if(var2 == 203){ //Flecha izquierda
+			this.actionPerformed((GuiButton)this.controlList.get(13));
+		} else {
+			super.keyTyped(var1, var2);
+		}
 	}
 }
--- net/minecraft/src/Session.java
+++ net/minecraft/src/Session.java
@@ -13,36 +13,4 @@
 		this.inventory = var1;
 		this.field_6543_c = var2;
 	}
-
-	static {
-		registeredBlocksList.add(Block.stone);
-		registeredBlocksList.add(Block.cobblestone);
-		registeredBlocksList.add(Block.brick);
-		registeredBlocksList.add(Block.dirt);
-		registeredBlocksList.add(Block.planks);
-		registeredBlocksList.add(Block.wood);
-		registeredBlocksList.add(Block.leaves);
-		registeredBlocksList.add(Block.torchWood);
-		registeredBlocksList.add(Block.stairSingle);
-		registeredBlocksList.add(Block.glass);
-		registeredBlocksList.add(Block.cobblestoneMossy);
-		registeredBlocksList.add(Block.sapling);
-		registeredBlocksList.add(Block.plantYellow);
-		registeredBlocksList.add(Block.plantRed);
-		registeredBlocksList.add(Block.mushroomBrown);
-		registeredBlocksList.add(Block.mushroomRed);
-		registeredBlocksList.add(Block.sand);
-		registeredBlocksList.add(Block.gravel);
-		registeredBlocksList.add(Block.sponge);
-		registeredBlocksList.add(Block.cloth);
-		registeredBlocksList.add(Block.oreCoal);
-		registeredBlocksList.add(Block.oreIron);
-		registeredBlocksList.add(Block.oreGold);
-		registeredBlocksList.add(Block.blockSteel);
-		registeredBlocksList.add(Block.blockGold);
-		registeredBlocksList.add(Block.bookShelf);
-		registeredBlocksList.add(Block.tnt);
-		registeredBlocksList.add(Block.obsidian);
-		System.out.println(registeredBlocksList.size());
-	}
 }
--- net/minecraft/src/InventoryPlayer.java
+++ net/minecraft/src/InventoryPlayer.java
@@ -194,6 +194,15 @@
 
 		return var2;
 	}
+	
+	public float getStrVsBlockNether(Block var1) {
+		float var2 = 1.0F;
+		if(this.mainInventory[this.currentItem] != null) {
+			var2 *= this.mainInventory[this.currentItem].getStrVsBlockNether(var1);
+		}
+
+		return var2;
+	}
 
 	public NBTTagList writeToNBT(NBTTagList var1) {
 		int var2;
@@ -288,7 +297,7 @@
 			return true;
 		} else {
 			ItemStack var2 = this.getStackInSlot(this.currentItem);
-			return var2 != null ? var2.canHarvestBlock(var1) : false;
+			return var2 != null ? (var2.silks() ? true : var2.canHarvestBlock(var1)) : false;
 		}
 	}
 
--- net/minecraft/src/EntityPlayerSP.java
+++ net/minecraft/src/EntityPlayerSP.java
@@ -15,7 +15,7 @@
 		this.mc = var1;
 		this.dimension = var4;
 		if(var3 != null && var3.inventory != null && var3.inventory.length() > 0) {
-			this.skinUrl = "http://www.minecraft.net/skin/" + var3.inventory + ".png";
+			this.skinUrl = " http://www.betacraft.uk/skin/" + var3.inventory + ".png";
 			System.out.println("Loading texture " + this.skinUrl);
 		}
 
--- net/minecraft/src/BlockSlowSand.java
+++ net/minecraft/src/BlockSlowSand.java
@@ -1,8 +1,8 @@
 package net.minecraft.src;
 
-public class BlockSlowSand extends Block {
+public class BlockSlowSand extends BlockSand {
 	public BlockSlowSand(int var1, int var2) {
-		super(var1, var2, Material.sand);
+		super(var1, var2);
 	}
 
 	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
--- net/minecraft/src/EntityPlayer.java
+++ net/minecraft/src/EntityPlayer.java
@@ -14,17 +14,24 @@
 	public int dimension;
 	private int field_781_a = 0;
 	public EntityFish fishEntity = null;
+	public int maxHealth = 20;
+	public short gamemode = 0;
+	protected CreativeSettings creSettings;
 
 	public EntityPlayer(World var1) {
 		super(var1);
 		this.yOffset = 1.62F;
 		this.setLocationAndAngles((double)var1.spawnX + 0.5D, (double)(var1.spawnY + 1), (double)var1.spawnZ + 0.5D, 0.0F, 0.0F);
-		this.health = 20;
+		this.health = maxHealth;
 		this.field_9351_C = "humanoid";
 		this.field_9353_B = 180.0F;
 		this.field_9310_bf = 20;
 		this.texture = "/mob/char.png";
 	}
+	
+	public void setSettings(CreativeSettings c){
+		this.creSettings = c;
+	}
 
 	public void func_350_p() {
 		super.func_350_p();
@@ -36,7 +43,7 @@
 		this.yOffset = 1.62F;
 		this.setSize(0.6F, 1.8F);
 		super.preparePlayerToSpawn();
-		this.health = 20;
+		this.health = maxHealth;
 		this.deathTime = 0;
 	}
 
@@ -55,9 +62,21 @@
 	}
 
 	public void onLivingUpdate() {
-		if(this.worldObj.difficultySetting == 0 && this.health < 20 && this.field_9311_be % 20 * 4 == 0) {
+		if(this.worldObj.difficultySetting == 0 && this.health < maxHealth && this.field_9311_be % 20 * 4 == 0) {
 			this.heal(1);
 		}
+		
+		if (this.health > this.maxHealth){
+			this.health = this.maxHealth;
+		}
+		
+		if(gamemode == 1 && this.health != this.maxHealth){
+			this.health = this.maxHealth;
+		}
+		
+		if(gamemode == 1 && this.fire != 0){
+			this.fire = 0;
+		}
 
 		this.inventory.decrementAnimations();
 		this.field_775_e = this.field_774_f;
@@ -159,7 +178,13 @@
 	}
 
 	public float getCurrentPlayerStrVsBlock(Block var1) {
-		float var2 = this.inventory.getStrVsBlock(var1);
+		float var2;
+		if(dimension == -1){
+			var2 = this.inventory.getStrVsBlockNether(var1);
+		} else {
+			var2 = this.inventory.getStrVsBlock(var1);
+		}
+		
 		if(this.isInsideOfMaterial(Material.water)) {
 			var2 /= 5.0F;
 		}
@@ -170,8 +195,20 @@
 
 		return var2;
 	}
+	
+	public boolean doMobsTrackYou(){
+		if(gamemode == 1 && !this.creSettings.creativeMobsTrackYou){
+			return false;
+		}
+		return true;
+	}
 
 	public boolean canHarvestBlock(Block var1) {
+		if(gamemode == 1 && this.creSettings.creativeDoHarvest){
+			return true;
+		} else if (gamemode == 1){
+			return false;
+		}
 		return this.inventory.canHarvestBlock(var1);
 	}
 
@@ -180,12 +217,14 @@
 		NBTTagList var2 = var1.getTagList("Inventory");
 		this.inventory.readFromNBT(var2);
 		this.dimension = var1.getInteger("Dimension");
+		this.gamemode = var1.getShort("Gamemode");
 	}
 
 	public void writeEntityToNBT(NBTTagCompound var1) {
 		super.writeEntityToNBT(var1);
 		var1.setTag("Inventory", this.inventory.writeToNBT(new NBTTagList()));
 		var1.setInteger("Dimension", this.dimension);
+		var1.setShort("Gamemode", this.gamemode);
 	}
 
 	public void displayGUIChest(IInventory var1) {
@@ -203,9 +242,12 @@
 
 	public boolean canAttackEntity(Entity var1, int var2) {
 		this.field_9344_ag = 0;
+		if(this.gamemode == 1){
+			return false;
+		}
 		if(this.health <= 0) {
 			return false;
-		} else {
+		} else{
 			if(var1 instanceof EntityMobs || var1 instanceof EntityArrow) {
 				if(this.worldObj.difficultySetting == 0) {
 					var2 = 0;
@@ -225,12 +267,14 @@
 	}
 
 	protected void damageEntity(int var1) {
-		int var2 = 25 - this.inventory.getTotalArmorValue();
-		int var3 = var1 * var2 + this.field_781_a;
-		this.inventory.damageArmor(var1);
-		var1 = var3 / 25;
-		this.field_781_a = var3 % 25;
-		super.damageEntity(var1);
+		if(gamemode != 1){
+			int var2 = 25 - this.inventory.getTotalArmorValue();
+			int var3 = var1 * var2 + this.field_781_a;
+			this.inventory.damageArmor(var1);
+			var1 = var3 / 25;
+			this.field_781_a = var3 % 25;
+			super.damageEntity(var1);
+		}
 	}
 
 	public void displayGUIFurnace(TileEntityFurnace var1) {
--- net/minecraft/src/BlockPressurePlate.java
+++ net/minecraft/src/BlockPressurePlate.java
@@ -6,8 +6,8 @@
 public class BlockPressurePlate extends Block {
 	private EnumMobType triggerMobType;
 
-	protected BlockPressurePlate(int var1, int var2, EnumMobType var3) {
-		super(var1, var2, Material.rock);
+	protected BlockPressurePlate(int var1, int var2, EnumMobType var3, Material m) {
+		super(var1, var2, m);
 		this.triggerMobType = var3;
 		this.setTickOnLoad(true);
 		float var4 = 1.0F / 16.0F;
--- net/minecraft/src/RenderGlobal.java
+++ net/minecraft/src/RenderGlobal.java
@@ -271,7 +271,7 @@
 			int var6;
 			for(var6 = 0; var6 < var5.size(); ++var6) {
 				Entity var7 = (Entity)var5.get(var6);
-				if(var7.func_390_a(var1) && var2.func_342_a(var7.boundingBox) && (var7 != this.mc.thePlayer || this.mc.gameSettings.thirdPersonView)) {
+				if(var7.func_390_a(var1) && var2.func_342_a(var7.boundingBox) && (var7 != this.mc.thePlayer || this.mc.gameSettings.thirdPersonView > 0)) {
 					++this.field_1422_K;
 					RenderManager.instance.func_854_a(var7, var3);
 				}
@@ -1110,6 +1110,10 @@
 				this.mc.field_6321_h.func_1192_a(new EntitySlimeFX(this.worldObj, var2, var4, var6, Item.snowball));
 			} else if(var1 == "slime") {
 				this.mc.field_6321_h.func_1192_a(new EntitySlimeFX(this.worldObj, var2, var4, var6, Item.slimeBall));
+			} else if(var1 == "slimefire") {
+				this.mc.field_6321_h.func_1192_a(new EntitySlimeFX(this.worldObj, var2, var4, var6, Item.fireSlimeBall));
+			} else if(var1 == "redsmoke") {
+				this.mc.field_6321_h.func_1192_a(new EntityRedSmokeFX(this.worldObj, var2, var4, var6));
 			}
 
 		}
--- /dev/null
+++ net/minecraft/src/FurnaceRecipes.java
@@ -1,0 +1,40 @@
+package net.minecraft.src;
+
+import java.util.ArrayList;
+
+public class FurnaceRecipes{
+	public static FurnaceRecipes recipes = new FurnaceRecipes();
+	private ArrayList<Integer> ingredients = new ArrayList<>();
+	private ArrayList<Integer> results = new ArrayList<>();
+	
+	public FurnaceRecipes(){
+		this.loadRecipes();
+	}
+	
+	public void loadRecipes(){
+		addRecipe(Block.oreIron.blockID, Item.ingotIron.shiftedIndex);
+		addRecipe(Block.oreGold.blockID, Item.ingotGold.shiftedIndex);
+		addRecipe(Block.oreDiamond.blockID, Item.diamond.shiftedIndex);
+		addRecipe(Block.sand.blockID, Block.glass.blockID);
+		addRecipe(Block.sandstone.blockID, Block.smoothSandstone.blockID);
+		addRecipe(Item.fishRaw.shiftedIndex, Item.fishCooked.shiftedIndex);
+		addRecipe(Item.porkRaw.shiftedIndex, Item.porkCooked.shiftedIndex);
+		addRecipe(Item.clay.shiftedIndex, Item.brick.shiftedIndex);
+		addRecipe(Block.cobblestone.blockID, Block.stone.blockID);
+		addRecipe(Block.wood.blockID, Item.coal.shiftedIndex);
+	}
+	
+	public void addRecipe(int i, int r){
+		this.ingredients.add(i);
+		this.results.add(r);
+	}
+	
+	public int getSmeltResult(int in){
+		for(int i = 0; i < ingredients.size(); i++){
+			if(ingredients.get(i) == in){
+				return results.get(i);
+			}
+		}
+		return -1;
+	}
+}
--- net/minecraft/src/BlockSnowBlock.java
+++ net/minecraft/src/BlockSnowBlock.java
@@ -13,7 +13,7 @@
 	}
 
 	public int quantityDropped(Random var1) {
-		return 4;
+		return 2+var1.nextInt(3);
 	}
 
 	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
@@ -24,3 +24,4 @@
 
 	}
 }
+//mod
--- net/minecraft/src/BlockStep.java
+++ net/minecraft/src/BlockStep.java
@@ -44,6 +44,14 @@
 	public int idDropped(int var1, Random var2) {
 		return Block.stairSingle.blockID;
 	}
+	
+	public int quantityDropped(Random var1){
+		if(this.blockID == Block.stairSingle.blockID) {
+			return 1;
+		} else {
+			return 2;
+		}
+	}
 
 	public boolean renderAsNormalBlock() {
 		return this.field_469_a;
--- net/minecraft/src/Material.java
+++ net/minecraft/src/Material.java
@@ -24,7 +24,8 @@
 	public static final Material cactus = new Material();
 	public static final Material clay = new Material();
 	public static final Material pumpkin = new Material();
-	public static final Material field_4260_x = new Material();
+	public static final Material bone = new Material();
+	public static final Material field_4260_x = new Material(); //For nether portals, only
 	private boolean canBurn;
 
 	public boolean getIsLiquid() {
--- net/minecraft/src/ScreenShotHelper.java
+++ net/minecraft/src/ScreenShotHelper.java
@@ -9,6 +9,8 @@
 import javax.imageio.ImageIO;
 import org.lwjgl.BufferUtils;
 import org.lwjgl.opengl.GL11;
+import java.awt.Toolkit;
+import java.awt.datatransfer.ClipboardOwner;
 
 public class ScreenShotHelper {
 	private static DateFormat field_4287_a = new SimpleDateFormat("yyyy-MM-dd_HH.mm.ss");
@@ -16,7 +18,7 @@
 	private static byte[] field_4289_c;
 	private static int[] field_4288_d;
 
-	public static String func_4148_a(File var0, int var1, int var2) {
+	public static String func_4148_a(File var0, int var1, int var2, boolean copyPressed, int opt) {
 		try {
 			File var3 = new File(var0, "screenshots");
 			var3.mkdir();
@@ -52,8 +54,21 @@
 
 					BufferedImage var15 = new BufferedImage(var1, var2, 1);
 					var15.setRGB(0, 0, var1, var2, field_4288_d, 0, var1);
+					
+					String additional = "";
+					if(opt == 1 || opt == 0 && copyPressed){
+						try {
+							TransferableImage trans = new TransferableImage(var15);
+							Toolkit.getDefaultToolkit().getSystemClipboard().setContents(trans, (ClipboardOwner)null);
+							additional = " and copied it to the clipboard";
+						} catch (Exception e) {
+							e.printStackTrace();
+						}
+					}
+					
+					
 					ImageIO.write(var15, "png", var5);
-					return "Saved screenshot as " + var5.getName();
+					return "Saved screenshot as " + var5.getName() + additional;
 				}
 
 				++var6;
--- /dev/null
+++ net/minecraft/src/Translation.java
@@ -1,0 +1,88 @@
+package net.minecraft.src;
+
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.FileReader;
+import java.io.FileWriter;
+import java.io.PrintWriter;
+import java.io.InputStreamReader;
+import java.util.ArrayList;
+
+public class Translation{
+	public String name;
+	public ArrayList<String> keys = new ArrayList<String>();
+	public ArrayList<String> trads = new ArrayList<String>();
+	
+	public static final Translation english = Translation.loadFromResource("/translation.txt");
+	
+	public Translation(String n){
+		this.name = n;
+	}
+	
+	public String translate(String key){
+		if(key == null){
+			return "";
+		}
+		for(int i = 0; i < this.keys.size(); i++){
+			if(this.keys.get(i).equals(key)){
+				return this.trads.get(i);
+			}
+		}
+		if(this != Translation.english){
+			String s = Translation.english.translate(key);
+			if (s != key){
+				return s;
+			}
+		}
+		return key;
+	}
+	
+	public static Translation loadFromFile(String filePath, File mcPath){
+		File keyFile = new File(mcPath, filePath);
+		if(!keyFile.exists()){
+			return null;
+		}
+		try{
+			BufferedReader br = new BufferedReader(new FileReader(keyFile));
+			return load(br);
+		} catch(Exception e){
+			e.printStackTrace();
+		}
+		return new Translation("def");
+	}
+		
+	public static Translation loadFromResource(String filePath){
+		BufferedReader br = new BufferedReader(new InputStreamReader(Translation.class.getResourceAsStream(filePath)));
+		return load(br);
+	}
+	
+	public static Translation load(BufferedReader b){
+		Translation output = new Translation("def");
+		try{
+			String s = "";
+			while(true){
+				s = b.readLine();
+				if(s == null){
+					b.close();
+					break;
+				}
+				
+				String[] l = s.split(":");
+				if(l.length != 2){
+					continue;
+				}
+				if(l[0].equals("name")){
+					System.out.println("Loading translation " + l[1]);
+					output.name = l[1];
+				} else {
+					output.keys.add(l[0]);
+					output.trads.add(l[1]);
+				}
+			}
+		} catch(Exception e){
+			System.out.println("Problem loading translation");
+			e.printStackTrace();
+		}
+		return output;
+	}
+}
--- /dev/null
+++ ibxm/Module.java
@@ -1,0 +1,148 @@
+package ibxm;
+
+public class Module {
+	public String song_title = "ibxm alpha 51 (c)2008 mumart@gmail.com";
+	public boolean linear_periods;
+	public boolean fast_volume_slides;
+	public boolean pal;
+	public int global_volume;
+	public int channel_gain;
+	public int default_speed;
+	public int default_tempo;
+	public int restart_sequence_index;
+	private int[] initial_panning;
+	private int[] sequence;
+	private Pattern[] patterns;
+	private Instrument[] instruments;
+	private Pattern default_pattern;
+	private Instrument default_instrument;
+
+	public Module() {
+		this.set_num_channels(1);
+		this.set_sequence_length(1);
+		this.set_num_patterns(0);
+		this.set_num_instruments(0);
+		this.default_pattern = new Pattern();
+		this.default_instrument = new Instrument();
+	}
+
+	public int get_num_channels() {
+		return this.initial_panning.length;
+	}
+
+	public void set_num_channels(int num_channels) {
+		if(num_channels < 1) {
+			num_channels = 1;
+		}
+
+		this.initial_panning = new int[num_channels];
+	}
+
+	public int get_initial_panning(int channel) {
+		int panning = 128;
+		if(channel >= 0 && channel < this.initial_panning.length) {
+			panning = this.initial_panning[channel];
+		}
+
+		return panning;
+	}
+
+	public void set_initial_panning(int channel, int panning) {
+		if(channel >= 0 && channel < this.initial_panning.length) {
+			this.initial_panning[channel] = panning;
+		}
+
+	}
+
+	public int get_sequence_length() {
+		return this.sequence.length;
+	}
+
+	public void set_sequence_length(int sequence_length) {
+		if(sequence_length < 0) {
+			sequence_length = 0;
+		}
+
+		this.sequence = new int[sequence_length];
+	}
+
+	public void set_sequence(int sequence_index, int pattern_index) {
+		if(sequence_index >= 0 && sequence_index < this.sequence.length) {
+			this.sequence[sequence_index] = pattern_index;
+		}
+
+	}
+
+	public int get_num_patterns() {
+		return this.patterns.length;
+	}
+
+	public void set_num_patterns(int num_patterns) {
+		if(num_patterns < 0) {
+			num_patterns = 0;
+		}
+
+		this.patterns = new Pattern[num_patterns];
+	}
+
+	public Pattern get_pattern_from_sequence(int sequence_index) {
+		Pattern pattern = this.default_pattern;
+		if(sequence_index >= 0 && sequence_index < this.sequence.length) {
+			pattern = this.get_pattern(this.sequence[sequence_index]);
+		}
+
+		return pattern;
+	}
+
+	public Pattern get_pattern(int pattern_index) {
+		Pattern pattern = null;
+		if(pattern_index >= 0 && pattern_index < this.patterns.length) {
+			pattern = this.patterns[pattern_index];
+		}
+
+		if(pattern == null) {
+			pattern = this.default_pattern;
+		}
+
+		return pattern;
+	}
+
+	public void set_pattern(int pattern_index, Pattern pattern) {
+		if(pattern_index >= 0 && pattern_index < this.patterns.length) {
+			this.patterns[pattern_index] = pattern;
+		}
+
+	}
+
+	public int get_num_instruments() {
+		return this.instruments.length;
+	}
+
+	public void set_num_instruments(int num_instruments) {
+		if(num_instruments < 0) {
+			num_instruments = 0;
+		}
+
+		this.instruments = new Instrument[num_instruments];
+	}
+
+	public Instrument get_instrument(int instrument_index) {
+		Instrument instrument = null;
+		if(instrument_index > 0 && instrument_index <= this.instruments.length) {
+			instrument = this.instruments[instrument_index - 1];
+		}
+
+		if(instrument == null) {
+			instrument = this.default_instrument;
+		}
+
+		return instrument;
+	}
+
+	public void set_instrument(int instrument_index, Instrument instrument) {
+		if(instrument_index > 0 && instrument_index <= this.instruments.length) {
+			this.instruments[instrument_index - 1] = instrument;
+		}
+
+	}
+}
--- /dev/null
+++ net/minecraft/src/ItemSpecialFood.java
@@ -1,0 +1,25 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class ItemSpecialFood extends ItemFood {
+	private int attribute;
+
+	public ItemSpecialFood(int var1, int var2, int a) {
+		super(var1, var2);
+		this.attribute = a;
+	}
+
+	public ItemStack onItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
+		if(this.attribute == 0){
+			Random rand = new Random();
+			int i = rand.nextInt(1200) + 3600;
+			var3.fireInmunityTime = i;			
+			i = rand.nextInt(600) + 600;
+			var3.arrowInmunityTime = i;
+		}
+		--var1.stackSize;
+		var3.heal(this.healAmount);
+		return var1;
+	}
+}
--- /dev/null
+++ ibxm/Player.java
@@ -1,0 +1,139 @@
+package ibxm;
+
+import java.io.DataInputStream;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import javax.sound.sampled.AudioFormat;
+import javax.sound.sampled.AudioSystem;
+import javax.sound.sampled.LineUnavailableException;
+import javax.sound.sampled.SourceDataLine;
+
+public class Player {
+	private Thread play_thread;
+	private IBXM ibxm = new IBXM('\ubb80');
+	private Module module;
+	private int song_duration;
+	private int play_position;
+	private boolean running;
+	private boolean loop;
+	private byte[] output_buffer;
+	private SourceDataLine output_line;
+
+	public static void main(String[] args) throws Exception {
+		if(args.length < 1) {
+			System.err.println("Usage: java ibxm.Player <module file>");
+			System.exit(0);
+		}
+
+		FileInputStream file_input_stream = new FileInputStream(args[0]);
+		Player player = new Player();
+		player.set_module(load_module(file_input_stream));
+		file_input_stream.close();
+		player.play();
+	}
+
+	public static Module load_module(InputStream input) throws IllegalArgumentException, IOException {
+		DataInputStream data_input_stream = new DataInputStream(input);
+		byte[] xm_header = new byte[60];
+		data_input_stream.readFully(xm_header);
+		if(FastTracker2.is_xm(xm_header)) {
+			return FastTracker2.load_xm(xm_header, data_input_stream);
+		} else {
+			byte[] s3m_header = new byte[96];
+			System.arraycopy(xm_header, 0, s3m_header, 0, 60);
+			data_input_stream.readFully(s3m_header, 60, 36);
+			if(ScreamTracker3.is_s3m(s3m_header)) {
+				return ScreamTracker3.load_s3m(s3m_header, data_input_stream);
+			} else {
+				byte[] mod_header = new byte[1084];
+				System.arraycopy(s3m_header, 0, mod_header, 0, 96);
+				data_input_stream.readFully(mod_header, 96, 988);
+				return ProTracker.load_mod(mod_header, data_input_stream);
+			}
+		}
+	}
+
+	public Player() throws LineUnavailableException {
+		this.set_loop(true);
+		this.output_line = AudioSystem.getSourceDataLine(new AudioFormat(48000.0F, 16, 2, true, true));
+		this.output_buffer = new byte[4096];
+	}
+
+	public void set_module(Module m) {
+		if(m != null) {
+			this.module = m;
+		}
+
+		this.stop();
+		this.ibxm.set_module(this.module);
+		this.song_duration = this.ibxm.calculate_song_duration();
+	}
+
+	public void set_loop(boolean loop) {
+		this.loop = loop;
+	}
+
+	public void play() {
+		this.stop();
+		this.play_thread = new Thread(new Player.Driver());
+		this.play_thread.start();
+	}
+
+	public void stop() {
+		this.running = false;
+		if(this.play_thread != null) {
+			try {
+				this.play_thread.join();
+			} catch (InterruptedException var2) {
+			}
+		}
+
+	}
+
+	static class SyntheticClass_1 {
+	}
+
+	private class Driver implements Runnable {
+		private Driver() {
+		}
+
+		public void run() {
+			if(!Player.this.running) {
+				try {
+					Player.this.output_line.open();
+					Player.this.output_line.start();
+					Player.this.play_position = 0;
+					Player.this.running = true;
+
+					while(Player.this.running) {
+						int lue = Player.this.song_duration - Player.this.play_position;
+						if(lue > 1024) {
+							lue = 1024;
+						}
+
+						Player.this.ibxm.get_audio(Player.this.output_buffer, lue);
+						Player.this.output_line.write(Player.this.output_buffer, 0, lue * 4);
+						Player.this.play_position = lue;
+						if(Player.this.play_position >= Player.this.song_duration) {
+							Player.this.play_position = 0;
+							if(!Player.this.loop) {
+								Player.this.running = false;
+							}
+						}
+					}
+
+					Player.this.output_line.drain();
+					Player.this.output_line.close();
+				} catch (LineUnavailableException var2) {
+					var2.printStackTrace();
+				}
+
+			}
+		}
+
+		Driver(Player.SyntheticClass_1 x1) {
+			this();
+		}
+	}
+}
--- net/minecraft/src/ItemStack.java
+++ net/minecraft/src/ItemStack.java
@@ -52,6 +52,21 @@
 	public Item getItem() {
 		return Item.itemsList[this.itemID];
 	}
+	
+	public boolean silks() {
+		return this.getItem().ability == 1;
+	}
+	
+	public String getName(Translation t){
+		String o = "";
+		if(this.itemID < 1){
+			return o;
+		}
+		if(this.itemID < 256){
+			return t.translate(Block.blocksList[this.itemID].key);
+		}
+		return t.translate(Item.itemsList[this.itemID].key);
+	}
 
 	public int getIconIndex() {
 		return this.getItem().getIconIndex(this);
@@ -65,6 +80,10 @@
 		return this.getItem().getStrVsBlock(this, var1);
 	}
 
+	public float getStrVsBlockNether(Block var1) {
+		return this.getItem().getStrVsBlockNether(this, var1);
+	}
+
 	public ItemStack useItemRightClick(World var1, EntityPlayer var2) {
 		return this.getItem().onItemRightClick(this, var1, var2);
 	}
@@ -109,6 +128,10 @@
 
 	public void hitBlock(int var1, int var2, int var3, int var4) {
 		Item.itemsList[this.itemID].hitBlock(this, var1, var2, var3, var4);
+	}
+
+	public void hitBlockNether(int var1, int var2, int var3, int var4) {
+		Item.itemsList[this.itemID].hitBlockNether(this, var1, var2, var3, var4);
 	}
 
 	public int getDamageVsEntity(Entity var1) {
--- net/minecraft/src/Entity.java
+++ net/minecraft/src/Entity.java
@@ -71,6 +71,8 @@
 	public boolean field_9300_bu;
 	public boolean field_9299_bv;
 	public boolean field_12240_bw;
+	public int fireInmunityTime = 0;
+	public int arrowInmunityTime = 0;
 
 	public Entity(World var1) {
 		this.worldObj = var1;
@@ -199,7 +201,7 @@
 					this.fire = 0;
 				}
 			} else {
-				if(this.fire % 20 == 0) {
+				if(this.fire % 20 == 0 && this.fireInmunityTime < 1) {
 					this.canAttackEntity((Entity)null, 1);
 				}
 
@@ -209,6 +211,7 @@
 
 		if(this.handleLavaMovement()) {
 			this.func_4038_J();
+			this.fallDistance = 0.0F;
 		}
 
 		if(this.posY < -64.0D) {
@@ -216,11 +219,19 @@
 		}
 
 		this.field_862_c = false;
+		if(fireInmunityTime > 0){
+			fireInmunityTime--;
+		}
+		if(arrowInmunityTime > 0){
+			arrowInmunityTime--;
+		}
 	}
 
 	protected void func_4038_J() {
 		if(!this.isImmuneToFire) {
-			this.canAttackEntity((Entity)null, 4);
+			if(this.fireInmunityTime < 1){
+				this.canAttackEntity((Entity)null, 4);
+			}
 			this.fire = 600;
 		}
 
@@ -474,7 +485,7 @@
 	}
 
 	protected void func_355_a(int var1) {
-		if(!this.isImmuneToFire) {
+		if(!this.isImmuneToFire && this.fireInmunityTime < 1) {
 			this.canAttackEntity((Entity)null, var1);
 		}
 
@@ -635,6 +646,13 @@
 	protected void func_9281_M() {
 		this.field_9294_aL = true;
 	}
+	
+	public boolean canAttackExtended(Entity var1, int var2, int specifier){
+		if(this.arrowInmunityTime > 0 && specifier == 1){
+			return false;
+		}
+		return this.canAttackEntity(var1, var2);
+	}
 
 	public boolean canAttackEntity(Entity var1, int var2) {
 		this.func_9281_M();
@@ -688,6 +706,7 @@
 		var1.setFloat("FallDistance", this.fallDistance);
 		var1.setShort("Fire", (short)this.fire);
 		var1.setShort("Air", (short)this.air);
+		var1.setShort("FireInmunityTime", (short)this.fireInmunityTime);
 		var1.setBoolean("OnGround", this.onGround);
 		this.writeEntityToNBT(var1);
 	}
@@ -708,6 +727,7 @@
 		this.fallDistance = var1.getFloat("FallDistance");
 		this.fire = var1.getShort("Fire");
 		this.air = var1.getShort("Air");
+		this.fireInmunityTime = var1.getShort("FireInmunityTime");
 		this.onGround = var1.getBoolean("OnGround");
 		this.setPosition(this.posX, this.posY, this.posZ);
 		this.readEntityFromNBT(var1);
--- /dev/null
+++ ibxm/IBXM.java
@@ -1,0 +1,339 @@
+package ibxm;
+
+public class IBXM {
+	public static final String VERSION = "ibxm alpha 51 (c)2008 mumart@gmail.com";
+	public static final int FP_SHIFT = 15;
+	public static final int FP_ONE = 32768;
+	public static final int FP_MASK = 32767;
+	private int sampling_rate;
+	private int resampling_quality;
+	private int volume_ramp_length;
+	private int tick_length_samples;
+	private int current_tick_samples;
+	private int[] mixing_buffer;
+	private int[] volume_ramp_buffer;
+	private Module module;
+	private Channel[] channels;
+	private int[] global_volume;
+	private int[] note;
+	private int current_sequence_index;
+	private int next_sequence_index;
+	private int current_row;
+	private int next_row;
+	private int tick_counter;
+	private int ticks_per_row;
+	private int pattern_loop_count;
+	private int pattern_loop_channel;
+
+	public IBXM(int sample_rate) {
+		if(sample_rate < 8000) {
+			sample_rate = 8000;
+		}
+
+		this.sampling_rate = sample_rate;
+		this.volume_ramp_length = this.sampling_rate >> 10;
+		this.volume_ramp_buffer = new int[this.volume_ramp_length * 2];
+		this.mixing_buffer = new int[this.sampling_rate / 6];
+		this.global_volume = new int[1];
+		this.note = new int[5];
+		this.set_module(new Module());
+		this.set_resampling_quality(1);
+	}
+
+	public void set_module(Module m) {
+		this.module = m;
+		this.channels = new Channel[this.module.get_num_channels()];
+
+		for(int channel_idx = 0; channel_idx < this.channels.length; ++channel_idx) {
+			this.channels[channel_idx] = new Channel(this.module, this.sampling_rate, this.global_volume);
+		}
+
+		this.set_sequence_index(0, 0);
+	}
+
+	public void set_resampling_quality(int quality) {
+		this.resampling_quality = quality;
+	}
+
+	public int calculate_song_duration() {
+		this.set_sequence_index(0, 0);
+		this.next_tick();
+
+		int song_duration;
+		for(song_duration = this.tick_length_samples; !this.next_tick(); song_duration += this.tick_length_samples) {
+		}
+
+		this.set_sequence_index(0, 0);
+		return song_duration;
+	}
+
+	public void set_sequence_index(int sequence_index, int row) {
+		this.global_volume[0] = 64;
+
+		for(int channel_idx = 0; channel_idx < this.channels.length; ++channel_idx) {
+			this.channels[channel_idx].reset();
+			this.channels[channel_idx].set_panning(this.module.get_initial_panning(channel_idx));
+		}
+
+		this.set_global_volume(this.module.global_volume);
+		this.set_speed(6);
+		this.set_speed(this.module.default_speed);
+		this.set_tempo(125);
+		this.set_tempo(this.module.default_tempo);
+		this.pattern_loop_count = -1;
+		this.next_sequence_index = sequence_index;
+		this.next_row = row;
+		this.tick_counter = 0;
+		this.current_tick_samples = this.tick_length_samples;
+		this.clear_vol_ramp_buffer();
+	}
+
+	public void seek(int sample_position) {
+		this.set_sequence_index(0, 0);
+		this.next_tick();
+
+		while(sample_position > this.tick_length_samples) {
+			sample_position -= this.tick_length_samples;
+			this.next_tick();
+		}
+
+		this.mix_tick();
+		this.current_tick_samples = sample_position;
+	}
+
+	public void get_audio(byte[] output_buffer, int frames) {
+		int output_idx = 0;
+
+		while(frames > 0) {
+			int count = this.tick_length_samples - this.current_tick_samples;
+			if(count > frames) {
+				count = frames;
+			}
+
+			int mix_idx = this.current_tick_samples << 1;
+
+			for(int mix_end = mix_idx + (count << 1) - 1; mix_idx <= mix_end; ++mix_idx) {
+				int amplitude = this.mixing_buffer[mix_idx];
+				if(amplitude > Short.MAX_VALUE) {
+					amplitude = Short.MAX_VALUE;
+				}
+
+				if(amplitude < Short.MIN_VALUE) {
+					amplitude = Short.MIN_VALUE;
+				}
+
+				output_buffer[output_idx] = (byte)(amplitude >> 8);
+				output_buffer[output_idx + 1] = (byte)(amplitude & 255);
+				output_idx += 2;
+			}
+
+			this.current_tick_samples = mix_idx >> 1;
+			frames -= count;
+			if(frames > 0) {
+				this.next_tick();
+				this.mix_tick();
+				this.current_tick_samples = 0;
+			}
+		}
+
+	}
+
+	private void mix_tick() {
+		int mix_idx = 0;
+
+		int mix_len;
+		for(mix_len = this.tick_length_samples + this.volume_ramp_length << 1; mix_idx < mix_len; ++mix_idx) {
+			this.mixing_buffer[mix_idx] = 0;
+		}
+
+		for(int channel_idx = 0; channel_idx < this.channels.length; ++channel_idx) {
+			mix_len = this.tick_length_samples + this.volume_ramp_length;
+			this.channels[channel_idx].resample(this.mixing_buffer, 0, mix_len, this.resampling_quality);
+		}
+
+		this.volume_ramp();
+	}
+
+	private boolean next_tick() {
+		int channel_idx;
+		for(channel_idx = 0; channel_idx < this.channels.length; ++channel_idx) {
+			this.channels[channel_idx].update_sample_idx(this.tick_length_samples);
+		}
+
+		--this.tick_counter;
+		boolean song_end;
+		if(this.tick_counter <= 0) {
+			this.tick_counter = this.ticks_per_row;
+			song_end = this.next_row();
+		} else {
+			for(channel_idx = 0; channel_idx < this.channels.length; ++channel_idx) {
+				this.channels[channel_idx].tick();
+			}
+
+			song_end = false;
+		}
+
+		return song_end;
+	}
+
+	private boolean next_row() {
+		boolean song_end = false;
+		if(this.next_sequence_index < 0) {
+			this.next_sequence_index = 0;
+			this.next_row = 0;
+		}
+
+		if(this.next_sequence_index >= this.module.get_sequence_length()) {
+			song_end = true;
+			this.next_sequence_index = this.module.restart_sequence_index;
+			if(this.next_sequence_index < 0) {
+				this.next_sequence_index = 0;
+			}
+
+			if(this.next_sequence_index >= this.module.get_sequence_length()) {
+				this.next_sequence_index = 0;
+			}
+
+			this.next_row = 0;
+		}
+
+		if(this.next_sequence_index < this.current_sequence_index) {
+			song_end = true;
+		}
+
+		if(this.next_sequence_index == this.current_sequence_index && this.next_row <= this.current_row && this.pattern_loop_count < 0) {
+			song_end = true;
+		}
+
+		this.current_sequence_index = this.next_sequence_index;
+		Pattern pattern = this.module.get_pattern_from_sequence(this.current_sequence_index);
+		if(this.next_row < 0 || this.next_row >= pattern.num_rows) {
+			this.next_row = 0;
+		}
+
+		this.current_row = this.next_row;
+		this.next_row = this.current_row + 1;
+		if(this.next_row >= pattern.num_rows) {
+			this.next_sequence_index = this.current_sequence_index + 1;
+			this.next_row = 0;
+		}
+
+		for(int channel_idx = 0; channel_idx < this.channels.length; ++channel_idx) {
+			pattern.get_note(this.note, this.current_row * this.channels.length + channel_idx);
+			int effect = this.note[3];
+			int effect_param = this.note[4];
+			this.channels[channel_idx].row(this.note[0], this.note[1], this.note[2], effect, effect_param);
+			switch(effect) {
+			case 11:
+				if(this.pattern_loop_count < 0) {
+					this.next_sequence_index = effect_param;
+					this.next_row = 0;
+				}
+				break;
+			case 13:
+				if(this.pattern_loop_count < 0) {
+					this.next_sequence_index = this.current_sequence_index + 1;
+					this.next_row = (effect_param >> 4) * 10 + (effect_param & 15);
+				}
+				break;
+			case 14:
+				switch(effect_param & 240) {
+				case 96:
+					if((effect_param & 15) == 0) {
+						this.channels[channel_idx].pattern_loop_row = this.current_row;
+					}
+
+					if(this.channels[channel_idx].pattern_loop_row < this.current_row) {
+						if(this.pattern_loop_count < 0) {
+							this.pattern_loop_count = effect_param & 15;
+							this.pattern_loop_channel = channel_idx;
+						}
+
+						if(this.pattern_loop_channel == channel_idx) {
+							if(this.pattern_loop_count == 0) {
+								this.channels[channel_idx].pattern_loop_row = this.current_row + 1;
+							} else {
+								this.next_row = this.channels[channel_idx].pattern_loop_row;
+								this.next_sequence_index = this.current_sequence_index;
+							}
+
+							--this.pattern_loop_count;
+						}
+					}
+					continue;
+				case 224:
+					this.tick_counter += this.ticks_per_row * (effect_param & 15);
+				default:
+					continue;
+				}
+			case 15:
+				if(effect_param < 32) {
+					this.set_speed(effect_param);
+					this.tick_counter = this.ticks_per_row;
+				} else {
+					this.set_tempo(effect_param);
+				}
+				break;
+			case 37:
+				this.set_speed(effect_param);
+				this.tick_counter = this.ticks_per_row;
+			}
+		}
+
+		return song_end;
+	}
+
+	private void set_global_volume(int volume) {
+		if(volume < 0) {
+			volume = 0;
+		}
+
+		if(volume > 64) {
+			volume = 64;
+		}
+
+		this.global_volume[0] = volume;
+	}
+
+	private void set_speed(int speed) {
+		if(speed > 0 && speed < 256) {
+			this.ticks_per_row = speed;
+		}
+
+	}
+
+	private void set_tempo(int bpm) {
+		if(bpm > 31 && bpm < 256) {
+			this.tick_length_samples = this.sampling_rate * 5 / (bpm * 2);
+		}
+
+	}
+
+	private void volume_ramp() {
+		boolean sample = false;
+		int volume_ramp_delta = -Short.MIN_VALUE / this.volume_ramp_length;
+		int volume = 0;
+		int ramp_idx = 0;
+		int next_idx = 2 * this.tick_length_samples;
+
+		for(int ramp_end = this.volume_ramp_length * 2 - 1; ramp_idx <= ramp_end; ramp_idx += 2) {
+			int sample1 = this.volume_ramp_buffer[ramp_idx] * (-Short.MIN_VALUE - volume) >> 15;
+			this.mixing_buffer[ramp_idx] = sample1 + (this.mixing_buffer[ramp_idx] * volume >> 15);
+			this.volume_ramp_buffer[ramp_idx] = this.mixing_buffer[next_idx + ramp_idx];
+			sample1 = this.volume_ramp_buffer[ramp_idx + 1] * (-Short.MIN_VALUE - volume) >> 15;
+			this.mixing_buffer[ramp_idx + 1] = sample1 + (this.mixing_buffer[ramp_idx + 1] * volume >> 15);
+			this.volume_ramp_buffer[ramp_idx + 1] = this.mixing_buffer[next_idx + ramp_idx + 1];
+			volume += volume_ramp_delta;
+		}
+
+	}
+
+	private void clear_vol_ramp_buffer() {
+		int ramp_idx = 0;
+
+		for(int ramp_end = this.volume_ramp_length * 2 - 1; ramp_idx <= ramp_end; ++ramp_idx) {
+			this.volume_ramp_buffer[ramp_idx] = 0;
+		}
+
+	}
+}
--- /dev/null
+++ ibxm/Envelope.java
@@ -1,0 +1,129 @@
+package ibxm;
+
+public class Envelope {
+	public boolean sustain;
+	public boolean looped;
+	private int sustain_tick;
+	private int loop_start_tick;
+	private int loop_end_tick;
+	private int[] ticks;
+	private int[] ampls;
+
+	public Envelope() {
+		this.set_num_points(1);
+	}
+
+	public void set_num_points(int num_points) {
+		if(num_points <= 0) {
+			num_points = 1;
+		}
+
+		this.ticks = new int[num_points];
+		this.ampls = new int[num_points];
+		this.set_point(0, 0, 0, false);
+	}
+
+	public void set_point(int point, int tick, int ampl, boolean delta) {
+		if(point >= 0 && point < this.ticks.length) {
+			if(point == 0) {
+				tick = 0;
+			}
+
+			if(point > 0) {
+				if(delta) {
+					tick += this.ticks[point - 1];
+				}
+
+				if(tick <= this.ticks[point - 1]) {
+					System.out.println("Envelope: Point not valid (" + tick + " <= " + this.ticks[point - 1] + ")");
+					tick = this.ticks[point - 1] + 1;
+				}
+			}
+
+			this.ticks[point] = tick;
+			this.ampls[point] = ampl;
+			++point;
+
+			while(point < this.ticks.length) {
+				this.ticks[point] = this.ticks[point - 1] + 1;
+				this.ampls[point] = 0;
+				++point;
+			}
+		}
+
+	}
+
+	public void set_sustain_point(int point) {
+		if(point < 0) {
+			point = 0;
+		}
+
+		if(point >= this.ticks.length) {
+			point = this.ticks.length - 1;
+		}
+
+		this.sustain_tick = this.ticks[point];
+	}
+
+	public void set_loop_points(int start, int end) {
+		if(start < 0) {
+			start = 0;
+		}
+
+		if(start >= this.ticks.length) {
+			start = this.ticks.length - 1;
+		}
+
+		if(end < start || end >= this.ticks.length) {
+			end = start;
+		}
+
+		this.loop_start_tick = this.ticks[start];
+		this.loop_end_tick = this.ticks[end];
+	}
+
+	public int next_tick(int tick, boolean key_on) {
+		++tick;
+		if(this.looped && tick >= this.loop_end_tick) {
+			tick = this.loop_start_tick;
+		}
+
+		if(this.sustain && key_on && tick >= this.sustain_tick) {
+			tick = this.sustain_tick;
+		}
+
+		return tick;
+	}
+
+	public int calculate_ampl(int tick) {
+		int ampl = this.ampls[this.ticks.length - 1];
+		if(tick < this.ticks[this.ticks.length - 1]) {
+			int point = 0;
+
+			for(int idx = 1; idx < this.ticks.length; ++idx) {
+				if(this.ticks[idx] <= tick) {
+					point = idx;
+				}
+			}
+
+			int delta_t = this.ticks[point + 1] - this.ticks[point];
+			int delta_a = this.ampls[point + 1] - this.ampls[point];
+			ampl = (delta_a << 15) / delta_t;
+			ampl = ampl * (tick - this.ticks[point]) >> 15;
+			ampl += this.ampls[point];
+		}
+
+		return ampl;
+	}
+
+	public void dump() {
+		for(int idx = 0; idx < this.ticks.length; ++idx) {
+			System.out.println(this.ticks[idx] + ", " + this.ampls[idx]);
+		}
+
+		for(int tick = 0; tick < 222; ++tick) {
+			System.out.print(this.calculate_ampl(tick) + ", ");
+		}
+
+	}
+}
--- net/minecraft/src/RecipesIngots.java
+++ net/minecraft/src/RecipesIngots.java
@@ -1,7 +1,7 @@
 package net.minecraft.src;
 
 public class RecipesIngots {
-	private Object[][] field_1198_a = new Object[][]{{Block.blockGold, Item.ingotGold}, {Block.blockSteel, Item.ingotIron}, {Block.blockDiamond, Item.diamond}};
+	private Object[][] field_1198_a = new Object[][]{{Block.blockGold, Item.ingotGold}, {Block.blockSteel, Item.ingotIron}, {Block.blockDiamond, Item.diamond}, {Block.blockPlumbum, Item.plumbum}};
 
 	public void func_810_a(CraftingManager var1) {
 		for(int var2 = 0; var2 < this.field_1198_a.length; ++var2) {
--- /dev/null
+++ net/minecraft/src/Agrupation.java
@@ -1,0 +1,55 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class Agrupation {
+	
+	private int[] elements;
+	
+	public static final Agrupation mantainFire = new Agrupation(Block.bloodStone.blockID, Block.orePlumbum.blockID);
+	public static final Agrupation rails = new Agrupation(Block.minecartTrack.blockID, Block.minecartTrackGold.blockID);
+	public static final Agrupation sheepEat = new Agrupation(Block.grass.blockID, Block.leaves.blockID);
+	public static final Agrupation playerSpawn = new Agrupation(Block.sand.blockID);
+	public static final Agrupation leavesStay = new Agrupation(Block.wood.blockID);
+	public static final Agrupation titleBlocks = new Agrupation(Block.stone.blockID, Block.lightStone.blockID, Block.bloodStone.blockID, Block.dirt.blockID, Block.cobblestone.blockID, Block.bedrock.blockID, /* Block.sponge.blockID, */ Block.stairDouble.blockID, Block.bookShelf.blockID);
+	public static final Agrupation pyramidReplace = new Agrupation(0, Block.snow.blockID, Block.blockIce.blockID, Block.waterStill.blockID, Block.waterMoving.blockID);
+	public static final Agrupation pyramidGenerate = new Agrupation(Block.sandstone.blockID, Block.brick.blockID);
+	
+	public Agrupation(int... elems){
+		this.elements = new int[elems.length];
+		for(int i = 0; i < elems.length; i++){
+			this.elements[i] = elems[i];
+		}
+	}
+	
+	public boolean contains(int index){
+		for (int i = 0; i < this.elements.length; i++){
+			if (this.elements[i] == index){
+				return true;
+			}
+		}
+		return false;
+	}	
+	
+	public boolean contains(Block b){
+		for (int i = 0; i < this.elements.length; i++){
+			if (this.elements[i] == b.blockID){
+				return true;
+			}
+		}
+		return false;
+	}	
+	
+	public boolean contains(Item it){
+		for (int i = 0; i < this.elements.length; i++){
+			if (this.elements[i] == it.shiftedIndex){
+				return true;
+			}
+		}
+		return false;
+	}
+	
+	public int getRandom(Random rand){
+		return this.elements[rand.nextInt(this.elements.length)];
+	}
+}
--- net/minecraft/src/BlockFire.java
+++ net/minecraft/src/BlockFire.java
@@ -47,7 +47,7 @@
 	}
 
 	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		boolean var6 = var1.getBlockId(var2, var3 - 1, var4) == Block.bloodStone.blockID;
+		boolean var6 = Agrupation.mantainFire.contains(var1.getBlockId(var2, var3 - 1, var4));
 		int var7 = var1.getBlockMetadata(var2, var3, var4);
 		if(var7 < 15) {
 			var1.setBlockMetadataWithNotify(var2, var3, var4, var7 + 1);
--- /dev/null
+++ net/minecraft/src/WorldGenBones.java
@@ -1,0 +1,112 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class WorldGenBones extends WorldGenerator {
+	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
+		if(var1.getBlockId(var3, var4, var5) != 0) {
+			return false;
+		} else if(var1.getBlockId(var3, var4 - 1, var5) != Block.bloodStone.blockID) {
+			return false;
+		} else {
+			int whatToGen = var2.nextInt(3);
+			if(whatToGen == 0){
+				rib(var1, var2, var3, var4, var5, var2.nextInt(4));
+			} else if(whatToGen == 1){
+				multipleRibs(var1, var2, var3, var4, var5);
+			} else if(whatToGen == 2){
+				int num = var2.nextInt(3) + 2;
+				int direction = var2.nextInt(4);
+				int size = var2.nextInt(3) + 3;
+				multipleRibsDir(var1, var2, var3, var4, var5, direction, num, size);
+				if (direction == 0){
+					multipleRibsDir(var1, var2, var3 + 4, var4, var5 + num * 2 - 2, reverse(direction), num, size);
+				} else if (direction == 1){
+					multipleRibsDir(var1, var2, var3 - 4, var4, var5 - num * 2 + 2, reverse(direction), num, size);
+				} else if (direction == 2){
+					multipleRibsDir(var1, var2, var3 + num * 2 - 2, var4, var5 + 4, reverse(direction), num, size);
+				} else if (direction == 3){
+					multipleRibsDir(var1, var2, var3 - num * 2 + 2, var4, var5 - 4, reverse(direction), num, size);
+				}
+			}
+			return true;
+		}
+	}
+	
+	public static int reverse(int d){
+		if(d == 1 || d == 3){
+			return d - 1;
+		}
+		return d + 1;
+	}
+	
+	public void multipleRibs(World var1, Random var2, int var3, int var4, int var5){
+		int num = var2.nextInt(3) + 2;
+		int direction = var2.nextInt(4);
+		int size = var2.nextInt(3) + 3;
+		for(int i = 0; i < num; i++){
+			if (direction == 0){
+				ribSize(var1, var2, var3, var4, var5 + i * 2, direction, size);
+			} else if (direction == 1){
+				ribSize(var1, var2, var3, var4, var5 - i * 2, direction, size);
+			} else if (direction == 2){
+				ribSize(var1, var2, var3 + i * 2, var4, var5, direction, size);
+			} else if (direction == 3){
+				ribSize(var1, var2, var3 - i * 2, var4, var5, direction, size);
+			}
+		}
+	}
+		
+	public void multipleRibsDir(World var1, Random var2, int var3, int var4, int var5, int direction, int num, int size){
+		//System.out.println(var3 + "j" + var4 + "j" + var5 + "j" + direction + "j" + num + "j" + size);
+		for(int i = 0; i < num; i++){
+			if (direction == 0){
+				ribSize(var1, var2, var3, var4, var5 + i * 2, direction, size);
+			} else if (direction == 1){
+				ribSize(var1, var2, var3, var4, var5 - i * 2, direction, size);
+			} else if (direction == 2){
+				ribSize(var1, var2, var3 + i * 2, var4, var5, direction, size);
+			} else if (direction == 3){
+				ribSize(var1, var2, var3 - i * 2, var4, var5, direction, size);
+			}
+		}
+	}
+	
+	public void rib(World var1, Random var2, int var3, int var4, int var5, int direction){
+		if(var1.getBlockId(var3, var4 - 1, var5) != Block.bloodStone.blockID) {
+			return;
+		}
+		int g = var2.nextInt(3) + 3;
+		for(int i = 0; i < g; i++){
+			var1.setBlockWithNotify(var3, var4 + i, var5, Block.blockBone.blockID);
+		}
+		if(direction == 0){
+			var1.setBlockWithNotify(var3 + 1, var4 + g, var5, Block.blockBone.blockID);
+		} else if(direction == 1){
+			var1.setBlockWithNotify(var3 - 1, var4 + g, var5, Block.blockBone.blockID);
+		} else if(direction == 2){
+			var1.setBlockWithNotify(var3, var4 + g, var5 + 1, Block.blockBone.blockID);
+		} else if(direction == 3){
+			var1.setBlockWithNotify(var3, var4 + g, var5 - 1, Block.blockBone.blockID);
+		}
+	}	
+	
+	public void ribSize(World var1, Random var2, int var3, int var4, int var5, int direction, int g){ //g is size
+		if(var1.getBlockId(var3, var4 - 1, var5) != Block.bloodStone.blockID) {
+			return;
+		}
+		int b = Block.blockBone.blockID;
+		for(int i = 0; i < g; i++){
+			var1.setBlockWithNotify(var3, var4 + i, var5, b);
+		}
+		if(direction == 0){
+			var1.setBlockWithNotify(var3 + 1, var4 + g, var5, b);
+		} else if(direction == 1){
+			var1.setBlockWithNotify(var3 - 1, var4 + g, var5, b);
+		} else if(direction == 2){
+			var1.setBlockWithNotify(var3, var4 + g, var5 + 1, b);
+		} else if(direction == 3){
+			var1.setBlockWithNotify(var3, var4 + g, var5 - 1, b);
+		}
+	}
+}
--- /dev/null
+++ net/minecraft/src/MobIds.java
@@ -1,0 +1,69 @@
+package net.minecraft.src;
+
+public class MobIds {
+	public int id;
+	public World theWorld;
+	private int maxEntities = 22;
+	public Class[] mobIds = new Class[maxEntities];
+	public String[] mobNames = new String[maxEntities];
+	
+	public MobIds (World w) {
+		this.theWorld = w;
+		initializeIds();
+	}
+	
+	public void spawnByInt(int a, double x, double y, double z){
+		if(a < 0 && a > maxEntities - 1){
+			return;
+		}
+		
+		try {
+			Entity e = null;
+			Class<?> entityClass = mobIds[a]; // Access the class at the specified index
+			e = (Entity) entityClass.getDeclaredConstructor(World.class).newInstance(this.theWorld); // Create an instance of the class
+			e.setLocationAndAngles(x, y, z, 0.0F, 0.0F);
+			this.theWorld.entityJoinedWorld(e);
+		} catch (Exception f) {
+			f.printStackTrace();
+		}
+	}
+	
+	public String getName(int a){
+		if(a > -1 && a < maxEntities){
+			return mobNames[a];
+		}
+		return "";
+	}
+
+	public void initializeIds(){
+		set(0, null, "void");
+		set(1, EntityPig.class, "Pig");
+		set(2, EntityCow.class, "Cow");
+		set(3, EntitySheep.class, "Sheep");
+		set(4, EntityChicken.class, "Chicken");
+		set(5, EntityZombie.class, "Zombie");
+		set(6, EntitySkeleton.class, "Skeleton");
+		set(7, EntityCreeper.class, "Creeper");
+		set(8, EntitySpider.class, "Spider");
+		set(9, EntitySlime.class, "Slime");
+		set(10, EntityPigZombie.class, "Zombie Pigman");
+		set(11, EntityGhast.class, "Ghast");
+		set(12, EntityArrow.class, "Arrow");
+		set(13, EntityBoat.class, "Boat");
+		set(14, EntityFallingSand.class, "Falling Sand");
+		set(15, EntityFireball.class, "Fireball");
+		set(16, EntityFish.class, "Fish");
+		set(17, EntityMinecart.class, "Minecart");
+		set(18, EntityPainting.class, "Painting");
+		set(19, EntitySnowball.class, "Snowball");
+		set(20, EntityTNTPrimed.class, "Primed TNT");
+		set(21, EntitySlimeFire.class, "Fire Slime");
+		
+	}
+	
+	private void set(int a, Class<?> c, String s){
+		mobIds[a] = c;
+		mobNames[a] = s;
+	}	
+	
+}
--- net/minecraft/src/ItemArmor.java
+++ net/minecraft/src/ItemArmor.java
@@ -7,6 +7,8 @@
 	public final int armorType;
 	public final int damageReduceAmmount;
 	public final int renderIndex;
+	public static String[] materials = {"Leather", "Chain", "Steel", "Diamond", "Gold"};
+	public static String[] pieces = {"helmet", "plate", "legs", "boots"};
 
 	public ItemArmor(int var1, int var2, int var3, int var4) {
 		super(var1);
@@ -16,5 +18,6 @@
 		this.damageReduceAmmount = damageReduceAmmountArray[var4];
 		this.maxDamage = maxDamageArray[var4] * 3 << var2;
 		this.maxStackSize = 1;
+		this.setKey(pieces[this.armorType]+materials[this.renderIndex]);
 	}
 }
--- net/minecraft/src/WorldGenBigTree.java
+++ net/minecraft/src/WorldGenBigTree.java
@@ -18,6 +18,7 @@
 	int field_870_m = 12;
 	int field_869_n = 4;
 	int[][] field_868_o;
+	//
 
 	void func_521_a() {
 		this.field_877_f = (int)((double)this.field_878_e * this.field_876_g);
@@ -87,37 +88,42 @@
 		}
 	}
 
-	void func_523_a(int var1, int var2, int var3, float var4, byte var5, int var6) {
-		int var7 = (int)((double)var4 + 0.618D);
-		byte var8 = field_882_a[var5];
-		byte var9 = field_882_a[var5 + 3];
-		int[] var10 = new int[]{var1, var2, var3};
-		int[] var11 = new int[]{0, 0, 0};
-		int var12 = -var7;
-		int var13 = -var7;
+	void a(int var1, int var2, int var3, float var4, byte var5, int var6, boolean var7) {
+		int var8 = (int)((double)var4 + 0.618D);
+		byte var9 = field_882_a[var5];
+		byte var10 = field_882_a[var5 + 3];
+		int[] var11 = new int[]{var1, var2, var3};
+		int[] var12 = new int[]{0, 0, 0};
+		int var13 = -var8;
+		int var14 = -var8;
 
-		label32:
-		for(var11[var5] = var10[var5]; var12 <= var7; ++var12) {
-			var11[var8] = var10[var8] + var12;
-			var13 = -var7;
+		label44:
+		for(var12[var5] = var11[var5]; var13 <= var8; ++var13) {
+			var12[var9] = var11[var9] + var13;
+			int var15 = -var8;
 
 			while(true) {
 				while(true) {
-					if(var13 > var7) {
-						continue label32;
+					if(var15 > var8) {
+						continue label44;
 					}
 
-					double var15 = Math.sqrt(Math.pow((double)Math.abs(var12) + 0.5D, 2.0D) + Math.pow((double)Math.abs(var13) + 0.5D, 2.0D));
-					if(var15 > (double)var4) {
-						++var13;
+					double var16 = Math.sqrt(Math.pow((double)Math.abs(var13) + 0.5D, 2.0D) + Math.pow((double)Math.abs(var15) + 0.5D, 2.0D));
+					if(var16 > (double)var4) {
+						++var15;
 					} else {
-						var11[var9] = var10[var9] + var13;
-						int var14 = this.worldObj.getBlockId(var11[0], var11[1], var11[2]);
-						if(var14 != 0 && var14 != 18) {
-							++var13;
+						var12[var10] = var11[var10] + var15;
+						int var18 = this.worldObj.getBlockId(var12[0], var12[1], var12[2]);
+						if(var18 != 0 && var18 != 18) {
+							++var15;
 						} else {
-							this.worldObj.setBlock(var11[0], var11[1], var11[2], var6);
-							++var13;
+							if(var13 == 0 && var15 == 0 && var7) {
+								this.worldObj.setBlock(var12[0], var12[1], var12[2], 17);
+							} else {
+								this.worldObj.setBlock(var12[0], var12[1], var12[2], var6);
+							}
+
+							++var15;
 						}
 					}
 				}
@@ -155,7 +161,12 @@
 
 		for(int var5 = var2 + this.field_869_n; var4 < var5; ++var4) {
 			float var6 = this.func_526_b(var4 - var2);
-			this.func_523_a(var1, var4, var3, var6, (byte)1, 18);
+			boolean var7 = false;
+			if(var4 - var2 == this.field_869_n / 2) {
+				var7 = true;
+			}
+
+			this.a(var1, var4, var3, var6, (byte)1, 18, var7);
 		}
 
 	}
@@ -228,8 +239,8 @@
 			++var5[2];
 			++var6[2];
 			this.func_522_a(var5, var6, 17);
-			var5[0] += -1;
-			var6[0] += -1;
+			--var5[0];
+			--var6[0];
 			this.func_522_a(var5, var6, 17);
 		}
 
--- net/minecraft/src/ItemSnowball.java
+++ net/minecraft/src/ItemSnowball.java
@@ -3,7 +3,7 @@
 public class ItemSnowball extends Item {
 	public ItemSnowball(int var1) {
 		super(var1);
-		this.maxStackSize = 16;
+		this.maxStackSize = 64;
 	}
 
 	public ItemStack onItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
--- /dev/null
+++ net/minecraft/src/Option.java
@@ -1,0 +1,24 @@
+package net.minecraft.src;
+
+public class Option {
+	public String name;
+	public String displayName;
+	public boolean isActivated = true;
+	public int identifier;
+	public String desc = "";
+	
+	public Option(String n, String dn, int i){
+		this.name = n;
+		this.displayName = dn;
+		this.identifier = i;
+	}
+	
+	public String getDisplayString(Object Value){
+		return this.displayName + ": " + Value.toString();
+	}
+	
+	public Option setDesc(String d){
+		this.desc = d;
+		return this;
+	}
+}
--- /dev/null
+++ net/minecraft/src/GuiCreateWorld.java
@@ -1,0 +1,86 @@
+package net.minecraft.src;
+
+import java.io.File;
+import net.minecraft.client.Minecraft;
+import java.util.Random;
+
+public class GuiCreateWorld extends GuiScreen {
+	protected GuiScreen parentScreen;
+	protected String screenTitle = "Create world";
+	protected String worldname;
+	private boolean pressed = false;
+	protected GuiTextBox field;
+	private boolean cheats = false;
+	private boolean pyr = false;
+	private int gam = 0;
+
+	public GuiCreateWorld(GuiScreen var1, int w) {
+		this.parentScreen = var1;
+		this.worldname = "World" + w;
+	}
+
+	public void initGui() {
+		this.field = new GuiTextBox(this.width / 2 - 100, this.height / 6 + 48, "");
+		this.controlList.add(new GuiButton(0, this.width / 2 - 100, this.height / 6 + 144, "Create World"));
+		this.controlList.add(new GuiButton(1, this.width / 2 - 100, this.height / 6 + 168, "Back"));
+		
+		this.controlList.add(new GuiSmallButton(2, this.width / 2 - 155, this.height / 6 + 72, "Cheats: OFF"));
+		this.controlList.add(new GuiSmallButton(3, this.width / 2 + 5, this.height / 6 + 72, "Grass pyramids: OFF"));
+		this.controlList.add(new GuiSmallButton(4, this.width / 2 - 155, this.height / 6 + 96, "Gamemode: SURVIVAL"));
+		((GuiButton)this.controlList.get(3)).setDescription("This feature is just goofy and fun. May cause bugs or crashes");
+		((GuiButton)this.controlList.get(4)).setDescription("In development!");
+	}
+
+	protected void actionPerformed(GuiButton var1) {
+		if(var1.enabled) {
+			if(var1.id == 1) {
+				this.mc.displayGuiScreen(this.parentScreen);
+			} else if(var1.id == 0){
+				createWorld();
+			} else if(var1.id == 2){
+				this.cheats = !this.cheats;
+				((GuiButton)this.controlList.get(2)).displayString = "Cheats: " + (this.cheats ? "ON" : "OFF");
+			} else if(var1.id == 3){
+				this.pyr = !this.pyr;
+				((GuiButton)this.controlList.get(3)).displayString = "Grass pyramids: " + (this.pyr ? "ON" : "OFF");
+			} else if(var1.id == 4){
+				this.gam = this.gam == 0 ? 1 : 0;
+				((GuiButton)this.controlList.get(4)).displayString = "Gamemode: " + (this.gam == 0 ? "SURVIVAL" : "CREATIVE");
+			}
+		}
+	}
+	
+	public void updateScreen(){
+		this.field.countTick();
+	}
+	
+	public long getSeed(){
+		if(this.field.displayString.length() == 0 || this.field.displayString == ""){
+			return (new Random()).nextLong();
+		}
+		return Long.parseLong(this.field.displayString);
+	}
+
+	public void createWorld() {
+		this.mc.displayGuiScreen((GuiScreen)null);
+		if(!this.pressed) {
+			this.pressed = true;
+			this.mc.field_6327_b = new PlayerControllerSP(this.mc);
+			this.mc.func_6247_b(worldname, new WorldCreationSettings(this.getSeed(), this.cheats, this.pyr, this.gam));
+			this.mc.displayGuiScreen((GuiScreen)null);
+		}
+	}
+
+	public void drawScreen(int var1, int var2, float var3) {
+		this.drawDefaultBackground();
+		this.drawCenteredString(this.fontRenderer, this.screenTitle, this.width / 2, 20, 16777215);
+		this.drawString(this.fontRenderer, "Seed(leave blank for random):", this.width / 2 - 98, this.height / 6 + 32, 10526880);
+		this.field.drawTextBox(this.mc);
+		super.drawScreen(var1, var2, var3);
+	}
+	
+	protected void keyTyped(char var1, int var2){
+		this.field.handleKeyTypeOnlyNumbers(var1, var2);
+		super.keyTyped(var1, var2);
+	}
+}
--- net/minecraft/src/Gui.java
+++ net/minecraft/src/Gui.java
@@ -57,6 +57,12 @@
 	public void drawCenteredString(FontRenderer var1, String var2, int var3, int var4, int var5) {
 		var1.drawStringWithShadow(var2, var3 - var1.getStringWidth(var2) / 2, var4, var5);
 	}
+	
+	public void drawMultipleLines(FontRenderer var1, String[] var2, int var3, int var4, int var5){
+		for(int i = 0; i < var2.length; i++){
+			var1.drawStringWithShadow(var2[i], var3, var4 + i * 8, var5);
+		}
+	}
 
 	public void drawString(FontRenderer var1, String var2, int var3, int var4, int var5) {
 		var1.drawStringWithShadow(var2, var3, var4, var5);
@@ -72,5 +78,34 @@
 		var9.addVertexWithUV((double)(var1 + var5), (double)(var2 + 0), (double)this.zLevel, (double)((float)(var3 + var5) * var7), (double)((float)(var4 + 0) * var8));
 		var9.addVertexWithUV((double)(var1 + 0), (double)(var2 + 0), (double)this.zLevel, (double)((float)(var3 + 0) * var7), (double)((float)(var4 + 0) * var8));
 		var9.draw();
+	}
+	
+	public static String[] splitStringIntoChunks(String a, int n){
+		int c = 0;
+		String[] ret = new String[a.length() / n + 1];
+		for(int i = 0; i < a.length(); i++){
+			if(i % n == 0 && i != 0){
+				c++;
+			}
+			if(ret[c] == null){
+				ret[c] = "";
+			}
+			if(a.substring(i, i+1) != " "){
+				ret[c] = ret[c] + a.substring(i, i+1);
+			}
+		}
+		return ret;
+	}
+	
+	public static int getLengthOfLongestLine(String[] l, FontRenderer f){
+		int len = 0;
+		int s;
+		for(int i = 0; i < l.length; i++){
+			s = f.getStringWidth(l[i]);
+			if(s > len){
+				len = s;
+			}
+		}
+		return len;
 	}
 }
--- /dev/null
+++ net/minecraft/src/BlockGlowingObsidian.java
@@ -1,0 +1,35 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockGlowingObsidian extends BlockStone {
+	public BlockGlowingObsidian(int var1, int var2) {
+		super(var1, var2);
+	}
+
+	public int quantityDropped(Random var1) {
+		return 1;
+	}
+
+	public int idDropped(int var1, Random var2) {
+		return Block.glowingObsidian.blockID;
+	}
+	
+	public boolean blockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5) {
+		Random rand = new Random();
+		ItemStack v32 = var5.inventory.getCurrentItem();
+		if(v32 != null && v32.itemID == Item.gunpowder.shiftedIndex){
+			--var5.inventory.getCurrentItem().stackSize;
+			if(var5.inventory.getCurrentItem().stackSize < 1){
+				var5.inventory.mainInventory[var5.inventory.currentItem] = null;
+			}
+			var1.setBlockWithNotify(var2, var3, var4, 0); //set to air so the explosions doesnt happen inside a obsidian block
+			for(int var7 = 0; var7 < 32; ++var7) {
+				var1.spawnParticle("redsmoke", (double)var2 - 0.5D + Math.random() * 2.0D, (double)var3 - 0.5D + Math.random() * 2.0D, (double)var4 - 0.5D + Math.random() * 2.0D, 0.0D, 0.0D, 0.0D);
+			}
+			var1.func_12243_a((Entity)null, var2, var3, var4, 3.0F); //Explosion
+			var1.setBlockWithNotify(var2, var3, var4, Block.obsidian.blockID);
+		}
+		return false;
+	}
+}
--- /dev/null
+++ net/minecraft/src/GuiWatermark.java
@@ -1,0 +1,60 @@
+package net.minecraft.src;
+
+import net.minecraft.client.Minecraft;
+
+public class GuiWatermark extends GuiScreen {
+	private GuiScreen parentScreen;
+	protected String screenTitle = "Watermark";
+	protected GuiTextBox field;
+	private GameSettings options;
+
+	public GuiWatermark(GuiScreen var1, GameSettings var2) {
+		this.parentScreen = var1;
+		this.options = var2;
+	}
+
+	public void initGui() {
+		this.field = new GuiTextBox(this.width / 2 - 100, this.height / 6 + 48, this.options.watermark);
+		this.controlList.add(new GuiButton(0, this.width / 2 - 100, this.height / 6 + 72, "Done"));
+		this.controlList.add(new GuiButton(1, this.width / 2 - 100, this.height / 6 + 96, "Back"));
+		((GuiButton)this.controlList.get(0)).enabled = this.field.displayString.length() > 0;
+	}
+	
+	public void updateScreen(){
+		this.field.countTick();
+	}
+
+	protected void actionPerformed(GuiButton var1) {
+		if(var1.enabled) {
+			if(var1.id == 0) {
+				this.options.watermark = this.field.displayString;
+				this.mc.gameSettings.saveOptions();
+				this.mc.displayGuiScreen(this.parentScreen);
+			}
+			if(var1.id == 1) {
+				this.mc.displayGuiScreen(this.parentScreen);
+			}
+
+		}
+	}
+
+	public void drawScreen(int var1, int var2, float var3) {
+		this.drawDefaultBackground();
+		this.drawCenteredString(this.fontRenderer, this.screenTitle, this.width / 2, 20, 16777215);
+		this.drawString(this.fontRenderer, "Enter the watermark:", this.width / 2 - 98, this.height / 6 + 32, 10526880);
+		this.field.drawTextBox(this.mc);
+		super.drawScreen(var1, var2, var3);
+	}
+	
+	protected void keyTyped(char var1, int var2) {
+		if(var1 == 13) {
+			this.actionPerformed((GuiButton)this.controlList.get(0));
+		} else if(var2 == 1){
+			this.actionPerformed((GuiButton)this.controlList.get(1));
+		} else {
+			this.field.handleKeyType(var1, var2);
+		}
+
+		((GuiButton)this.controlList.get(0)).enabled = this.field.displayString.length() > 0;
+	}
+}
--- net/minecraft/src/ItemAxe.java
+++ net/minecraft/src/ItemAxe.java
@@ -1,7 +1,7 @@
 package net.minecraft.src;
 
 public class ItemAxe extends ItemTool {
-	private static Block[] blocksEffectiveAgainst = new Block[]{Block.planks, Block.bookShelf, Block.wood, Block.crate};
+	private static Block[] blocksEffectiveAgainst = new Block[]{Block.planks, Block.bookShelf, Block.wood, Block.crate, Block.workbench, Block.doorWood, Block.ladder, Block.pressurePlatePlanks, Block.fence, Block.pumpkin, Block.jukebox, Block.signPost, Block.signWall, Block.stairCompactPlanks, Block.alchemyStationWood};
 
 	public ItemAxe(int var1, int var2) {
 		super(var1, 3, var2, blocksEffectiveAgainst);
--- /dev/null
+++ net/minecraft/src/WorldGenGrassPyramid.java
@@ -1,0 +1,21 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class WorldGenGrassPyramid extends WorldGenPyramid {
+	protected int block2;
+	
+	public WorldGenGrassPyramid(){
+		super(Block.dirt.blockID);
+		this.block2 = Block.grass.blockID;
+	}
+	
+	public void placeBlock(World w, int x, int y, int z, int b){
+		if(Agrupation.pyramidReplace.contains(w.getBlockId(x, y, z))){
+			w.setBlockWithNotify(x, y, z, b);
+		}
+		if(w.getBlockId(x, y + 1, z) == 0){
+			w.setBlockWithNotify(x, y, z, block2);
+		}
+	}
+}
--- /dev/null
+++ net/minecraft/src/OptionFloat.java
@@ -1,0 +1,31 @@
+package net.minecraft.src;
+
+public class OptionFloat extends Option {
+	public int maxSlider;
+	public int minSlider;
+	private String maxString;
+	private String minString;
+	
+	public OptionFloat(String n, String dn, int i, int minS, int maxS, String miS, String maS){
+		super(n, dn, i);
+		this.maxSlider = maxS;
+		this.minSlider = minS;
+		this.maxString = maS;
+		this.minString = miS;
+	}
+		
+	public OptionFloat(String n, String dn, int i, int minS, int maxS, String maS){
+		this(n, dn, i, minS, maxS, "OFF", maS);
+	}
+			
+	public OptionFloat(String n, String dn, int i, int minS, int maxS){
+		this(n, dn, i, minS, maxS, "OFF", "100%");
+	}
+	
+	public final String getDisplayString(Object Value){
+		if ((float) Value < 0.0F || (float) Value > 1.0F){
+			return this.displayName + ": " + (float) Value;
+		}
+		return this.displayName + ": " + ((float) Value == 0.0F ? minString : ((float) Value == 1.0F ? maxString : (int)((float) Value * (float)(this.maxSlider - this.minSlider) + this.minSlider) + "%"));
+	}
+}
--- net/minecraft/src/ItemPickaxe.java
+++ net/minecraft/src/ItemPickaxe.java
@@ -1,7 +1,7 @@
 package net.minecraft.src;
 
 public class ItemPickaxe extends ItemTool {
-	private static Block[] blocksEffectiveAgainst = new Block[]{Block.cobblestone, Block.stairDouble, Block.stairSingle, Block.stone, Block.cobblestoneMossy, Block.oreIron, Block.blockSteel, Block.oreCoal, Block.blockGold, Block.oreGold, Block.oreDiamond, Block.blockDiamond, Block.blockIce, Block.bloodStone};
+	private static Block[] blocksEffectiveAgainst = new Block[]{Block.cobblestone, Block.stairDouble, Block.stairSingle, Block.stone, Block.cobblestoneMossy, Block.oreIron, Block.blockSteel, Block.oreCoal, Block.blockGold, Block.oreGold, Block.oreDiamond, Block.blockDiamond, Block.blockIce, Block.bloodStone, Block.oreRedstone, Block.oreRedstoneGlowing, Block.lightStone, Block.stoneOvenIdle, Block.stoneOvenActive, Block.pressurePlateStone, Block.adobe, Block.pressurePlateGold, Block.blockBone, Block.orePlumbum, Block.blockPlumbum, Block.stairCompactCobblestone, Block.sandstone, Block.smoothSandstone, Block.brick, Block.alchemyStationIron, Block.brickFire};
 	private int field_328_aY;
 
 	public ItemPickaxe(int var1, int var2) {
@@ -10,6 +10,6 @@
 	}
 
 	public boolean canHarvestBlock(Block var1) {
-		return var1 == Block.obsidian ? this.field_328_aY == 3 : (var1 != Block.blockDiamond && var1 != Block.oreDiamond ? (var1 != Block.blockGold && var1 != Block.oreGold ? (var1 != Block.blockSteel && var1 != Block.oreIron ? (var1 != Block.oreRedstone && var1 != Block.oreRedstoneGlowing ? (var1.blockMaterial == Material.rock ? true : var1.blockMaterial == Material.iron) : this.field_328_aY >= 2) : this.field_328_aY >= 1) : this.field_328_aY >= 2) : this.field_328_aY >= 2);
+		return var1 == Block.obsidian || var1 == Block.glowingObsidian ? this.field_328_aY == 3 : (var1 != Block.blockDiamond && var1 != Block.oreDiamond ? (var1 != Block.blockGold && var1 != Block.oreGold ? (var1 != Block.blockSteel && var1 != Block.oreIron && var1 != Block.orePlumbum ? (var1 != Block.oreRedstone && var1 != Block.oreRedstoneGlowing ? (var1.blockMaterial == Material.rock ? true : var1.blockMaterial == Material.iron) : this.field_328_aY >= 2) : this.field_328_aY >= 1) : this.field_328_aY >= 2) : this.field_328_aY >= 2);
 	}
 }
--- /dev/null
+++ ibxm/LogTable.java
@@ -1,0 +1,37 @@
+package ibxm;
+
+public class LogTable {
+	private static final int TABLE_SHIFT = 7;
+	private static final int INTERP_SHIFT = 8;
+	private static final int INTERP_MASK = 255;
+	private static final int[] exp_2_table = new int[]{-Short.MIN_VALUE, '\u80b1', '\u8164', '\u8218', '\u82cd', '\u8383', '\u843a', '\u84f1', '\u85aa', '\u8664', '\u871f', '\u87db', '\u8898', '\u8955', '\u8a14', '\u8ad4', '\u8b95', '\u8c57', '\u8d1a', '\u8ddf', '\u8ea4', '\u8f6a', '\u9031', '\u90fa', '\u91c3', '\u928e', '\u935a', '\u9426', '\u94f4', '\u95c3', '\u9694', '\u9765', '\u9837', '\u990b', '\u99e0', '\u9ab6', '\u9b8d', '\u9c65', '\u9d3e', '\u9e19', '\u9ef5', '\u9fd2', '\ua0b0', '\ua18f', '\ua270', '\ua352', '\ua435', '\ua519', '\ua5fe', '\ua6e5', '\ua7cd', '\ua8b6', '\ua9a1', '\uaa8d', '\uab7a', '\uac68', '\uad58', '\uae49', '\uaf3b', '\ub02f', '\ub123', '\ub21a', '\ub311', '\ub40a', '\ub504', '\ub600', '\ub6fd', '\ub7fb', '\ub8fb', '\ub9fc', '\ubaff', '\ubc03', '\ubd08', '\ube0f', '\ubf17', '\uc021', '\uc12c', '\uc238', '\uc346', '\uc456', '\uc567', '\uc679', '\uc78d', '\uc8a2', '\uc9b9', '\ucad2', '\ucbec', '\ucd07', '\uce24', '\ucf43', '\ud063', '\ud184', '\ud2a8', '\ud3cc', '\ud4f3', '\ud61b', '\ud744', '\ud870', '\ud99d', '\udacb', '\udbfb', '\udd2d', '\ude60', '\udf96', '\ue0cc', '\ue205', '\ue33f', '\ue47b', '\ue5b9', '\ue6f8', '\ue839', '\ue97c', '\ueac0', '\uec07', '\ued4f', '\uee99', '\uefe4', '\uf132', '\uf281', '\uf3d2', '\uf525', '\uf67a', '\uf7d0', '\uf929', '\ufa83', '\ufbdf', '\ufd3e', '\ufe9e', 65536};
+	private static final int[] log_2_table = new int[]{0, 367, 732, 1095, 1454, 1811, 2165, 2517, 2865, 3212, 3556, 3897, 4236, 4572, 4906, 5238, 5568, 5895, 6220, 6542, 6863, 7181, 7497, 7812, 8124, 8434, 8742, 9048, 9352, 9654, 9954, 10252, 10548, 10843, 11136, 11427, 11716, 12003, 12289, 12573, 12855, 13136, 13414, 13692, 13967, 14241, 14514, 14785, 15054, 15322, 15588, 15853, 16117, 16378, 16639, 16898, 17156, 17412, 17667, 17920, 18172, 18423, 18673, 18921, 19168, 19413, 19657, 19900, 20142, 20383, 20622, 20860, 21097, 21333, 21568, 21801, 22034, 22265, 22495, 22724, 22952, 23178, 23404, 23628, 23852, 24074, 24296, 24516, 24736, 24954, 25171, 25388, 25603, 25817, 26031, 26243, 26455, 26665, 26875, 27084, 27292, 27499, 27705, 27910, 28114, 28317, 28520, 28721, 28922, 29122, 29321, 29519, 29716, 29913, 30109, 30304, 30498, 30691, 30884, 31076, 31267, 31457, 31646, 31835, 32023, 32210, 32397, 32582, -Short.MIN_VALUE};
+
+	public static int log_2(int x) {
+		int shift;
+		for(shift = 15; x < -Short.MIN_VALUE; --shift) {
+			x <<= 1;
+		}
+
+		while(x >= 65536) {
+			x >>= 1;
+			++shift;
+		}
+
+		return -Short.MIN_VALUE * shift + eval_table(log_2_table, x - -Short.MIN_VALUE);
+	}
+
+	public static int raise_2(int x) {
+		int y = eval_table(exp_2_table, x & Short.MAX_VALUE) << 15;
+		return y >> 15 - (x >> 15);
+	}
+
+	private static int eval_table(int[] table, int x) {
+		int table_idx = x >> 8;
+		int table_frac = x & 255;
+		int c = table[table_idx];
+		int m = table[table_idx + 1] - c;
+		int y = (m * table_frac >> 8) + c;
+		return y >> 0;
+	}
+}
--- /dev/null
+++ net/minecraft/src/BlockFilter.java
@@ -1,0 +1,43 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockFilter extends Block {
+	public BlockFilter(int var1, int var2) {
+		super(var1, var2, Material.cloth);
+	}
+	
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
+		if(isCallerInstanceOfClass(EntityItem.class)){
+			return null;
+		} else {
+			return AxisAlignedBB.getBoundingBoxFromPool((double)var2 + this.field_370_bf, (double)var3 + this.minY, (double)var4 + this.minZ, (double)var2 + this.maxX, (double)var3 + this.maxY, (double)var4 + this.maxZ);
+		}
+	}
+	
+	private static boolean isCallerInstanceOfClass(Class<?> targetClass) {
+        // Get the current stack trace
+        StackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();
+
+        // Iterate through the stack trace elements starting from index 2 (index 0 is getStackTrace(), index 1 is isCallerInstanceOfClass())
+        for (int i = 2; i < stackTrace.length; i++) {
+            String className = stackTrace[i].getClassName();
+
+            // Check if the class name matches the target class name
+            if (className.equals(targetClass.getName())) {
+                return true;
+            }
+        }
+
+        return false;
+    }
+	
+	public boolean isOpaqueCube() {
+		return false;
+	}
+	
+	public boolean shouldSideBeRendered(IBlockAccess var1, int var2, int var3, int var4, int var5) {
+		int var6 = var1.getBlockId(var2, var3, var4);
+		return var6 == this.blockID ? false : super.shouldSideBeRendered(var1, var2, var3, var4, var5);
+	}
+}
--- net/minecraft/src/Block.java
+++ net/minecraft/src/Block.java
@@ -13,6 +13,7 @@
 	public static final StepSound soundGlassFootstep = new StepSoundStone("stone", 1.0F, 1.0F);
 	public static final StepSound soundClothFootstep = new StepSound("cloth", 1.0F, 1.0F);
 	public static final StepSound soundSandFootstep = new StepSoundSand("sand", 1.0F, 1.0F);
+	public static final StepSound soundBoneFootstep = new StepSound("bone", 1.0F, 1.0F);
 	public static final Block[] blocksList = new Block[256];
 	public static final boolean[] tickOnLoad = new boolean[256];
 	public static final boolean[] opaqueCubeLookup = new boolean[256];
@@ -20,26 +21,26 @@
 	public static final int[] lightOpacity = new int[256];
 	public static final boolean[] field_340_s = new boolean[256];
 	public static final int[] lightValue = new int[256];
-	public static final Block stone = (new BlockStone(1, 1)).setHardness(1.5F).setResistance(10.0F).setStepSound(soundStoneFootstep);
-	public static final BlockGrass grass = (BlockGrass)(new BlockGrass(2)).setHardness(0.6F).setStepSound(soundGrassFootstep);
-	public static final Block dirt = (new BlockDirt(3, 2)).setHardness(0.5F).setStepSound(soundGravelFootstep);
-	public static final Block cobblestone = (new Block(4, 16, Material.rock)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
-	public static final Block planks = (new Block(5, 4, Material.wood)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep);
-	public static final Block sapling = (new BlockSapling(6, 15)).setHardness(0.0F).setStepSound(soundGrassFootstep);
-	public static final Block bedrock = (new Block(7, 17, Material.rock)).setHardness(-1.0F).setResistance(6000000.0F).setStepSound(soundStoneFootstep);
-	public static final Block waterStill = (new BlockFlowing(8, Material.water)).setHardness(100.0F).setLightOpacity(3);
-	public static final Block waterMoving = (new BlockStationary(9, Material.water)).setHardness(100.0F).setLightOpacity(3);
-	public static final Block lavaStill = (new BlockFlowing(10, Material.lava)).setHardness(0.0F).setLightValue(1.0F).setLightOpacity(255);
-	public static final Block lavaMoving = (new BlockStationary(11, Material.lava)).setHardness(100.0F).setLightValue(1.0F).setLightOpacity(255);
-	public static final Block sand = (new BlockSand(12, 18)).setHardness(0.5F).setStepSound(soundSandFootstep);
-	public static final Block gravel = (new BlockGravel(13, 19)).setHardness(0.6F).setStepSound(soundGravelFootstep);
-	public static final Block oreGold = (new BlockOre(14, 32)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep);
-	public static final Block oreIron = (new BlockOre(15, 33)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep);
-	public static final Block oreCoal = (new BlockOre(16, 34)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep);
-	public static final Block wood = (new BlockLog(17)).setHardness(2.0F).setStepSound(soundWoodFootstep);
-	public static final BlockLeaves leaves = (BlockLeaves)(new BlockLeaves(18, 52)).setHardness(0.2F).setLightOpacity(1).setStepSound(soundGrassFootstep);
-	public static final Block sponge = (new BlockSponge(19)).setHardness(0.6F).setStepSound(soundGrassFootstep);
-	public static final Block glass = (new BlockGlass(20, 49, Material.glass, false)).setHardness(0.3F).setStepSound(soundGlassFootstep);
+	public static final Block stone = (new BlockStone(1, 1)).setHardness(1.5F).setResistance(10.0F).setStepSound(soundStoneFootstep).setKey("stone");
+	public static final BlockGrass grass = (BlockGrass)(new BlockGrass(2)).setHardness(0.6F).setStepSound(soundGrassFootstep).setKey("grass");
+	public static final Block dirt = (new BlockDirt(3, 2)).setHardness(0.5F).setStepSound(soundGravelFootstep).setKey("dirt");
+	public static final Block cobblestone = (new Block(4, 16, Material.rock)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setKey("cobblestone");
+	public static final Block planks = (new Block(5, 4, Material.wood)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep).setKey("planks");
+	public static final Block sapling = (new BlockSapling(6, 15)).setHardness(0.0F).setStepSound(soundGrassFootstep).setKey("sapling");
+	public static final Block bedrock = (new Block(7, 17, Material.rock)).setHardness(-1.0F).setResistance(6000000.0F).setStepSound(soundStoneFootstep).setKey("bedrock");
+	public static final Block waterStill = (new BlockFlowing(8, Material.water)).setHardness(100.0F).setLightOpacity(3).setKey("water");
+	public static final Block waterMoving = (new BlockStationary(9, Material.water)).setHardness(100.0F).setLightOpacity(3).setKey("waterFlow");
+	public static final Block lavaStill = (new BlockFlowing(10, Material.lava)).setHardness(0.0F).setLightValue(1.0F).setLightOpacity(255).setKey("lava");
+	public static final Block lavaMoving = (new BlockStationary(11, Material.lava)).setHardness(100.0F).setLightValue(1.0F).setLightOpacity(255).setKey("lavaFlow");
+	public static final Block sand = (new BlockSand(12, 18)).setHardness(0.5F).setStepSound(soundSandFootstep).setKey("sand");
+	public static final Block gravel = (new BlockGravel(13, 19)).setHardness(0.6F).setStepSound(soundGravelFootstep).setKey("gravel");
+	public static final Block oreGold = (new BlockOre(14, 32)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setKey("oreGold");
+	public static final Block oreIron = (new BlockOre(15, 33)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setKey("oreIron");
+	public static final Block oreCoal = (new BlockOre(16, 34)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setKey("oreCoal");
+	public static final Block wood = (new BlockLog(17)).setHardness(2.0F).setStepSound(soundWoodFootstep).setKey("wood");
+	public static final BlockLeaves leaves = (BlockLeaves)(new BlockLeaves(18, 52)).setHardness(0.2F).setLightOpacity(1).setStepSound(soundGrassFootstep).setKey("leaves");
+	public static final Block sponge = (new BlockSponge(19)).setHardness(0.6F).setStepSound(soundGrassFootstep).setKey("sponge");
+	public static final Block glass = (new BlockGlass(20, 49, Material.glass, false)).setHardness(0.3F).setStepSound(soundGlassFootstep).setKey("glass");
 	public static final Block field_9267_N = null;
 	public static final Block field_9266_O = null;
 	public static final Block field_9265_P = null;
@@ -54,63 +55,81 @@
 	public static final Block field_9256_Y = null;
 	public static final Block field_9255_Z = null;
 	public static final Block field_9269_aa = null;
-	public static final Block cloth = (new Block(35, 64, Material.cloth)).setHardness(0.8F).setStepSound(soundClothFootstep);
+	public static final Block cloth = (new Block(35, 64, Material.cloth)).setHardness(0.8F).setStepSound(soundClothFootstep).setKey("cloth");;
 	public static final Block field_9268_ac = null;
-	public static final BlockFlower plantYellow = (BlockFlower)(new BlockFlower(37, 13)).setHardness(0.0F).setStepSound(soundGrassFootstep);
-	public static final BlockFlower plantRed = (BlockFlower)(new BlockFlower(38, 12)).setHardness(0.0F).setStepSound(soundGrassFootstep);
-	public static final BlockFlower mushroomBrown = (BlockFlower)(new BlockMushroom(39, 29)).setHardness(0.0F).setStepSound(soundGrassFootstep).setLightValue(2.0F / 16.0F);
-	public static final BlockFlower mushroomRed = (BlockFlower)(new BlockMushroom(40, 28)).setHardness(0.0F).setStepSound(soundGrassFootstep);
-	public static final Block blockGold = (new BlockOreBlock(41, 39)).setHardness(3.0F).setResistance(10.0F).setStepSound(soundMetalFootstep);
-	public static final Block blockSteel = (new BlockOreBlock(42, 38)).setHardness(5.0F).setResistance(10.0F).setStepSound(soundMetalFootstep);
-	public static final Block stairDouble = (new BlockStep(43, true)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
-	public static final Block stairSingle = (new BlockStep(44, false)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
-	public static final Block brick = (new Block(45, 7, Material.rock)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
-	public static final Block tnt = (new BlockTNT(46, 8)).setHardness(0.0F).setStepSound(soundGrassFootstep);
-	public static final Block bookShelf = (new BlockBookshelf(47, 35)).setHardness(1.5F).setStepSound(soundWoodFootstep);
-	public static final Block cobblestoneMossy = (new Block(48, 36, Material.rock)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
-	public static final Block obsidian = (new BlockObsidian(49, 37)).setHardness(10.0F).setResistance(2000.0F).setStepSound(soundStoneFootstep);
-	public static final Block torchWood = (new BlockTorch(50, 80)).setHardness(0.0F).setLightValue(15.0F / 16.0F).setStepSound(soundWoodFootstep);
-	public static final BlockFire fire = (BlockFire)((BlockFire)(new BlockFire(51, 31)).setHardness(0.0F).setLightValue(1.0F).setStepSound(soundWoodFootstep));
-	public static final Block mobSpawner = (new BlockMobSpawner(52, 65)).setHardness(5.0F).setStepSound(soundMetalFootstep);
-	public static final Block stairCompactPlanks = new BlockStairs(53, planks);
-	public static final Block crate = (new BlockChest(54)).setHardness(2.5F).setStepSound(soundWoodFootstep);
-	public static final Block redstoneWire = (new BlockRedstoneWire(55, 84)).setHardness(0.0F).setStepSound(soundPowderFootstep);
-	public static final Block oreDiamond = (new BlockOre(56, 50)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep);
-	public static final Block blockDiamond = (new BlockOreBlock(57, 40)).setHardness(5.0F).setResistance(10.0F).setStepSound(soundMetalFootstep);
-	public static final Block workbench = (new BlockWorkbench(58)).setHardness(2.5F).setStepSound(soundWoodFootstep);
-	public static final Block crops = (new BlockCrops(59, 88)).setHardness(0.0F).setStepSound(soundGrassFootstep);
-	public static final Block tilledField = (new BlockSoil(60)).setHardness(0.6F).setStepSound(soundGravelFootstep);
-	public static final Block stoneOvenIdle = (new BlockFurnace(61, false)).setHardness(3.5F).setStepSound(soundStoneFootstep);
-	public static final Block stoneOvenActive = (new BlockFurnace(62, true)).setHardness(3.5F).setStepSound(soundStoneFootstep).setLightValue(14.0F / 16.0F);
-	public static final Block signPost = (new BlockSign(63, TileEntitySign.class, true)).setHardness(1.0F).setStepSound(soundWoodFootstep);
-	public static final Block doorWood = (new BlockDoor(64, Material.wood)).setHardness(3.0F).setStepSound(soundWoodFootstep);
-	public static final Block ladder = (new BlockLadder(65, 83)).setHardness(0.4F).setStepSound(soundWoodFootstep);
-	public static final Block minecartTrack = (new BlockMinecartTrack(66, 128)).setHardness(0.7F).setStepSound(soundMetalFootstep);
-	public static final Block stairCompactCobblestone = new BlockStairs(67, cobblestone);
-	public static final Block signWall = (new BlockSign(68, TileEntitySign.class, false)).setHardness(1.0F).setStepSound(soundWoodFootstep);
-	public static final Block lever = (new BlockLever(69, 96)).setHardness(0.5F).setStepSound(soundWoodFootstep);
-	public static final Block pressurePlateStone = (new BlockPressurePlate(70, stone.blockIndexInTexture, EnumMobType.mobs)).setHardness(0.5F).setStepSound(soundStoneFootstep);
-	public static final Block doorSteel = (new BlockDoor(71, Material.iron)).setHardness(5.0F).setStepSound(soundMetalFootstep);
-	public static final Block pressurePlatePlanks = (new BlockPressurePlate(72, planks.blockIndexInTexture, EnumMobType.everything)).setHardness(0.5F).setStepSound(soundWoodFootstep);
-	public static final Block oreRedstone = (new BlockRedstoneOre(73, 51, false)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep);
-	public static final Block oreRedstoneGlowing = (new BlockRedstoneOre(74, 51, true)).setLightValue(10.0F / 16.0F).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep);
-	public static final Block torchRedstoneIdle = (new BlockRedstoneTorch(75, 115, false)).setHardness(0.0F).setStepSound(soundWoodFootstep);
-	public static final Block torchRedstoneActive = (new BlockRedstoneTorch(76, 99, true)).setHardness(0.0F).setLightValue(0.5F).setStepSound(soundWoodFootstep);
-	public static final Block button = (new BlockButton(77, stone.blockIndexInTexture)).setHardness(0.5F).setStepSound(soundStoneFootstep);
-	public static final Block snow = (new BlockSnow(78, 66)).setHardness(0.1F).setStepSound(soundClothFootstep);
-	public static final Block blockIce = (new BlockIce(79, 67)).setHardness(0.5F).setLightOpacity(3).setStepSound(soundGlassFootstep);
-	public static final Block blockSnow = (new BlockSnowBlock(80, 66)).setHardness(0.2F).setStepSound(soundClothFootstep);
-	public static final Block cactus = (new BlockCactus(81, 70)).setHardness(0.4F).setStepSound(soundClothFootstep);
-	public static final Block blockClay = (new BlockClay(82, 72)).setHardness(0.6F).setStepSound(soundGravelFootstep);
-	public static final Block reed = (new BlockReed(83, 73)).setHardness(0.0F).setStepSound(soundGrassFootstep);
-	public static final Block jukebox = (new BlockJukeBox(84, 74)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
-	public static final Block fence = (new BlockFence(85, 4)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep);
-	public static final Block pumpkin = (new BlockPumpkin(86, 102, false)).setHardness(1.0F).setStepSound(soundWoodFootstep);
-	public static final Block bloodStone = (new BlockBloodStone(87, 103)).setHardness(0.4F).setStepSound(soundStoneFootstep);
-	public static final Block slowSand = (new BlockSlowSand(88, 104)).setHardness(0.5F).setStepSound(soundSandFootstep);
-	public static final Block lightStone = (new BlockLightStone(89, 105, Material.glass)).setHardness(0.3F).setStepSound(soundGlassFootstep).setLightValue(1.0F);
-	public static final BlockPortal portal = (BlockPortal)((BlockPortal)(new BlockPortal(90, 14)).setHardness(-1.0F).setStepSound(soundGlassFootstep).setLightValue(12.0F / 16.0F));
-	public static final Block pumpkinLantern = (new BlockPumpkin(91, 102, true)).setHardness(1.0F).setStepSound(soundWoodFootstep).setLightValue(1.0F);
+	public static final BlockFlower plantYellow = (BlockFlower)(new BlockFlower(37, 13)).setHardness(0.0F).setStepSound(soundGrassFootstep).setKey("dandelion");
+	public static final BlockFlower plantRed = (BlockFlower)(new BlockFlower(38, 12)).setHardness(0.0F).setStepSound(soundGrassFootstep).setKey("rose");
+	public static final BlockFlower mushroomBrown = (BlockFlower)(new BlockMushroom(39, 29)).setHardness(0.0F).setStepSound(soundGrassFootstep).setKey("mushroomBrown");
+	public static final BlockFlower mushroomRed = (BlockFlower)(new BlockMushroom(40, 28)).setHardness(0.0F).setStepSound(soundGrassFootstep).setKey("mushroomRed");
+	public static final Block blockGold = (new BlockOreBlock(41, 39)).setHardness(3.0F).setResistance(10.0F).setStepSound(soundMetalFootstep).setKey("blockGold");
+	public static final Block blockSteel = (new BlockOreBlock(42, 38)).setHardness(5.0F).setResistance(10.0F).setStepSound(soundMetalFootstep).setKey("blockIron");
+	public static final Block stairDouble = (new BlockStep(43, true)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setKey("stepDouble");
+	public static final Block stairSingle = (new BlockStep(44, false)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setKey("step");
+	public static final Block brick = (new Block(45, 7, Material.rock)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setKey("brick");
+	public static final Block tnt = (new BlockTNT(46, 8)).setHardness(0.0F).setStepSound(soundGrassFootstep).setKey("tnt");
+	public static final Block bookShelf = (new BlockBookshelf(47, 35)).setHardness(1.5F).setStepSound(soundWoodFootstep).setKey("bookShelf");
+	public static final Block cobblestoneMossy = (new Block(48, 36, Material.rock)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setKey("cobblestoneMossy");
+	public static final Block obsidian = (new BlockObsidian(49, 37)).setHardness(10.0F).setResistance(2000.0F).setStepSound(soundStoneFootstep).setKey("obsidian");
+	public static final Block torchWood = (new BlockTorch(50, 80)).setHardness(0.0F).setLightValue(15.0F / 16.0F).setStepSound(soundWoodFootstep).setKey("torch");
+	public static final BlockFire fire = (BlockFire)((BlockFire)(new BlockFire(51, 31)).setHardness(0.0F).setLightValue(1.0F).setStepSound(soundWoodFootstep)).setKey("fire");
+	public static final Block mobSpawner = (new BlockMobSpawner(52, 65)).setHardness(5.0F).setStepSound(soundMetalFootstep).setKey("spawner");
+	public static final Block stairCompactPlanks = new BlockStairs(53, planks).setKey("woodStairs");
+	public static final Block crate = (new BlockChest(54)).setHardness(2.5F).setStepSound(soundWoodFootstep).setKey("chest");
+	public static final Block redstoneWire = (new BlockRedstoneWire(55, 84)).setHardness(0.0F).setStepSound(soundPowderFootstep).setKey("redstone");
+	public static final Block oreDiamond = (new BlockOre(56, 50)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setKey("oreDiamond");
+	public static final Block blockDiamond = (new BlockOreBlock(57, 40)).setHardness(5.0F).setResistance(10.0F).setStepSound(soundMetalFootstep).setKey("blockDiamond");
+	public static final Block workbench = (new BlockWorkbench(58)).setHardness(2.5F).setStepSound(soundWoodFootstep).setKey("workbench");
+	public static final Block crops = (new BlockCrops(59, 88)).setHardness(0.0F).setStepSound(soundGrassFootstep).setKey("crops");
+	public static final Block tilledField = (new BlockSoil(60)).setHardness(0.6F).setStepSound(soundGravelFootstep).setKey("soil");
+	public static final Block stoneOvenIdle = (new BlockFurnace(61, false)).setHardness(3.5F).setStepSound(soundStoneFootstep).setKey("oven");
+	public static final Block stoneOvenActive = (new BlockFurnace(62, true)).setHardness(3.5F).setStepSound(soundStoneFootstep).setLightValue(14.0F / 16.0F).setKey("ovenActive");
+	public static final Block signPost = (new BlockSign(63, TileEntitySign.class, true)).setHardness(1.0F).setStepSound(soundWoodFootstep).setKey("sign");
+	public static final Block doorWood = (new BlockDoor(64, Material.wood)).setHardness(3.0F).setStepSound(soundWoodFootstep).setKey("door");
+	public static final Block ladder = (new BlockLadder(65, 83)).setHardness(0.4F).setStepSound(soundWoodFootstep).setKey("ladder");
+	public static final Block minecartTrack = (new BlockMinecartTrack(66, 128)).setHardness(0.7F).setStepSound(soundMetalFootstep).setKey("rail");
+	public static final Block stairCompactCobblestone = new BlockStairs(67, cobblestone).setKey("cobblestoneStairs");
+	public static final Block signWall = (new BlockSign(68, TileEntitySign.class, false)).setHardness(1.0F).setStepSound(soundWoodFootstep).setKey("signWall");
+	public static final Block lever = (new BlockLever(69, 96)).setHardness(0.5F).setStepSound(soundWoodFootstep).setKey("lever");
+	public static final Block pressurePlateStone = (new BlockPressurePlate(70, stone.blockIndexInTexture, EnumMobType.mobs, Material.rock)).setHardness(0.5F).setStepSound(soundStoneFootstep).setKey("plateStone");
+	public static final Block doorSteel = (new BlockDoor(71, Material.iron)).setHardness(5.0F).setStepSound(soundMetalFootstep).setKey("doorIron");
+	public static final Block pressurePlatePlanks = (new BlockPressurePlate(72, planks.blockIndexInTexture, EnumMobType.everything, Material.wood)).setHardness(0.5F).setStepSound(soundWoodFootstep).setKey("plateWood");
+	public static final Block oreRedstone = (new BlockRedstoneOre(73, 51, false)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setKey("oreRedstone");
+	public static final Block oreRedstoneGlowing = (new BlockRedstoneOre(74, 51, true)).setLightValue(10.0F / 16.0F).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setKey("oreRedstoneActive");
+	public static final Block torchRedstoneIdle = (new BlockRedstoneTorch(75, 115, false)).setHardness(0.0F).setStepSound(soundWoodFootstep).setKey("torchRedstone");
+	public static final Block torchRedstoneActive = (new BlockRedstoneTorch(76, 99, true)).setHardness(0.0F).setLightValue(0.5F).setStepSound(soundWoodFootstep).setKey("torchRedstoneActive");
+	public static final Block button = (new BlockButton(77, stone.blockIndexInTexture)).setHardness(0.5F).setStepSound(soundStoneFootstep).setKey("button");
+	public static final Block snow = (new BlockSnow(78, 66)).setHardness(0.1F).setStepSound(soundClothFootstep).setKey("layerSnow");
+	public static final Block blockIce = (new BlockIce(79, 67)).setHardness(0.5F).setLightOpacity(3).setStepSound(soundGlassFootstep).setKey("ice");
+	public static final Block blockSnow = (new BlockSnowBlock(80, 66)).setHardness(0.2F).setStepSound(soundClothFootstep).setKey("blockSnow");
+	public static final Block cactus = (new BlockCactus(81, 70)).setHardness(0.4F).setStepSound(soundClothFootstep).setKey("cactus");
+	public static final Block blockClay = (new BlockClay(82, 72)).setHardness(0.6F).setStepSound(soundGravelFootstep).setKey("clay");
+	public static final Block reed = (new BlockReed(83, 73)).setHardness(0.0F).setStepSound(soundGrassFootstep).setKey("reed");
+	public static final Block jukebox = (new BlockJukeBox(84, 74)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setKey("jukebox");
+	public static final Block fence = (new BlockFence(85, 4)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep).setKey("fence");
+	public static final Block pumpkin = (new BlockPumpkin(86, 102, false)).setHardness(1.0F).setStepSound(soundWoodFootstep).setKey("pumpkin");
+	public static final Block bloodStone = (new BlockBloodStone(87, 103)).setHardness(0.4F).setStepSound(soundStoneFootstep).setKey("bloodstone");
+	public static final Block slowSand = (new BlockSlowSand(88, 104)).setHardness(0.5F).setStepSound(soundSandFootstep).setKey("slowSand");
+	public static final Block lightStone = (new BlockLightStone(89, 105, Material.glass)).setHardness(0.3F).setStepSound(soundGlassFootstep).setLightValue(1.0F).setKey("lightStone");
+	public static final BlockPortal portal = (BlockPortal)((BlockPortal)(new BlockPortal(90, 14)).setHardness(-1.0F).setStepSound(soundGlassFootstep).setLightValue(12.0F / 16.0F)).setKey("portal");
+	public static final Block pumpkinLantern = (new BlockPumpkin(91, 102, true)).setHardness(1.0F).setStepSound(soundWoodFootstep).setLightValue(1.0F).setKey("halloweenPumpkin");
+	public static final Block blueRose = (BlockFlower)(new BlockFlower(92, 63)).setHardness(0.0F).setStepSound(soundGrassFootstep).setKey("blueRose");
+	public static final Block sandstone = (new Block(93, 76, Material.rock)).setHardness(1.5F).setResistance(8.0F).setStepSound(soundStoneFootstep).setKey("sandstone");
+	public static final Block smoothSandstone = (new Block(94, 77, Material.rock)).setHardness(1.5F).setResistance(8.0F).setStepSound(soundStoneFootstep).setKey("smoothSandstone");
+	public static final Block adobe = (new Block(95, 109, Material.rock)).setHardness(1.0F).setResistance(5.0F).setStepSound(soundGravelFootstep).setKey("adobe");
+	public static final Block glowingObsidian = (new BlockGlowingObsidian(96, 110)).setHardness(10.0F).setLightValue(1.0F).setResistance(2000.0F).setStepSound(soundStoneFootstep).setKey("glowObsidian");
+	public static final Block pressurePlateGold = (new BlockPressurePlate(97, blockGold.blockIndexInTexture, EnumMobType.players, Material.iron)).setHardness(0.7F).setStepSound(soundMetalFootstep).setKey("plateGold");
+	public static final Block timeReactor = (new BlockTimeReactor(98, 111)).setHardness(10.0F).setLightValue(0.8F).setResistance(2000.0F).setStepSound(soundGlassFootstep).setKey("timeReactor");
+	public static final Block redstoneLampOff = (new BlockRedstoneLamp(99, 106, false)).setHardness(1.0F).setStepSound(soundGlassFootstep).setKey("redstoneLamp");
+	public static final Block redstoneLampOn = (new BlockRedstoneLamp(100, 107, true)).setHardness(1.0F).setLightValue(1.0F).setStepSound(soundGlassFootstep).setKey("redstoneLampActive");
+	public static final Block blockBone = (new BlockBone(101, 113)).setHardness(1.5F).setResistance(10.0F).setStepSound(soundBoneFootstep).setKey("blockBone");
+	public static final Block minecartTrackGold = (new BlockMinecartTrack(102, 132)).setHardness(0.7F).setStepSound(soundMetalFootstep).setKey("railGold");
+	public static final Block orePlumbum = (new BlockOre(103, 121)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundStoneFootstep).setKey("orePlumbum");
+	public static final Block blockPlumbum = (new BlockOreBlock(104, 46)).setHardness(5.0F).setResistance(10.0F).setStepSound(soundMetalFootstep).setKey("blockPlumbum");
+	public static final Block itemFilter = (new BlockFilter(105, 108)).setHardness(0.2F).setStepSound(soundClothFootstep).setKey("filter");
+	public static final Block alchemyStationWood = (new BlockAlchemy(106, 122, false)).setHardness(3.5F).setStepSound(soundWoodFootstep).setKey("alchemyWood");
+	public static final Block alchemyStationIron = (new BlockAlchemy(107, 124, true)).setHardness(5.0F).setStepSound(soundMetalFootstep).setKey("alchemyIron");
+	public static final Block brickFire = (new Block(108, 117, Material.rock)).setHardness(3.0F).setResistance(10.0F).setStepSound(soundStoneFootstep).setKey("brickFire");
+	public static final Block concrete = (new BlockFastPath(109, 147)).setHardness(1.0F).setStepSound(soundStoneFootstep).setKey("concrete");
 	public int blockIndexInTexture;
 	public final int blockID;
 	protected float blockHardness;
@@ -125,6 +144,7 @@
 	public float field_357_bm;
 	public final Material blockMaterial;
 	public float slipperiness;
+	public String key;
 
 	protected Block(int var1, Material var2) {
 		this.stepSound = soundPowderFootstep;
@@ -153,6 +173,11 @@
 		this.stepSound = var1;
 		return this;
 	}
+	
+	protected Block setKey(String k){
+		this.key = "block." + k;
+		return this;
+	}
 
 	protected Block setLightOpacity(int var1) {
 		lightOpacity[this.blockID] = var1;
@@ -193,6 +218,13 @@
 	protected void setTickOnLoad(boolean var1) {
 		tickOnLoad[this.blockID] = var1;
 	}
+	
+	public boolean ispartOf(Agrupation a){
+		if(a.contains(this.blockID)){
+			return true;
+		}
+		return false;
+	}
 
 	public void setBlockBounds(float var1, float var2, float var3, float var4, float var5, float var6) {
 		this.field_370_bf = (double)var1;
@@ -282,7 +314,7 @@
 	}
 
 	public float func_225_a(EntityPlayer var1) {
-		return this.blockHardness < 0.0F ? 0.0F : (!var1.canHarvestBlock(this) ? 1.0F / this.blockHardness / 100.0F : var1.getCurrentPlayerStrVsBlock(this) / this.blockHardness / 30.0F);
+		return var1.gamemode == 1 && var1.creSettings.creativeInstaHarvest ? Float.POSITIVE_INFINITY : (this.blockHardness < 0.0F ? 0.0F : (!var1.canHarvestBlock(this) ? 1.0F / this.blockHardness / 100.0F : var1.getCurrentPlayerStrVsBlock(this) / this.blockHardness / 30.0F));
 	}
 
 	public void dropBlockAsItem(World var1, int var2, int var3, int var4, int var5) {
@@ -311,6 +343,28 @@
 		}
 	}
 
+	public void dropSilkBlockAsItem(World var1, int var2, int var3, int var4, int var5) {
+		this.dropSilkBlockAsItemWithChance(var1, var2, var3, var4, var5, 1.0F);
+	}
+
+	public void dropSilkBlockAsItemWithChance(World var1, int var2, int var3, int var4, int var5, float var6) {
+		if(!var1.multiplayerWorld) {
+
+			if(var1.rand.nextFloat() <= var6) {
+				int var9 = this.blockID;
+				if(var9 > 0) {
+					float var10 = 0.7F;
+					double var11 = (double)(var1.rand.nextFloat() * var10) + (double)(1.0F - var10) * 0.5D;
+					double var13 = (double)(var1.rand.nextFloat() * var10) + (double)(1.0F - var10) * 0.5D;
+					double var15 = (double)(var1.rand.nextFloat() * var10) + (double)(1.0F - var10) * 0.5D;
+					EntityItem var17 = new EntityItem(var1, (double)var2 + var11, (double)var3 + var13, (double)var4 + var15, new ItemStack(var9));
+					var17.field_805_c = 10;
+					var1.entityJoinedWorld(var17);
+				}
+			}
+		}
+	}
+
 	public float func_227_a(Entity var1) {
 		return this.blockResistance / 5.0F;
 	}
@@ -473,6 +527,10 @@
 
 	public void harvestBlock(World var1, int var2, int var3, int var4, int var5) {
 		this.dropBlockAsItem(var1, var2, var3, var4, var5);
+	}
+
+	public void harvestSilkBlock(World var1, int var2, int var3, int var4, int var5) {
+		this.dropSilkBlockAsItem(var1, var2, var3, var4, var5);
 	}
 
 	public boolean canBlockStay(World var1, int var2, int var3, int var4) {
--- /dev/null
+++ net/minecraft/src/WorldGenGlowingObsidian2.java
@@ -1,0 +1,61 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class WorldGenGlowingObsidian2 extends WorldGenerator {
+	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
+		if(var1.getBlockId(var3, var4, var5) != 0) {
+			return false;
+		} else if(var1.getBlockId(var3, var4 + 1, var5) != Block.bloodStone.blockID) {
+			return false;
+		} else {
+			var1.setBlockWithNotify(var3, var4, var5, Block.glowingObsidian.blockID);
+
+			for(int var6 = 0; var6 < 1500; ++var6) {
+				int var7 = var3 + var2.nextInt(8) - var2.nextInt(8);
+				int var8 = var4 - var2.nextInt(12);
+				int var9 = var5 + var2.nextInt(8) - var2.nextInt(8);
+				if(var1.getBlockId(var7, var8, var9) == 0) {
+					int var10 = 0;
+
+					for(int var11 = 0; var11 < 6; ++var11) {
+						int var12 = 0;
+						if(var11 == 0) {
+							var12 = var1.getBlockId(var7 - 1, var8, var9);
+						}
+
+						if(var11 == 1) {
+							var12 = var1.getBlockId(var7 + 1, var8, var9);
+						}
+
+						if(var11 == 2) {
+							var12 = var1.getBlockId(var7, var8 - 1, var9);
+						}
+
+						if(var11 == 3) {
+							var12 = var1.getBlockId(var7, var8 + 1, var9);
+						}
+
+						if(var11 == 4) {
+							var12 = var1.getBlockId(var7, var8, var9 - 1);
+						}
+
+						if(var11 == 5) {
+							var12 = var1.getBlockId(var7, var8, var9 + 1);
+						}
+
+						if(var12 == Block.glowingObsidian.blockID) {
+							++var10;
+						}
+					}
+
+					if(var10 == 1) {
+						var1.setBlockWithNotify(var7, var8, var9, Block.glowingObsidian.blockID);
+					}
+				}
+			}
+
+			return true;
+		}
+	}
+}
--- /dev/null
+++ net/minecraft/src/CreativeSettings.java
@@ -1,0 +1,13 @@
+package net.minecraft.src;
+
+public class CreativeSettings {
+	public boolean creativeInstaHarvest;
+	public boolean creativeDoHarvest;
+	public boolean creativeMobsTrackYou;
+	
+	public CreativeSettings(boolean b1, boolean b2, boolean b3){
+		this.creativeInstaHarvest = b1;
+		this.creativeDoHarvest = b2;
+		this.creativeMobsTrackYou = b3;
+	}
+}
--- net/minecraft/src/GuiScreen.java
+++ net/minecraft/src/GuiScreen.java
@@ -15,7 +15,7 @@
 	public int width;
 	public int height;
 	protected List controlList = new ArrayList();
-	public boolean field_948_f = false;
+	public boolean field_948_f = false; 
 	protected FontRenderer fontRenderer;
 	private GuiButton selectedButton = null;
 
@@ -24,6 +24,11 @@
 			GuiButton var5 = (GuiButton)this.controlList.get(var4);
 			var5.drawButton(this.mc, var1, var2);
 		}
+		
+		for(int var4 = 0; var4 < this.controlList.size(); ++var4) {
+			GuiButton var5 = (GuiButton)this.controlList.get(var4);
+			var5.drawDescription(this.mc, var1, var2);
+		}
 
 	}
 
@@ -113,7 +118,7 @@
 
 	public void handleKeyboardInput() {
 		if(Keyboard.getEventKeyState()) {
-			if(Keyboard.getEventKey() == Keyboard.KEY_F11) {
+			if(Keyboard.getEventKey() == this.mc.gameSettings.keyBindFullscreen.keyCode) {
 				this.mc.toggleFullscreen();
 				return;
 			}
@@ -163,5 +168,9 @@
 	}
 
 	public void deleteWorld(boolean var1, int var2) {
+	}
+	
+	public String translate(String key){
+		return this.mc.translator.translate(key);
 	}
 }
--- net/minecraft/src/EntityZombie.java
+++ net/minecraft/src/EntityZombie.java
@@ -1,5 +1,7 @@
 package net.minecraft.src;
 
+import java.util.Random;
+
 public class EntityZombie extends EntityMobs {
 	public EntityZombie(World var1) {
 		super(var1);
@@ -32,6 +34,9 @@
 	}
 
 	protected int getDropItemId() {
+		if(this.rand.nextInt(6) == 5){
+			return Item.zombieTooth.shiftedIndex;
+		}
 		return Item.feather.shiftedIndex;
 	}
 }
--- net/minecraft/src/Item.java
+++ net/minecraft/src/Item.java
@@ -5,48 +5,48 @@
 public class Item {
 	protected static Random itemRand = new Random();
 	public static Item[] itemsList = new Item[32000];
-	public static Item shovelSteel = (new ItemSpade(0, 2)).setIconIndex(82);
-	public static Item pickaxeSteel = (new ItemPickaxe(1, 2)).setIconIndex(98);
-	public static Item axeSteel = (new ItemAxe(2, 2)).setIconIndex(114);
-	public static Item flintAndSteel = (new ItemFlintAndSteel(3)).setIconIndex(5);
-	public static Item appleRed = (new ItemFood(4, 4)).setIconIndex(10);
-	public static Item bow = (new ItemBow(5)).setIconIndex(21);
-	public static Item arrow = (new Item(6)).setIconIndex(37);
-	public static Item coal = (new Item(7)).setIconIndex(7);
-	public static Item diamond = (new Item(8)).setIconIndex(55);
-	public static Item ingotIron = (new Item(9)).setIconIndex(23);
-	public static Item ingotGold = (new Item(10)).setIconIndex(39);
-	public static Item swordSteel = (new ItemSword(11, 2)).setIconIndex(66);
-	public static Item swordWood = (new ItemSword(12, 0)).setIconIndex(64);
-	public static Item shovelWood = (new ItemSpade(13, 0)).setIconIndex(80);
-	public static Item pickaxeWood = (new ItemPickaxe(14, 0)).setIconIndex(96);
-	public static Item axeWood = (new ItemAxe(15, 0)).setIconIndex(112);
-	public static Item swordStone = (new ItemSword(16, 1)).setIconIndex(65);
-	public static Item shovelStone = (new ItemSpade(17, 1)).setIconIndex(81);
-	public static Item pickaxeStone = (new ItemPickaxe(18, 1)).setIconIndex(97);
-	public static Item axeStone = (new ItemAxe(19, 1)).setIconIndex(113);
-	public static Item swordDiamond = (new ItemSword(20, 3)).setIconIndex(67);
-	public static Item shovelDiamond = (new ItemSpade(21, 3)).setIconIndex(83);
-	public static Item pickaxeDiamond = (new ItemPickaxe(22, 3)).setIconIndex(99);
-	public static Item axeDiamond = (new ItemAxe(23, 3)).setIconIndex(115);
-	public static Item stick = (new Item(24)).setIconIndex(53).setFull3D();
-	public static Item bowlEmpty = (new Item(25)).setIconIndex(71);
-	public static Item bowlSoup = (new ItemSoup(26, 10)).setIconIndex(72);
-	public static Item swordGold = (new ItemSword(27, 0)).setIconIndex(68);
-	public static Item shovelGold = (new ItemSpade(28, 0)).setIconIndex(84);
-	public static Item pickaxeGold = (new ItemPickaxe(29, 0)).setIconIndex(100);
-	public static Item axeGold = (new ItemAxe(30, 0)).setIconIndex(116);
-	public static Item silk = (new Item(31)).setIconIndex(8);
-	public static Item feather = (new Item(32)).setIconIndex(24);
-	public static Item gunpowder = (new Item(33)).setIconIndex(40);
-	public static Item hoeWood = (new ItemHoe(34, 0)).setIconIndex(128);
-	public static Item hoeStone = (new ItemHoe(35, 1)).setIconIndex(129);
-	public static Item hoeSteel = (new ItemHoe(36, 2)).setIconIndex(130);
-	public static Item hoeDiamond = (new ItemHoe(37, 3)).setIconIndex(131);
-	public static Item hoeGold = (new ItemHoe(38, 1)).setIconIndex(132);
-	public static Item seeds = (new ItemSeeds(39, Block.crops.blockID)).setIconIndex(9);
-	public static Item wheat = (new Item(40)).setIconIndex(25);
-	public static Item bread = (new ItemFood(41, 5)).setIconIndex(41);
+	public static Item shovelSteel = (new ItemSpade(0, 2)).setIconIndex(82).setKey("shovelSteel");
+	public static Item pickaxeSteel = (new ItemPickaxe(1, 2)).setIconIndex(98).setKey("pickSteel");
+	public static Item axeSteel = (new ItemAxe(2, 2)).setIconIndex(114).setKey("axeSteel");
+	public static Item flintAndSteel = (new ItemFlintAndSteel(3)).setIconIndex(5).setKey("flintSteel"); //259
+	public static Item appleRed = (new ItemFood(4, 4)).setIconIndex(10).setKey("apple");
+	public static Item bow = (new ItemBow(5)).setIconIndex(21).setKey("bow");
+	public static Item arrow = (new Item(6)).setIconIndex(37).setKey("arrow");
+	public static Item coal = (new Item(7)).setIconIndex(7).setKey("coal");
+	public static Item diamond = (new Item(8)).setIconIndex(55).setKey("diamond");
+	public static Item ingotIron = (new Item(9)).setIconIndex(23).setKey("ingotIron");
+	public static Item ingotGold = (new Item(10)).setIconIndex(39).setKey("ingotGold");
+	public static Item swordSteel = (new ItemSword(11, 2)).setIconIndex(66).setKey("swordSteel");
+	public static Item swordWood = (new ItemSword(12, 0)).setIconIndex(64).setKey("swordWood");
+	public static Item shovelWood = (new ItemSpade(13, 0)).setIconIndex(80).setKey("shovelWood");
+	public static Item pickaxeWood = (new ItemPickaxe(14, 0)).setIconIndex(96).setKey("pickWood");
+	public static Item axeWood = (new ItemAxe(15, 0)).setIconIndex(112).setKey("axeWood");
+	public static Item swordStone = (new ItemSword(16, 1)).setIconIndex(65).setKey("swordStone");
+	public static Item shovelStone = (new ItemSpade(17, 1)).setIconIndex(81).setKey("shovelStone");
+	public static Item pickaxeStone = (new ItemPickaxe(18, 1)).setIconIndex(97).setKey("pickStone");
+	public static Item axeStone = (new ItemAxe(19, 1)).setIconIndex(113).setKey("axeStone");
+	public static Item swordDiamond = (new ItemSword(20, 3)).setIconIndex(67).setKey("swordDiamond");
+	public static Item shovelDiamond = (new ItemSpade(21, 3)).setIconIndex(83).setKey("shovelDiamond");
+	public static Item pickaxeDiamond = (new ItemPickaxe(22, 3)).setIconIndex(99).setKey("pickDiamond"); //278
+	public static Item axeDiamond = (new ItemAxe(23, 3)).setIconIndex(115).setKey("axeDiamond");
+	public static Item stick = (new Item(24)).setIconIndex(53).setFull3D().setKey("stick");
+	public static Item bowlEmpty = (new Item(25)).setIconIndex(71).setKey("bowl");
+	public static Item bowlSoup = (new ItemSoup(26, 10)).setIconIndex(72).setKey("soup");
+	public static Item swordGold = (new ItemSword(27, 0)).setIconIndex(68).setKey("swordGold");
+	public static Item shovelGold = (new ItemSpade(28, -2)).setIconIndex(84).setKey("shovelGold");
+	public static Item pickaxeGold = (new ItemPickaxe(29, -2)).setIconIndex(100).setKey("pickGold");
+	public static Item axeGold = (new ItemAxe(30, -2)).setIconIndex(116).setKey("axeGold");
+	public static Item silk = (new Item(31)).setIconIndex(8).setKey("silk");
+	public static Item feather = (new Item(32)).setIconIndex(24).setKey("feather");
+	public static Item gunpowder = (new Item(33)).setIconIndex(40).setKey("gunpowder");
+	public static Item hoeWood = (new ItemHoe(34, 0)).setIconIndex(128).setKey("hoeWood");
+	public static Item hoeStone = (new ItemHoe(35, 1)).setIconIndex(129).setKey("hoeStone");
+	public static Item hoeSteel = (new ItemHoe(36, 2)).setIconIndex(130).setKey("hoeSteel");
+	public static Item hoeDiamond = (new ItemHoe(37, 3)).setIconIndex(131).setKey("hoeDiamond");
+	public static Item hoeGold = (new ItemHoe(38, -2)).setIconIndex(132).setKey("hoeGold");
+	public static Item seeds = (new ItemSeeds(39, Block.crops.blockID)).setIconIndex(9).setKey("seed");
+	public static Item wheat = (new Item(40)).setIconIndex(25).setKey("wheat");
+	public static Item bread = (new ItemFood(41, 5)).setIconIndex(41).setKey("bread");
 	public static Item helmetLeather = (new ItemArmor(42, 0, 0, 0)).setIconIndex(0);
 	public static Item plateLeather = (new ItemArmor(43, 0, 0, 1)).setIconIndex(16);
 	public static Item legsLeather = (new ItemArmor(44, 0, 0, 2)).setIconIndex(32);
@@ -67,46 +67,54 @@
 	public static Item plateGold = (new ItemArmor(59, 1, 4, 1)).setIconIndex(20);
 	public static Item legsGold = (new ItemArmor(60, 1, 4, 2)).setIconIndex(36);
 	public static Item bootsGold = (new ItemArmor(61, 1, 4, 3)).setIconIndex(52);
-	public static Item flint = (new Item(62)).setIconIndex(6);
-	public static Item porkRaw = (new ItemFood(63, 3)).setIconIndex(87);
-	public static Item porkCooked = (new ItemFood(64, 8)).setIconIndex(88);
-	public static Item painting = (new ItemPainting(65)).setIconIndex(26);
-	public static Item appleGold = (new ItemFood(66, 42)).setIconIndex(11);
-	public static Item sign = (new ItemSign(67)).setIconIndex(42);
-	public static Item doorWood = (new ItemDoor(68, Material.wood)).setIconIndex(43);
-	public static Item bucketEmpty = (new ItemBucket(69, 0)).setIconIndex(74);
-	public static Item bucketWater = (new ItemBucket(70, Block.waterStill.blockID)).setIconIndex(75);
-	public static Item bucketLava = (new ItemBucket(71, Block.lavaStill.blockID)).setIconIndex(76);
-	public static Item minecartEmpty = (new ItemMinecart(72, 0)).setIconIndex(135);
-	public static Item saddle = (new ItemSaddle(73)).setIconIndex(104);
-	public static Item doorSteel = (new ItemDoor(74, Material.iron)).setIconIndex(44);
-	public static Item redstone = (new ItemRedstone(75)).setIconIndex(56);
-	public static Item snowball = (new ItemSnowball(76)).setIconIndex(14);
-	public static Item boat = (new ItemBoat(77)).setIconIndex(136);
-	public static Item leather = (new Item(78)).setIconIndex(103);
-	public static Item bucketMilk = (new ItemBucket(79, -1)).setIconIndex(77);
-	public static Item brick = (new Item(80)).setIconIndex(22);
-	public static Item clay = (new Item(81)).setIconIndex(57);
-	public static Item reed = (new ItemReed(82, Block.reed)).setIconIndex(27);
-	public static Item paper = (new Item(83)).setIconIndex(58);
-	public static Item book = (new Item(84)).setIconIndex(59);
-	public static Item slimeBall = (new Item(85)).setIconIndex(30);
-	public static Item minecartCrate = (new ItemMinecart(86, 1)).setIconIndex(151);
-	public static Item minecartPowered = (new ItemMinecart(87, 2)).setIconIndex(167);
-	public static Item egg = (new Item(88)).setIconIndex(12);
-	public static Item compass = (new Item(89)).setIconIndex(54);
-	public static Item fishingRod = (new ItemFishingRod(90)).setIconIndex(69);
-	public static Item pocketSundial = (new Item(91)).setIconIndex(70);
-	public static Item lightStoneDust = (new Item(92)).setIconIndex(73);
-	public static Item fishRaw = (new ItemFood(93, 2)).setIconIndex(89);
-	public static Item fishCooked = (new ItemFood(94, 5)).setIconIndex(90);
-	public static Item record13 = (new ItemRecord(2000, "13")).setIconIndex(240);
-	public static Item recordCat = (new ItemRecord(2001, "cat")).setIconIndex(241);
+	public static Item flint = (new Item(62)).setIconIndex(6).setKey("flint");
+	public static Item porkRaw = (new ItemFood(63, 3)).setIconIndex(87).setKey("pork");
+	public static Item porkCooked = (new ItemFood(64, 8)).setIconIndex(88).setKey("porkCooked");
+	public static Item painting = (new ItemPainting(65)).setIconIndex(26).setKey("painting");
+	public static Item appleGold = (new ItemSpecialFood(66, 42, 0)).setIconIndex(11).setKey("appleG");
+	public static Item sign = (new ItemSign(67)).setIconIndex(42).setKey("sign");
+	public static Item doorWood = (new ItemDoor(68, Material.wood)).setIconIndex(43).setKey("door");
+	public static Item bucketEmpty = (new ItemBucket(69, 0)).setIconIndex(74).setKey("bucket");
+	public static Item bucketWater = (new ItemBucket(70, Block.waterStill.blockID)).setIconIndex(75).setKey("bucketWater");
+	public static Item bucketLava = (new ItemBucket(71, Block.lavaStill.blockID)).setIconIndex(76).setKey("bucketLava");
+	public static Item minecartEmpty = (new ItemMinecart(72, 0)).setIconIndex(135).setKey("minecart"); //328
+	public static Item saddle = (new ItemSaddle(73)).setIconIndex(104).setKey("saddle");
+	public static Item doorSteel = (new ItemDoor(74, Material.iron)).setIconIndex(44).setKey("doorSteel");
+	public static Item redstone = (new ItemRedstone(75)).setIconIndex(56).setKey("redstone"); //331
+	public static Item snowball = (new ItemSnowball(76)).setIconIndex(14).setKey("snowball");
+	public static Item boat = (new ItemBoat(77)).setIconIndex(136).setKey("boat");
+	public static Item leather = (new Item(78)).setIconIndex(103).setKey("leather");
+	public static Item bucketMilk = (new ItemBucket(79, -1)).setIconIndex(77).setKey("bucketMilk");
+	public static Item brick = (new Item(80)).setIconIndex(22).setKey("brick");
+	public static Item clay = (new Item(81)).setIconIndex(57).setKey("clay");
+	public static Item reed = (new ItemReed(82, Block.reed)).setIconIndex(27).setKey("reed");
+	public static Item paper = (new Item(83)).setIconIndex(58).setKey("paper");
+	public static Item book = (new Item(84)).setIconIndex(59).setKey("book");
+	public static Item slimeBall = (new Item(85)).setIconIndex(30).setKey("slimeBall");
+	public static Item minecartCrate = (new ItemMinecart(86, 1)).setIconIndex(151).setKey("minecartChest");
+	public static Item minecartPowered = (new ItemMinecart(87, 2)).setIconIndex(167).setKey("minecartFurnace");
+	public static Item egg = (new Item(88)).setIconIndex(12).setKey("egg");
+	public static Item compass = (new Item(89)).setIconIndex(54).setKey("compass");
+	public static Item fishingRod = (new ItemFishingRod(90)).setIconIndex(69).setKey("fishingRod");
+	public static Item pocketSundial = (new Item(91)).setIconIndex(70).setKey("clock");
+	public static Item lightStoneDust = (new Item(92)).setIconIndex(73).setKey("lightStoneDust"); //349
+	public static Item fishRaw = (new ItemFood(93, 2)).setIconIndex(89).setKey("fish");
+	public static Item fishCooked = (new ItemFood(94, 5)).setIconIndex(90).setKey("fishCooked");
+	public static Item fireSlimeBall = (new Item(95)).setIconIndex(29).setKey("fireSlimeBall"); //351
+	public static Item zombieTooth = (new Item(96)).setIconIndex(13).setKey("tooth"); //352
+	public static Item nuggetGold = (new Item(97)).setIconIndex(28).setKey("nuggetGold"); //353
+	public static Item plumbum = (new Item(98)).setIconIndex(62).setKey("plumbum"); //354
+	
+	public static Item record13 = (new ItemRecord(2000, "13")).setIconIndex(240).setKey("record13");
+	public static Item recordCat = (new ItemRecord(2001, "cat")).setIconIndex(241).setKey("recordCat");
+	
 	public final int shiftedIndex;
 	protected int maxStackSize = 64;
 	protected int maxDamage = 32;
 	protected int iconIndex;
 	protected boolean bFull3D = false;
+	public String key = "";
+	public int ability = 0;
 
 	protected Item(int var1) {
 		this.shiftedIndex = 256 + var1;
@@ -116,6 +124,11 @@
 
 		itemsList[256 + var1] = this;
 	}
+	
+	public Item setKey(String n) {
+		this.key = "item." + n;
+		return this;
+	}
 
 	public Item setIconIndex(int var1) {
 		this.iconIndex = var1;
@@ -134,6 +147,10 @@
 		return 1.0F;
 	}
 
+	public float getStrVsBlockNether(ItemStack var1, Block var2) {
+		return 1.0F;
+	}
+
 	public ItemStack onItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
 		return var1;
 	}
@@ -150,6 +167,9 @@
 	}
 
 	public void hitBlock(ItemStack var1, int var2, int var3, int var4, int var5) {
+	}
+
+	public void hitBlockNether(ItemStack var1, int var2, int var3, int var4, int var5) {
 	}
 
 	public int getDamageVsEntity(Entity var1) {
--- net/minecraft/src/BlockLeaves.java
+++ net/minecraft/src/BlockLeaves.java
@@ -1,6 +1,10 @@
 package net.minecraft.src;
 
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.LinkedList;
 import java.util.Random;
+//Leaf decay mod
 
 public class BlockLeaves extends BlockLeavesBase {
 	private int baseIndexInPNG;
@@ -9,6 +13,7 @@
 	protected BlockLeaves(int var1, int var2) {
 		super(var1, var2, Material.leaves, false);
 		this.baseIndexInPNG = var2;
+		this.setTickOnLoad(true);
 	}
 
 	public int colorMultiplier(IBlockAccess var1, int var2, int var3, int var4) {
@@ -19,11 +24,9 @@
 	}
 
 	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		if(this == null) {
-			this.field_464_c = 0;
-			this.func_308_h(var1, var2, var3, var4);
-			super.onNeighborBlockChange(var1, var2, var3, var4, var5);
-		}
+		this.field_464_c = 0;
+		this.func_308_h(var1, var2, var3, var4);
+		super.onNeighborBlockChange(var1, var2, var3, var4, var5);
 	}
 
 	public void func_6361_f(World var1, int var2, int var3, int var4, int var5) {
@@ -36,42 +39,67 @@
 	}
 
 	public void func_308_h(World var1, int var2, int var3, int var4) {
-		if(this == null) {
-			if(this.field_464_c++ < 100) {
-				int var5 = var1.getBlockMaterial(var2, var3 - 1, var4).func_878_a() ? 16 : 0;
-				int var6 = var1.getBlockMetadata(var2, var3, var4);
-				if(var6 == 0) {
-					var6 = 1;
-					var1.setBlockMetadataWithNotify(var2, var3, var4, 1);
-				}
-
-				var5 = this.func_6362_g(var1, var2, var3 - 1, var4, var5);
-				var5 = this.func_6362_g(var1, var2, var3, var4 - 1, var5);
-				var5 = this.func_6362_g(var1, var2, var3, var4 + 1, var5);
-				var5 = this.func_6362_g(var1, var2 - 1, var3, var4, var5);
-				var5 = this.func_6362_g(var1, var2 + 1, var3, var4, var5);
-				int var7 = var5 - 1;
-				if(var7 < 10) {
-					var7 = 1;
-				}
-
-				if(var7 != var6) {
-					var1.setBlockMetadataWithNotify(var2, var3, var4, var7);
-					this.func_6361_f(var1, var2, var3 - 1, var4, var6);
-					this.func_6361_f(var1, var2, var3 + 1, var4, var6);
-					this.func_6361_f(var1, var2, var3, var4 - 1, var6);
-					this.func_6361_f(var1, var2, var3, var4 + 1, var6);
-					this.func_6361_f(var1, var2 - 1, var3, var4, var6);
-					this.func_6361_f(var1, var2 + 1, var3, var4, var6);
-				}
-
-			}
+		if(this.field_464_c++ < 100) {
+			if(var1.getBlockMetadata(var2, var3, var4) != 1) {
+				int[] var5 = new int[]{var2, var3, var4};
+				LinkedList var6 = new LinkedList();
+				var6.add(var5);
+				if(!this.connectedToTrunk(var1, 4, new HashSet(), var6)) {
+					var1.setBlockMetadata(var2, var3, var4, 1);
+				}
+
+			}
+		}
+	}
+
+	private boolean connectedToTrunk(World var1, int var2, HashSet<int[]> var3, LinkedList<int[]> var4) {
+		if(var2 >= 1 && var4 != null && var4.size() != 0) {
+			LinkedList var5 = new LinkedList();
+			Iterator var6 = var4.iterator();
+
+			while(var6.hasNext()) {
+				int[] var7 = (int[])var6.next();
+				var3.add(var7);
+				LinkedList var8 = new LinkedList();
+				int[][] var9 = new int[][]{{var7[0] - 1, var7[1], var7[2]}, {var7[0] + 1, var7[1], var7[2]}, {var7[0], var7[1] - 1, var7[2]}, {var7[0], var7[1] + 1, var7[2]}, {var7[0], var7[1], var7[2] - 1}, {var7[0], var7[1], var7[2] + 1}};
+				int[][] var10 = var9;
+				int var11 = var9.length;
+
+				int var12;
+				for(var12 = 0; var12 < var11; ++var12) {
+					int[] var13 = var10[var12];
+					var8.add(var13);
+				}
+
+				Iterator var14 = var8.iterator();
+
+				while(var14.hasNext()) {
+					int[] var15 = (int[])var14.next();
+					if(!var3.contains(var15)) {
+						var3.add(var15);
+						var12 = var1.getBlockId(var15[0], var15[1], var15[2]);
+						if(var12 == 17) {
+							return true;
+						}
+
+						if(var12 == 18) {
+							var5.add(var15);
+						} else if(var1.getBlockMaterial(var15[0], var15[1], var15[2]).func_878_a()) {
+							return true;
+						}
+					}
+				}
+			}
+
+			return this.connectedToTrunk(var1, var2 - 1, var3, var5);
+		} else {
+			return false;
 		}
 	}
 
 	private int func_6362_g(World var1, int var2, int var3, int var4, int var5) {
 		int var6 = var1.getBlockId(var2, var3, var4);
-		if(var6 == Block.wood.blockID) {
+		if(Agrupation.leavesStay.contains(var6)) {
 			return 16;
 		} else {
 			if(var6 == this.blockID) {
@@ -86,18 +114,16 @@
 	}
 
 	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		if(this == null) {
-			int var6 = var1.getBlockMetadata(var2, var3, var4);
-			if(var6 == 0) {
-				this.field_464_c = 0;
-				this.func_308_h(var1, var2, var3, var4);
-			} else if(var6 == 1) {
-				this.func_6360_i(var1, var2, var3, var4);
-			} else if(var5.nextInt(10) == 0) {
-				this.func_308_h(var1, var2, var3, var4);
-			}
-
+		int var6 = var1.getBlockMetadata(var2, var3, var4);
+		if(var6 == 0) {
+			this.field_464_c = 0;
+			this.func_308_h(var1, var2, var3, var4);
+		} else if(var6 == 1) {
+			this.func_6360_i(var1, var2, var3, var4);
+		} else if(var5.nextInt(10) == 0) {
+			this.func_308_h(var1, var2, var3, var4);
 		}
+
 	}
 
 	private void func_6360_i(World var1, int var2, int var3, int var4) {
@@ -106,10 +132,14 @@
 	}
 
 	public int quantityDropped(Random var1) {
-		return var1.nextInt(20) == 0 ? 1 : 0;
+		return var1.nextInt(20) != 0 ? 0 : 1;
 	}
 
 	public int idDropped(int var1, Random var2) {
+		Random rand = new Random();
+		if(rand.nextInt(25) == 0){
+			return Item.appleRed.shiftedIndex;
+		}
 		return Block.sapling.blockID;
 	}
 
--- net/minecraft/src/EntitySheep.java
+++ net/minecraft/src/EntitySheep.java
@@ -2,6 +2,7 @@
 
 public class EntitySheep extends EntityAnimals {
 	public boolean sheared = false;
+	protected int eatTimer;
 
 	public EntitySheep(World var1) {
 		super(var1);
@@ -10,7 +11,20 @@
 	}
 
 	public boolean canAttackEntity(Entity var1, int var2) {
-		if(!this.worldObj.multiplayerWorld && !this.sheared && var1 instanceof EntityLiving) {
+		if(var1 instanceof EntityLiving) {
+			this.shear();
+		}
+
+		return super.canAttackEntity(var1, var2);
+	}
+	
+	protected void damageEntity(int var1) {
+		this.shear();
+		super.damageEntity(var1);
+	}
+	
+	protected void shear(){
+		if(!this.worldObj.multiplayerWorld && !this.sheared) {
 			this.sheared = true;
 			int var3 = 1 + this.rand.nextInt(3);
 
@@ -21,18 +35,59 @@
 				var5.motionZ += (double)((this.rand.nextFloat() - this.rand.nextFloat()) * 0.1F);
 			}
 		}
+	}
+	
+	protected boolean isMovementCeased() {
+		return this.eatTimer > 0;
+	}
+	
+	public void onLivingUpdate() {
+		super.onLivingUpdate();
+		if(this.eatTimer > 0) {
+			this.eatTimer--;
+		}
+	}
 
-		return super.canAttackEntity(var1, var2);
+	protected void func_418_b_() { //UpdateEntityActionState. Fucking bad mappings
+		super.func_418_b_();
+		if(!this.hasPath() && this.eatTimer <= 0 && this.rand.nextInt(1000) == 0) {
+			int i1 = MathHelper.floor_double(this.posX);
+			int i2 = MathHelper.floor_double(this.posY);
+			int i3 = MathHelper.floor_double(this.posZ);
+			if(Agrupation.sheepEat.contains(this.worldObj.getBlockId(i1, i2 - 1, i3))) {
+				this.eatTimer = 40;
+			}
+		} else if(this.eatTimer == 4 && this.sheared) {
+			int i4 = MathHelper.floor_double(this.posX);
+			int i5 = MathHelper.floor_double(this.posY);
+			int i6 = MathHelper.floor_double(this.posZ);
+			boolean z7 = false;
+			if(Agrupation.sheepEat.contains(this.worldObj.getBlockId(i4, i5 - 1, i6))) {
+				if(this.worldObj.getBlockId(i4, i5 - 1, i6) == Block.grass.blockID){
+					this.worldObj.setBlockWithNotify(i4, i5 - 1, i6, Block.dirt.blockID);
+				} else {
+					this.worldObj.setBlockWithNotify(i4, i5 - 1, i6, 0);
+				}
+				z7 = true;
+			}
+	
+			if(z7) {
+				this.sheared = false;
+				this.worldObj.playSoundAtEntity(this, "step.grass", 1.0F, 1.0F);
+			}
+		}
 	}
 
 	public void writeEntityToNBT(NBTTagCompound var1) {
 		super.writeEntityToNBT(var1);
 		var1.setBoolean("Sheared", this.sheared);
+		var1.setInteger("EatTimer", this.eatTimer);
 	}
 
 	public void readEntityFromNBT(NBTTagCompound var1) {
 		super.readEntityFromNBT(var1);
 		this.sheared = var1.getBoolean("Sheared");
+		this.eatTimer = var1.getInteger("EatTimer");
 	}
 
 	protected String getLivingSound() {
--- /dev/null
+++ net/minecraft/src/GuiCheats.java
@@ -1,0 +1,121 @@
+package net.minecraft.src;
+
+import net.minecraft.client.Minecraft;
+
+public class GuiCheats extends GuiScreen {
+	private GuiScreen parentScreen;
+	protected String screenTitle = "Cheats";
+	protected GuiTextBox field;
+	private int mode = 0;
+	//protected String a; //Just for testing purposes
+	protected MobIds spawner;
+	private boolean pauses = false;
+	private boolean num = false;
+
+	public GuiCheats(Minecraft m) {
+		this.mc = m;
+		spawner = new MobIds(this.mc.theWorld);
+	}
+	
+	public boolean doesGuiPauseGame() {
+		return pauses;
+	}
+
+	public void initGui() {
+		this.field = new GuiTextBox(this.width / 2 - 100, this.height / 6 + 48, "");
+		this.controlList.add(new GuiButton(0, this.width / 2 - 100, this.height / 6 + 72, "Get"));
+		this.controlList.add(new GuiButton(1, this.width / 2 - 100, this.height / 6 + 96, "Back"));
+		
+		this.controlList.add(new GuiButton(2, this.width / 2 - 100, this.height / 6 + 124, "Mode: Items"));
+		this.controlList.add(new GuiButton(3, this.width / 2 - 100, this.height / 6 + 148, "This GUI pauses the game: False"));
+		((GuiButton)this.controlList.get(0)).enabled = this.field.displayString.length() > 0;
+	}
+
+	protected void actionPerformed(GuiButton var1) {
+		if(var1.enabled) {
+			if(var1.id == 0) {
+				if (mode == 1){
+					World v8 = this.mc.theWorld;
+					spawner.spawnByInt(Integer.parseInt(this.field.displayString), this.mc.thePlayer.posX, this.mc.thePlayer.posY, this.mc.thePlayer.posZ);
+				} else if (mode == 0){
+					EntityPlayerSP var8 = this.mc.thePlayer;
+					int id = Integer.parseInt(this.field.displayString);
+					if(id < 256 && Block.blocksList[id] == null || id > 255 &&  Item.itemsList[id] == null){
+						return;
+					}
+					int g = (this.num ? 64 : 1);
+					var8.inventory.addItemStackToInventory(new ItemStack(Integer.parseInt(this.field.displayString), g));
+				} else {
+					String[] a = this.field.displayString.split("\\.");
+					this.mc.thePlayer.posX = Integer.parseInt(a[0]);
+					this.mc.thePlayer.posY = Integer.parseInt(a[1]);
+					this.mc.thePlayer.posZ = Integer.parseInt(a[2]);
+					this.mc.thePlayer.setPosition(Integer.parseInt(a[0]), Integer.parseInt(a[1]), Integer.parseInt(a[2]));
+				}
+			}
+
+			else if(var1.id == 1) {
+				this.mc.displayGuiScreen((GuiScreen)null);
+				this.mc.func_6259_e();
+			}
+			
+			else if(var1.id == 2) {
+				mode += 1;
+				if (mode == 2){
+					mode = 0;
+				}
+				((GuiButton)this.controlList.get(2)).displayString = "Mode: " + (mode == 0 ? "Items" : (mode == 1 ? "Entities" : "Teleport"));
+			}
+			
+			else if(var1.id == 3) {
+				if (pauses){
+					((GuiButton)this.controlList.get(3)).displayString = "This GUI pauses the game: False";
+					pauses = false;
+				} else {
+					((GuiButton)this.controlList.get(3)).displayString = "This GUI pauses the game: True";
+					pauses = true;
+				}
+			}
+
+		}
+	}
+
+	public void drawScreen(int var1, int var2, float var3) {
+		this.drawDefaultBackground();
+		this.drawCenteredString(this.fontRenderer, this.screenTitle, this.width / 2, 20, 16777215);
+		this.drawString(this.fontRenderer, "Enter the id of a block/item:", this.width / 2 - 98, this.height / 6 + 32, 10526880);
+		//this.drawCenteredString(this.fontRenderer, "You can press \"M\" to change modes", this.width / 2, this.height / 6 + 150, 16777215);
+		if (mode == 1 && this.field.displayString.length() > 0 && !this.field.displayString.contains(".")) {
+			this.fontRenderer.drawStringWithShadow(this.spawner.getName(Integer.parseInt(this.field.displayString)), this.width / 2 + 108, this.height / 6 + 52, 16777215);
+		}
+		//this.drawCenteredString(this.fontRenderer, this.a, this.width / 2, this.height / 6 , 16777215);
+		this.field.drawTextBox(this.mc);
+		super.drawScreen(var1, var2, var3);
+	}
+	
+	public void updateScreen(){
+		this.field.countTick();
+	}
+	
+	protected void keyTyped(char var1, int var2) {
+		//this.a = "var1: " + var1 + ", var2: " + var2 + ".";
+		if(var1 == 13) { //Enter
+			this.actionPerformed((GuiButton)this.controlList.get(0));
+			if(this.field.displayString.length() > 0){
+				this.mc.sndManager.func_337_a("random.click", 1.0F, 1.0F);
+			}
+		} else if(var1 == 'm' || var1 == 'M'){ //M key. obvious
+			this.actionPerformed((GuiButton)this.controlList.get(2));
+		} else if(var1 == 'a' || var1 == 'A'){
+			this.num = !this.num;
+		} else { //To write to the textbox. ONLY NUMS
+			if(mode == 2){
+				this.field.handleKeyTypeOnlyNumbersAndDot(var1, var2);
+			} else {
+				this.field.handleKeyTypeOnlyNumbers(var1, var2);
+			}
+		}
+		((GuiButton)this.controlList.get(0)).enabled = this.field.displayString.length() > 0;
+		super.keyTyped(var1, var2);
+	}
+}
--- net/minecraft/src/GuiDeleteWorld.java
+++ net/minecraft/src/GuiDeleteWorld.java
@@ -4,9 +4,10 @@
 import net.minecraft.client.Minecraft;
 
 public class GuiDeleteWorld extends GuiSelectWorld {
-	public GuiDeleteWorld(GuiScreen var1) {
+	public GuiDeleteWorld(GuiScreen var1, short ag) {
 		super(var1);
 		this.screenTitle = "Delete world";
+		this.page = ag;
 	}
 
 	public void initGui2() {
--- net/minecraft/src/GuiSelectWorld.java
+++ net/minecraft/src/GuiSelectWorld.java
@@ -7,6 +7,7 @@
 	protected GuiScreen parentScreen;
 	protected String screenTitle = "Select world";
 	private boolean selected = false;
+	protected short page = 0;
 
 	public GuiSelectWorld(GuiScreen var1) {
 		this.parentScreen = var1;
@@ -16,17 +17,16 @@
 		File var1 = Minecraft.getMinecraftDir();
 
 		for(int var2 = 0; var2 < 5; ++var2) {
-			NBTTagCompound var3 = World.func_629_a(var1, "World" + (var2 + 1));
+			NBTTagCompound var3 = World.func_629_a(var1, "World" + (var2 + 1 + (page * 5)));
 			if(var3 == null) {
 				this.controlList.add(new GuiButton(var2, this.width / 2 - 100, this.height / 6 + 24 * var2, "- empty -"));
 			} else {
-				String var4 = "World " + (var2 + 1);
 				long var5 = var3.getLong("SizeOnDisk");
-				var4 = var4 + " (" + (float)(var5 / 1024L * 100L / 1024L) / 100.0F + " MB)";
+				String var4 = "World " + (var2 + 1 + (page * 5)) + " (" + (float)(var5 / 1024L * 100L / 1024L) / 100.0F + " MB)";
 				this.controlList.add(new GuiButton(var2, this.width / 2 - 100, this.height / 6 + 24 * var2, var4));
 			}
 		}
-
+		
 		this.initGui2();
 	}
 
@@ -34,38 +34,93 @@
 		File var2 = Minecraft.getMinecraftDir();
 		return World.func_629_a(var2, "World" + var1) != null ? "World" + var1 : null;
 	}
+	
+	public boolean isWorldCreated(int j){
+		File var1 = Minecraft.getMinecraftDir();
+		NBTTagCompound var3 = World.func_629_a(var1, "World" + j);
+		if(var3 == null){
+			return false;
+		}
+		return true;
+	}
 
 	public void initGui2() {
-		this.controlList.add(new GuiButton(5, this.width / 2 - 100, this.height / 6 + 120 + 12, "Delete world..."));
+		this.controlList.add(new GuiButton(5, this.width / 2 - 100, this.height / 6 + 144, "Delete world..."));
 		this.controlList.add(new GuiButton(6, this.width / 2 - 100, this.height / 6 + 168, "Cancel"));
+		this.controlList.add(new GuiTinyButton(7, this.width / 2 - 125 , this.height / 6 + 48, "<"));
+		this.controlList.add(new GuiTinyButton(8, this.width / 2 + 105 , this.height / 6 + 48, ">"));
+		((GuiButton)this.controlList.get(7)).enabled = page > 0;
+		((GuiButton)this.controlList.get(8)).enabled = page < 255;
 	}
 
 	protected void actionPerformed(GuiButton var1) {
 		if(var1.enabled) {
 			if(var1.id < 5) {
-				this.selectWorld(var1.id + 1);
+				this.selectWorld(var1.id + 1 + (page * 5));
 			} else if(var1.id == 5) {
-				this.mc.displayGuiScreen(new GuiDeleteWorld(this));
+				this.mc.displayGuiScreen(new GuiDeleteWorld(this, page));
 			} else if(var1.id == 6) {
 				this.mc.displayGuiScreen(this.parentScreen);
+			} else if(var1.id == 7) {
+				this.page--;
+				updateButtons();
+			} else if(var1.id == 8) {
+				this.page++;
+				updateButtons();
 			}
-
 		}
 	}
 
 	public void selectWorld(int var1) {
-		this.mc.displayGuiScreen((GuiScreen)null);
-		if(!this.selected) {
-			this.selected = true;
-			this.mc.field_6327_b = new PlayerControllerSP(this.mc);
-			this.mc.func_6247_b("World" + var1);
+		if(isWorldCreated(var1)){	
 			this.mc.displayGuiScreen((GuiScreen)null);
-		}
+			if(!this.selected) {
+				this.selected = true;
+				this.mc.field_6327_b = new PlayerControllerSP(this.mc);
+				this.mc.func_6247_b("World" + var1, (WorldCreationSettings)null);
+				this.mc.displayGuiScreen((GuiScreen)null);
+			}
+		} else {
+			this.mc.displayGuiScreen(new GuiCreateWorld(this, var1));
+		}
+	}
+	
+	protected void updateButtons(){
+		File var1 = Minecraft.getMinecraftDir();
+		
+		for(int var2 = 0; var2 < 5; ++var2) {
+			NBTTagCompound var3 = World.func_629_a(var1, "World" + (var2 + 1 + (page * 5)));
+			if(var3 == null) {
+				((GuiButton)this.controlList.get(var2)).displayString = "- empty -";
+			} else {
+				long var5 = var3.getLong("SizeOnDisk");
+				String var4 = "World " + (var2 + 1 + (page * 5)) + " (" + (float)(var5 / 1024L * 100L / 1024L) / 100.0F + " MB)";
+				((GuiButton)this.controlList.get(var2)).displayString = var4;
+			}
+		}
+		
+		((GuiButton)this.controlList.get(7)).enabled = page > 0;
+		((GuiButton)this.controlList.get(8)).enabled = page < 255;
 	}
 
 	public void drawScreen(int var1, int var2, float var3) {
 		this.drawDefaultBackground();
 		this.drawCenteredString(this.fontRenderer, this.screenTitle, this.width / 2, 20, 16777215);
+		this.drawCenteredString(this.fontRenderer, "Page " + (page + 1), this.width / 2, this.height / 6 + 128, 16777215);
 		super.drawScreen(var1, var2, var3);
+	}
+	
+	protected void keyTyped(char var1, int var2){
+		if(var2 == 205){ //Flecha derecha
+			this.actionPerformed((GuiButton)this.controlList.get(8));
+		} else if(var2 == 203){ //Flecha izquierda
+			this.actionPerformed((GuiButton)this.controlList.get(7));
+		} else {
+			super.keyTyped(var1, var2);
+		}/* else if(var2 == 200){ //Flecha arriba
+			this.actionPerformed((GuiButton)this.controlList.get(8));
+		} else if(var2 == 208){ //Flecha abajo
+			this.actionPerformed((GuiButton)this.controlList.get(7));
+		} */
 	}
 }
--- /dev/null
+++ net/minecraft/src/WorldGenPyramid.java
@@ -1,0 +1,38 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class WorldGenPyramid extends WorldGenerator {
+	protected int block;
+	
+	public WorldGenPyramid(int b){
+		this.block = b;
+	}
+	
+	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
+		if(var1.getBlockId(var3, var4, var5) != 0) {
+			return false;
+		}
+		placeLayer(var1, var3, var4, var5, this.block, 0);
+
+		return true;
+	}
+	
+	public void placeLayer(World w, int centerX, int y, int centerZ, int b, int size){
+		if(y < 56){
+			return;
+		}
+		for(int i = -size; i < size + 1; i++){
+			for(int j = -size; j < size + 1; j++){
+				placeBlock(w, centerX + i, y, centerZ + j, b);
+			}
+		}
+		placeLayer(w, centerX, y - 1, centerZ, b, size + 1);
+	}
+	
+	public void placeBlock(World w, int x, int y, int z, int b){
+		if(Agrupation.pyramidReplace.contains(w.getBlockId(x, y, z))){
+			w.setBlockWithNotify(x, y, z, b);
+		}
+	}
+}
--- net/minecraft/src/EntitySlime.java
+++ net/minecraft/src/EntitySlime.java
@@ -4,7 +4,7 @@
 	public float field_768_a;
 	public float field_767_b;
 	private int field_769_d = 0;
-	public int field_770_c = 1;
+	public int field_770_c = 1; //Size
 
 	public EntitySlime(World var1) {
 		super(var1);
@@ -15,7 +15,7 @@
 		this.func_441_c(this.field_770_c);
 	}
 
-	public void func_441_c(int var1) {
+	public void func_441_c(int var1) { //Initializes values
 		this.field_770_c = var1;
 		this.setSize(0.6F * (float)var1, 0.6F * (float)var1);
 		this.health = var1 * var1;
@@ -31,11 +31,14 @@
 		super.readEntityFromNBT(var1);
 		this.field_770_c = var1.getInteger("Size") + 1;
 	}
-
 	public void onUpdate() {
+
 		this.field_767_b = this.field_768_a;
 		boolean var1 = this.onGround;
 		super.onUpdate();
+		if(this.worldObj.difficultySetting == 0) {
+			this.setEntityDead();
+		}
 		if(this.onGround && !var1) {
 			for(int var2 = 0; var2 < this.field_770_c * 8; ++var2) {
 				float var3 = this.rand.nextFloat() * (float)Math.PI * 2.0F;
@@ -85,7 +88,7 @@
 	}
 
 	public void setEntityDead() {
-		if(this.field_770_c > 1 && this.health == 0) {
+		if(this.field_770_c > 1 && this.health < 1) {
 			for(int var1 = 0; var1 < 4; ++var1) {
 				float var2 = ((float)(var1 % 2) - 0.5F) * (float)this.field_770_c / 4.0F;
 				float var3 = ((float)(var1 / 2) - 0.5F) * (float)this.field_770_c / 4.0F;
@@ -120,7 +123,7 @@
 
 	public boolean getCanSpawnHere() {
 		Chunk var1 = this.worldObj.getChunkFromBlockCoords(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posZ));
-		return (this.field_770_c == 1 || this.worldObj.difficultySetting > 0) && this.rand.nextInt(10) == 0 && var1.func_997_a(987234911L).nextInt(10) == 0 && this.posY < 16.0D;
+		return (this.field_770_c == 1 || this.worldObj.difficultySetting > 0) && this.rand.nextInt(10) == 0 && var1.func_997_a(987234911L).nextInt(10) == 0 && this.posY < 24.0D && super.getCanSpawnHere();
 	}
 
 	protected float getSoundVolume() {
--- net/minecraft/src/BlockGrass.java
+++ net/minecraft/src/BlockGrass.java
@@ -20,6 +20,16 @@
 		}
 	}
 
+	public int getBlockTextureFromSide(int var1) {
+		if(var1 == 1) {
+			return 78;
+		} else if(var1 == 0) {
+			return 2;
+		} else {
+			return 3;
+		}
+	}
+
 	public int colorMultiplier(IBlockAccess var1, int var2, int var3, int var4) {
 		var1.func_4075_a().func_4069_a(var2, var4, 1, 1);
 		double var5 = var1.func_4075_a().temperature[0];
--- /dev/null
+++ net/minecraft/src/BlockAlchemy.java
@@ -1,0 +1,86 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockAlchemy extends Block {
+	private boolean t;
+	
+	protected BlockAlchemy(int var1, int var2, boolean var3) {
+		super(var1, var2, (var3 ? Material.iron : Material.wood));
+		t = var3;
+	}
+	
+	public boolean blockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5) {
+		Random rand = new Random();
+		ItemStack v32 = var5.inventory.getCurrentItem();
+		if(v32 != null && AlchemyRecipes.recipes.isARecipe(v32.itemID) && var1.getBlockMetadata(var2, var3, var4) == 1){
+			int r = AlchemyRecipes.recipes.getResult(v32.itemID, rand, this.t);
+			var1.playSoundEffect((double)((float)var2 + 0.5F), (double)((float)var3 + 0.5F), (double)((float)var4 + 0.5F), "random.glass", rand.nextFloat() * 0.25F + 0.75F, rand.nextFloat() * 1.0F + 0.3F);
+			for(int var7 = 0; var7 < 4; ++var7) {
+				var1.spawnParticle("redsmoke", (double)var2 + Math.random(), (double)var3 + Math.random() + 0.7D, (double)var4 + Math.random(), 0.0D, 0.0D, 0.0D);
+			}
+			--var5.inventory.getCurrentItem().stackSize;
+			if(var5.inventory.getCurrentItem().stackSize < 1){
+				var5.inventory.mainInventory[var5.inventory.currentItem] = null;
+			}
+			if(willDischarge()){
+				for(int var7 = 0; var7 < 10; ++var7) {
+					var1.spawnParticle("flame", (double)var2 + Math.random(), (double)var3 + Math.random() + 0.7D, (double)var4 + Math.random(), 0.0D, 0.0D, 0.0D);
+				}
+				var1.playSoundEffect((double)((float)var2 + 0.5F), (double)((float)var3 + 0.5F), (double)((float)var4 + 0.5F), "fire.fire", rand.nextFloat() * 0.3F + 1.2F, rand.nextFloat() * 0.3F + 0.2F);
+				var1.setBlockMetadataWithNotify(var2, var3, var4, 0);
+			}
+			if(r != -1){
+				var5.inventory.addItemStackToInventory(new ItemStack(r, 1));
+			}
+		} else if(v32 != null && v32.itemID == Item.gunpowder.shiftedIndex){
+			if(var1.getBlockMetadata(var2, var3, var4) == 0){
+				var1.playSoundEffect((double)((float)var2 + 0.5F), (double)((float)var3 + 0.5F), (double)((float)var4 + 0.5F), "random.fizz", rand.nextFloat() * 0.1F + 0.9F, rand.nextFloat() * 0.5F + 0.3F);
+				--var5.inventory.getCurrentItem().stackSize;
+				if(var5.inventory.getCurrentItem().stackSize < 1){
+					var5.inventory.mainInventory[var5.inventory.currentItem] = null;
+				}
+				for(int var7 = 0; var7 < 5; ++var7) {
+					var1.spawnParticle("largesmoke", (double)var2 + Math.random(), (double)var3 + Math.random() + 0.5D, (double)var4 + Math.random(), 0.0D, 0.0D, 0.0D);
+				}
+				var1.setBlockMetadataWithNotify(var2, var3, var4, 1);
+			}
+		}
+		return true;
+	}
+	public int getBlockTexture(IBlockAccess var1, int var2, int var3, int var4, int var5) {
+		int var6 = var1.getBlockMetadata(var2, var3, var4);
+		int v = (var6 == 1 ? 17 : 1);
+		if(var5 == 1) { //top
+			return this.blockIndexInTexture + v;
+		} else if (var5 == 0){ //Bottom
+			return Block.blockPlumbum.blockIndexInTexture + 16;
+		} else {
+			return this.blockIndexInTexture;
+		}
+	}
+	public int getBlockTextureFromSide(int var1) {
+		if(var1 == 1){ //Top
+			return this.blockIndexInTexture + 1;
+		} else if (var1 == 0){ //Bottom
+			return Block.blockPlumbum.blockIndexInTexture + 16;
+		} else {
+			return this.blockIndexInTexture;
+		}
+	}
+	
+	private boolean willDischarge(){
+		Random rand = new Random();
+		if(!t){
+			
+			if(rand.nextInt(30) == 0){
+				return true;
+			}
+			return false;
+		}
+		if(rand.nextInt(96) == 0){
+			return true;
+		}
+		return false;
+	}
+}
--- /dev/null
+++ net/minecraft/src/EntityRedSmokeFX.java
@@ -1,0 +1,65 @@
+package net.minecraft.src;
+
+public class EntityRedSmokeFX extends EntityFX {
+	float field_671_a;
+
+	public EntityRedSmokeFX(World var1, double var2, double var4, double var6) {
+		this(var1, var2, var4, var6, 1.0F);
+	}
+
+	public EntityRedSmokeFX(World var1, double var2, double var4, double var6, float var8) {
+		super(var1, var2, var4, var6, 0.0D, 0.0D, 0.0D);
+		this.motionX *= (double)0.1F;
+		this.motionY *= (double)0.1F;
+		this.motionZ *= (double)0.1F;
+		//this.field_663_i = this.field_662_j = this.field_661_k = (float)(Math.random() * (double)0.3F);
+		this.field_663_i = this.field_662_j = this.field_661_k = (float)(Math.random() * 0.8D);
+		this.field_662_j = this.field_661_k = (float)(Math.random() * (double)0.1F);
+		this.field_665_g *= 12.0F / 16.0F;
+		this.field_665_g *= var8;
+		this.field_671_a = this.field_665_g;
+		this.field_666_f = (int)(8.0D / (Math.random() * 0.8D + 0.2D));
+		this.field_666_f = (int)((float)this.field_666_f * var8);
+		this.field_9314_ba = false;
+	}
+
+	public void func_406_a(Tessellator var1, float var2, float var3, float var4, float var5, float var6, float var7) {
+		float var8 = ((float)this.e + var2) / (float)this.field_666_f * 32.0F;
+		if(var8 < 0.0F) {
+			var8 = 0.0F;
+		}
+
+		if(var8 > 1.0F) {
+			var8 = 1.0F;
+		}
+
+		this.field_665_g = this.field_671_a * var8;
+		super.func_406_a(var1, var2, var3, var4, var5, var6, var7);
+	}
+
+	public void onUpdate() {
+		this.prevPosX = this.posX;
+		this.prevPosY = this.posY;
+		this.prevPosZ = this.posZ;
+		if(this.e++ >= this.field_666_f) {
+			this.setEntityDead();
+		}
+
+		this.field_670_b = 7 - this.e * 8 / this.field_666_f;
+		this.motionY += 0.004D;
+		this.moveEntity(this.motionX, this.motionY, this.motionZ);
+		if(this.posY == this.prevPosY) {
+			this.motionX *= 1.1D;
+			this.motionZ *= 1.1D;
+		}
+
+		this.motionX *= (double)0.96F;
+		this.motionY *= (double)0.96F;
+		this.motionZ *= (double)0.96F;
+		if(this.onGround) {
+			this.motionX *= (double)0.7F;
+			this.motionZ *= (double)0.7F;
+		}
+
+	}
+}
--- net/minecraft/src/GuiControls.java
+++ net/minecraft/src/GuiControls.java
@@ -5,6 +5,10 @@
 	protected String screenTitle = "Controls";
 	private GameSettings options;
 	private int buttonId = -1;
+	private int keysPerPage = 12;
+	private int page = 0;
+	private int numberOfPages;
+	private boolean pagesActivated;
 
 	public GuiControls(GuiScreen var1, GameSettings var2) {
 		this.parentScreen = var1;
@@ -12,32 +16,91 @@
 	}
 
 	public void initGui() {
-		for(int var1 = 0; var1 < this.options.keyBindings.length; ++var1) {
-			this.controlList.add(new GuiSmallButton(var1, this.width / 2 - 155 + var1 % 2 * 160, this.height / 6 + 24 * (var1 >> 1), this.options.getKeyBinding(var1)));
-		}
+		this.calculateTotalPages();
+		this.createButtons();
 
-		this.controlList.add(new GuiButton(200, this.width / 2 - 100, this.height / 6 + 168, "Done"));
+		if(this.pagesActivated){
+			this.controlList.add(new GuiTinyButton(300, this.width / 2 - 155 - 24 , this.height / 6 + 48 + 12, "<"));
+			this.controlList.add(new GuiTinyButton(400, this.width / 2 + 155 + 4 , this.height / 6 + 48 + 12, ">"));
+		}
+		this.controlList.add(new GuiButton(200, this.width / 2 - 100, this.height / 6 + 132 + 24, "Done"));
+		this.updateButtons();
+	}
+	
+	public void createButtons(){
+		for(int var1 = 0; var1 < this.keysPerPage; ++var1) {
+			this.controlList.add(new GuiSmallButton(var1, this.width / 2 - 155 + var1 % 2 * 160, this.height / 6 + 24 * (var1 >> 1), ""));
+		}
+	}
+	
+	public void updateButtons(){
+		int num = this.getNumberOfKeysInPage(this.page);
+		
+		for(int var1 = 0; var1 < this.keysPerPage; ++var1) {
+			((GuiButton)this.controlList.get(var1)).enabled2 = true;
+		}
+		
+		for(int var1 = num; var1 < this.keysPerPage; ++var1) {
+			((GuiButton)this.controlList.get(var1)).enabled2 = false;
+		}
+		
+		for(int var1 = 0; var1 < num; ++var1) {
+			((GuiButton)this.controlList.get(var1)).displayString = this.options.getKeyBinding((page * this.keysPerPage) + var1);
+		}
+		this.updatePageButtons();
+	}
+	
+	public void updatePageButtons(){
+		if(pagesActivated){
+			((GuiButton)this.controlList.get(this.keysPerPage)).enabled = page > 0;
+			((GuiButton)this.controlList.get(this.keysPerPage+1)).enabled = page < this.numberOfPages - 1;
+		}
+	}
+	
+	private void calculateTotalPages() {
+        this.numberOfPages = this.options.keyBindings.length / keysPerPage;
+        if (this.options.keyBindings.length % keysPerPage != 0) {
+            this.numberOfPages++;
+        }
+		this.pagesActivated = this.numberOfPages > 1 ? true : false;
+    }
+	
+	private int getNumberOfKeysInPage(int p){
+		if(!pagesActivated){
+			return this.options.keyBindings.length;
+		}
+		return p < this.numberOfPages - 1 ? this.keysPerPage : this.options.keyBindings.length % keysPerPage;
 	}
 
 	protected void actionPerformed(GuiButton var1) {
-		for(int var2 = 0; var2 < this.options.keyBindings.length; ++var2) {
-			((GuiButton)this.controlList.get(var2)).displayString = this.options.getKeyBinding(var2);
+		for(int var2 = 0; var2 < this.getNumberOfKeysInPage(this.page); ++var2) {
+			((GuiButton)this.controlList.get(var2)).displayString = this.options.getKeyBinding((page * this.keysPerPage) + var2);
 		}
 
 		if(var1.id == 200) {
 			this.mc.displayGuiScreen(this.parentScreen);
+		} else if(var1.id == 300){
+			page--;
+			updateButtons();
+		} else if(var1.id == 400){
+			page++;
+			updateButtons();
 		} else {
 			this.buttonId = var1.id;
-			var1.displayString = "> " + this.options.getKeyBinding(var1.id) + " <";
+			var1.displayString = "> " + this.options.getKeyBinding((page * this.keysPerPage) + var1.id) + " <";
 		}
 
 	}
 
 	protected void keyTyped(char var1, int var2) {
 		if(this.buttonId >= 0) {
-			this.options.setKeyBinding(this.buttonId, var2);
-			((GuiButton)this.controlList.get(this.buttonId)).displayString = this.options.getKeyBinding(this.buttonId);
+			this.options.setKeyBinding((page * this.keysPerPage) + this.buttonId, var2);
+			((GuiButton)this.controlList.get(this.buttonId)).displayString = this.options.getKeyBinding((page * this.keysPerPage) + this.buttonId);
 			this.buttonId = -1;
+		} else if(var2 == 205){ //Flecha derecha
+			this.actionPerformed((GuiButton)this.controlList.get(this.keysPerPage+1));
+		} else if(var2 == 203){ //Flecha izquierda
+			this.actionPerformed((GuiButton)this.controlList.get(this.keysPerPage));
 		} else {
 			super.keyTyped(var1, var2);
 		}
@@ -46,7 +109,7 @@
 
 	public void drawScreen(int var1, int var2, float var3) {
 		this.drawDefaultBackground();
-		this.drawCenteredString(this.fontRenderer, this.screenTitle, this.width / 2, 20, 16777215);
+		this.drawCenteredString(this.fontRenderer, this.screenTitle + " - Page " + (this.page + 1), this.width / 2, 20, 16777215);
 		super.drawScreen(var1, var2, var3);
 	}
 }
--- net/minecraft/src/SoundManager.java
+++ net/minecraft/src/SoundManager.java
@@ -1,12 +1,22 @@
 package net.minecraft.src;
 
 import java.io.File;
+import java.io.IOException;
 import java.util.Random;
+import net.minecraft.client.Minecraft;
 import paulscode.sound.SoundSystem;
 import paulscode.sound.SoundSystemConfig;
+import paulscode.sound.codecs.CodecIBXM;
 import paulscode.sound.codecs.CodecJOrbis;
 import paulscode.sound.codecs.CodecWav;
 import paulscode.sound.libraries.LibraryLWJGLOpenAL;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.io.FileOutputStream;
+import java.util.Scanner;
+import java.util.Arrays;
+import java.nio.file.Paths;
+import java.nio.file.Files;
 
 public class SoundManager {
 	private static SoundSystem sndSystem;
@@ -19,19 +29,54 @@
 	private Random rand = new Random();
 	private int field_583_i = this.rand.nextInt(12000);
 
-	public void func_340_a(GameSettings var1) {
+	public void func_340_a(GameSettings paramgq) {
 		this.soundPoolStreaming.field_1657_b = false;
-		this.options = var1;
-		if(!loaded && (var1 == null || var1.soundVolume != 0.0F || var1.musicVolume != 0.0F)) {
+		this.options = paramgq;
+		if(!loaded && (paramgq == null || paramgq.soundVolume != 0.0F || paramgq.musicVolume != 0.0F)) {
 			this.tryToSetLibraryAndCodecs();
+		}
+	
+		this.loadAllSounds(this.getSoundResources());
+		loadModAudio("/resources/mod/sound", this.soundPoolSounds);
+		loadModAudio("/resources/mod/streaming", this.soundPoolStreaming);
+		loadModAudio("/resources/mod/music", this.soundPoolMusic);
+	}
+
+	private static void loadModAudio(String folder, SoundPool array) {
+		File base = new File (Minecraft.getMinecraftDir().getPath() + folder);
+
+		try {
+			walkFolder(base, base, array);
+		} catch (IOException var4) {
+			var4.printStackTrace();
+		}
+
+	}
+
+	private static void walkFolder(File root, File folder, SoundPool array) throws IOException {
+		if(folder.exists() || folder.createNewFile()) {
+			File[] files = folder.listFiles();
+			if(files != null && files.length > 0) {
+				for(int i = 0; i < files.length; ++i) {
+					if(files[i].isDirectory()) {
+						walkFolder(root, files[i], array);
+					} else if(files[i].isFile()) {
+						String path = files[i].getPath().substring(root.getPath().length() + 1).replace('\\', '/');
+						if(path.length() > 0) {
+							array.addSound(path, files[i]);
+							System.out.println("[EasyAudioMod]AudioMod found sound: \"" + path + "\"");
+						}
+					}
+				}
+			}
 		}
 
 	}
 
 	private void tryToSetLibraryAndCodecs() {
 		try {
-			float var1 = this.options.soundVolume;
-			float var2 = this.options.musicVolume;
+			float localThrowable = this.options.soundVolume;
+			float f2 = this.options.musicVolume;
 			this.options.soundVolume = 0.0F;
 			this.options.musicVolume = 0.0F;
 			this.options.saveOptions();
@@ -39,9 +84,21 @@
 			SoundSystemConfig.setCodec("ogg", CodecJOrbis.class);
 			SoundSystemConfig.setCodec("mus", CodecMus.class);
 			SoundSystemConfig.setCodec("wav", CodecWav.class);
+			try {
+				if(Class.forName("paulscode.sound.codecs.CodecIBXM") != null) {
+					SoundSystemConfig.setCodec("xm", CodecIBXM.class);
+					SoundSystemConfig.setCodec("s3m", CodecIBXM.class);
+					SoundSystemConfig.setCodec("mod", CodecIBXM.class);
+				}
+			} catch (ClassNotFoundException ex) {
+				System.err.println("Error loading AudioMod");
+				ex.printStackTrace();
+			}
+			
+
 			sndSystem = new SoundSystem();
-			this.options.soundVolume = var1;
-			this.options.musicVolume = var2;
+			this.options.soundVolume = localThrowable;
+			this.options.musicVolume = f2;
 			this.options.saveOptions();
 		} catch (Throwable var3) {
 			var3.printStackTrace();
@@ -56,10 +113,12 @@
 			this.tryToSetLibraryAndCodecs();
 		}
 
-		if(this.options.musicVolume == 0.0F) {
-			sndSystem.stop("BgMusic");
-		} else {
-			sndSystem.setVolume("BgMusic", this.options.musicVolume);
+		if(sndSystem != null) {
+			if(this.options.musicVolume == 0.0F) {
+				sndSystem.stop("BgMusic");
+			} else {
+				sndSystem.setVolume("BgMusic", this.options.musicVolume);
+			}
 		}
 
 	}
@@ -71,30 +130,30 @@
 
 	}
 
-	public void func_6372_a(String var1, File var2) {
-		this.soundPoolSounds.addSound(var1, var2);
-	}
-
-	public void addStreaming(String var1, File var2) {
-		this.soundPoolStreaming.addSound(var1, var2);
-	}
-
-	public void addMusic(String var1, File var2) {
-		this.soundPoolMusic.addSound(var1, var2);
+	public void func_6372_a(String paramString, File paramFile) {
+		this.soundPoolSounds.addSound(paramString, paramFile);
+	}
+
+	public void addStreaming(String paramString, File paramFile) {
+		this.soundPoolStreaming.addSound(paramString, paramFile);
+	}
+
+	public void addMusic(String paramString, File paramFile) {
+		this.soundPoolMusic.addSound(paramString, paramFile);
 	}
 
 	public void func_4033_c() {
-		if(loaded && this.options.musicVolume != 0.0F) {
+		if(loaded && this.options.musicVolume != 0.0F && sndSystem != null) {
 			if(!sndSystem.playing("BgMusic") && !sndSystem.playing("streaming")) {
 				if(this.field_583_i > 0) {
 					--this.field_583_i;
 					return;
 				}
 
-				SoundPoolEntry var1 = this.soundPoolMusic.getRandomSound();
-				if(var1 != null) {
+				SoundPoolEntry localal = this.soundPoolMusic.getRandomSound();
+				if(localal != null) {
 					this.field_583_i = this.rand.nextInt(12000) + 12000;
-					sndSystem.backgroundMusic("BgMusic", var1.soundUrl, var1.soundName, false);
+					sndSystem.backgroundMusic("BgMusic", localal.soundUrl, localal.soundName, false);
 					sndSystem.setVolume("BgMusic", this.options.musicVolume);
 					sndSystem.play("BgMusic");
 				}
@@ -103,92 +162,197 @@
 		}
 	}
 
-	public void func_338_a(EntityLiving var1, float var2) {
-		if(loaded && this.options.soundVolume != 0.0F) {
-			if(var1 != null) {
-				float var3 = var1.prevRotationYaw + (var1.rotationYaw - var1.prevRotationYaw) * var2;
-				double var4 = var1.prevPosX + (var1.posX - var1.prevPosX) * (double)var2;
-				double var6 = var1.prevPosY + (var1.posY - var1.prevPosY) * (double)var2;
-				double var8 = var1.prevPosZ + (var1.posZ - var1.prevPosZ) * (double)var2;
-				float var10 = MathHelper.cos(-var3 * ((float)Math.PI / 180.0F) - (float)Math.PI);
-				float var11 = MathHelper.sin(-var3 * ((float)Math.PI / 180.0F) - (float)Math.PI);
-				float var12 = -var11;
-				float var13 = 0.0F;
-				float var14 = -var10;
-				float var15 = 0.0F;
-				float var16 = 1.0F;
-				float var17 = 0.0F;
-				sndSystem.setListenerPosition((float)var4, (float)var6, (float)var8);
-				sndSystem.setListenerOrientation(var12, var13, var14, var15, var16, var17);
+	public void func_338_a(EntityLiving paramhf, float paramFloat) {
+		if(loaded && this.options.soundVolume != 0.0F && sndSystem != null) {
+			if(paramhf != null) {
+				float f1 = paramhf.prevRotationYaw + (paramhf.rotationYaw - paramhf.prevRotationYaw) * paramFloat;
+				double d1 = paramhf.prevPosX + (paramhf.posX - paramhf.prevPosX) * (double)paramFloat;
+				double d2 = paramhf.prevPosY + (paramhf.posY - paramhf.prevPosY) * (double)paramFloat;
+				double d3 = paramhf.prevPosZ + (paramhf.posZ - paramhf.prevPosZ) * (double)paramFloat;
+				float f2 = MathHelper.cos(-f1 * 0.01745329F - 3.141593F);
+				float f3 = MathHelper.sin(-f1 * 0.01745329F - 3.141593F);
+				float f4 = -f3;
+				float f5 = 0.0F;
+				float f6 = -f2;
+				float f7 = 0.0F;
+				float f8 = 1.0F;
+				float f9 = 0.0F;
+				sndSystem.setListenerPosition((float)d1, (float)d2, (float)d3);
+				sndSystem.setListenerOrientation(f4, f5, f6, f7, f8, f9);
 			}
 		}
 	}
 
-	public void func_331_a(String var1, float var2, float var3, float var4, float var5, float var6) {
-		if(loaded && this.options.soundVolume != 0.0F) {
-			String var7 = "streaming";
+	public void func_331_a(String paramString, float paramFloat1, float paramFloat2, float paramFloat3, float paramFloat4, float paramFloat5) {
+		if(loaded && this.options.soundVolume != 0.0F && sndSystem != null) {
+			String str = "streaming";
 			if(sndSystem.playing("streaming")) {
 				sndSystem.stop("streaming");
 			}
 
-			if(var1 != null) {
-				SoundPoolEntry var8 = this.soundPoolStreaming.getRandomSoundFromSoundPool(var1);
-				if(var8 != null && var5 > 0.0F) {
+			if(paramString != null) {
+				SoundPoolEntry localal = this.soundPoolStreaming.getRandomSoundFromSoundPool(paramString);
+				if(localal != null && paramFloat4 > 0.0F) {
 					if(sndSystem.playing("BgMusic")) {
 						sndSystem.stop("BgMusic");
 					}
 
-					float var9 = 16.0F;
-					sndSystem.newStreamingSource(true, var7, var8.soundUrl, var8.soundName, false, var2, var3, var4, 2, var9 * 4.0F);
-					sndSystem.setVolume(var7, 0.5F * this.options.soundVolume);
-					sndSystem.play(var7);
-				}
-
-			}
-		}
-	}
-
-	public void func_336_b(String var1, float var2, float var3, float var4, float var5, float var6) {
-		if(loaded && this.options.soundVolume != 0.0F) {
-			SoundPoolEntry var7 = this.soundPoolSounds.getRandomSoundFromSoundPool(var1);
-			if(var7 != null && var5 > 0.0F) {
-				this.field_587_e = (this.field_587_e + 1) % 256;
-				String var8 = "sound_" + this.field_587_e;
-				float var9 = 16.0F;
-				if(var5 > 1.0F) {
-					var9 *= var5;
-				}
-
-				sndSystem.newSource(var5 > 1.0F, var8, var7.soundUrl, var7.soundName, false, var2, var3, var4, 2, var9);
-				sndSystem.setPitch(var8, var6);
-				if(var5 > 1.0F) {
-					var5 = 1.0F;
-				}
-
-				sndSystem.setVolume(var8, var5 * this.options.soundVolume);
-				sndSystem.play(var8);
-			}
-
-		}
-	}
-
-	public void func_337_a(String var1, float var2, float var3) {
-		if(loaded && this.options.soundVolume != 0.0F) {
-			SoundPoolEntry var4 = this.soundPoolSounds.getRandomSoundFromSoundPool(var1);
-			if(var4 != null) {
-				this.field_587_e = (this.field_587_e + 1) % 256;
-				String var5 = "sound_" + this.field_587_e;
-				sndSystem.newSource(false, var5, var4.soundUrl, var4.soundName, false, 0.0F, 0.0F, 0.0F, 0, 0.0F);
-				if(var2 > 1.0F) {
-					var2 = 1.0F;
-				}
-
-				var2 *= 0.25F;
-				sndSystem.setPitch(var5, var3);
-				sndSystem.setVolume(var5, var2 * this.options.soundVolume);
-				sndSystem.play(var5);
-			}
-
-		}
-	}
+					float f1 = 16.0F;
+					sndSystem.newStreamingSource(true, str, localal.soundUrl, localal.soundName, false, paramFloat1, paramFloat2, paramFloat3, 2, f1 * 4.0F);
+					sndSystem.setVolume(str, 0.5F * this.options.soundVolume);
+					sndSystem.play(str);
+				}
+
+			}
+		}
+	}
+
+	//playsound args: soundName, x, y, z, volume, pitch
+	public void func_336_b(String paramString, float paramFloat1, float paramFloat2, float paramFloat3, float paramFloat4, float paramFloat5) {
+		if(loaded && this.options.soundVolume != 0.0F && sndSystem != null) {
+			SoundPoolEntry localal = this.soundPoolSounds.getRandomSoundFromSoundPool(paramString);
+			if(localal != null && paramFloat4 > 0.0F) {
+				this.field_587_e = (this.field_587_e + 1) % 256;
+				String str = "sound_" + this.field_587_e;
+				float f1 = 16.0F;
+				if(paramFloat4 > 1.0F) {
+					f1 *= paramFloat4;
+				}
+
+				sndSystem.newSource(paramFloat4 > 1.0F, str, localal.soundUrl, localal.soundName, false, paramFloat1, paramFloat2, paramFloat3, 2, f1);
+				sndSystem.setPitch(str, paramFloat5);
+				if(paramFloat4 > 1.0F) {
+					paramFloat4 = 1.0F;
+				}
+
+				sndSystem.setVolume(str, paramFloat4 * this.options.soundVolume);
+				sndSystem.play(str);
+			}
+
+		}
+	}
+	
+	//playsoundfx
+	public void func_337_a(String paramString, float paramFloat1, float paramFloat2) { 
+		if(loaded && this.options.soundVolume != 0.0F && sndSystem != null) {
+			SoundPoolEntry localal = this.soundPoolSounds.getRandomSoundFromSoundPool(paramString);
+			if(localal != null) {
+				this.field_587_e = (this.field_587_e + 1) % 256;
+				String str = "sound_" + this.field_587_e;
+				sndSystem.newSource(false, str, localal.soundUrl, localal.soundName, false, 0.0F, 0.0F, 0.0F, 0, 0.0F);
+				if(paramFloat1 > 1.0F) {
+					paramFloat1 = 1.0F;
+				}
+
+				paramFloat1 *= 0.25F;
+				sndSystem.setPitch(str, paramFloat2);
+				sndSystem.setVolume(str, paramFloat1 * this.options.soundVolume);
+				sndSystem.play(str);
+			} else {
+				//System.err.println("Couldn't find sound " + paramString);
+			}
+
+		}
+	}
+	
+	//EASYAUDIOMOD
+	
+	private void loadAllSounds(String[] sounds)
+    {
+        if(sounds != null && sounds.length > 0){
+			for (String a : sounds)
+			{
+				if(a == null){
+					continue;
+				}
+				String[] b = a.split(":");
+				if (b.length == 4){
+					String p = "";
+					switch (b[0]) {
+						case "0":
+							p = "sound/";
+							break;
+						case "1":
+							p = "music/";
+							break;
+						case "2":
+							p = "streaming/";
+							break;
+						default:
+							p = "sound/";
+							break;
+					}
+					this.loadCustomSound(b[1], "resources/mod/" + p + b[2]);
+				}
+			}
+		}
+    }
+
+    private void loadCustomSound(String source, String target)
+    {
+        try
+        {
+            System.out.println("[EasyAudioMod]Loading custom sound \"" + source + "\" to \"" + target.replace("\n","")+"\"");
+			Files.createDirectories(Paths.get(this.pathMinusFile(target)));
+			File f = new File(target);
+			if(!f.exists()){
+				f.createNewFile();
+			}
+			
+            InputStream in = SoundManager.class.getResourceAsStream(source);
+            OutputStream out = new FileOutputStream(target);
+            byte[] buf = new byte[8192];
+            int len = 0;
+			//System.out.println("aaa: " + (in == null));
+            while ((len = in.read(buf)) > 0)
+            {
+                out.write(buf, 0, len);
+            }
+
+            out.close();
+            in.close();
+        }
+        catch (Exception e)
+        {
+            e.printStackTrace();
+        }
+    }
+	
+	public String pathMinusFile(String path){
+		String[] b = path.split("/");
+		String result = "";
+		for(int i = 0; i < b.length - 1; i++){
+			result = result + b[i] + "/";
+		}
+		return result;
+	}
+	
+    public String[] getSoundResources()
+    {
+        String[] result = null;
+        String it = "";
+		
+        try
+        {
+            InputStream stream = SoundManager.class.getResourceAsStream("/easyaudiomod.txt");
+			if(stream != null){
+				Scanner s = new Scanner(stream).useDelimiter("\\A");
+				it = s.hasNext() ? s.next() : "";
+				result = it.split("\n");
+				System.out.println("[EasyAudioMod]Loaded easyaudiomod.txt, and it contains " + result.length + " lines");
+			}
+            
+        }
+        catch (Exception e)
+        {
+            e.printStackTrace();
+        }
+		if (result != null){
+			for(int i = 0; i < result.length; i++){
+				result[i] = result[i].replace("\n", "");
+			}
+		}
+
+        return result;
+    }
 }
--- /dev/null
+++ net/minecraft/src/BlockFastPath.java
@@ -1,0 +1,36 @@
+package net.minecraft.src;
+
+public class BlockFastPath extends Block {
+	public BlockFastPath(int var1, int var2) {
+		super(var1, var2, Material.rock);
+	}
+	
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
+		float var5 = 1.0F / 16.0F;
+		return AxisAlignedBB.getBoundingBoxFromPool((double)var2, (double)var3, (double)var4, (double)(var2 + 1), (double)((float)(var3 + 1) - var5), (double)(var4 + 1));
+	}
+
+	public void onEntityCollidedWithBlock(World var1, int var2, int var3, int var4, Entity var5) {
+		var5.motionX *= 1.2D;
+		var5.motionZ *= 1.2D;
+	}
+	
+	public int getBlockTexture(IBlockAccess var1, int var2, int var3, int var4, int var5) {
+		if(var5 == 1) { //top
+			return this.blockIndexInTexture - 16;
+		} else if (var5 == 0){ //Bottom
+			return this.blockIndexInTexture - 16;
+		} else {
+			return this.blockIndexInTexture;
+		}
+	}
+	public int getBlockTextureFromSide(int var1) {
+		if(var1 == 1){ //Top
+			return this.blockIndexInTexture - 16;
+		} else if (var1 == 0){ //Bottom
+			return this.blockIndexInTexture - 16;
+		} else {
+			return this.blockIndexInTexture;
+		}
+	}
+}
--- net/minecraft/src/GuiGameOver.java
+++ net/minecraft/src/GuiGameOver.java
@@ -38,7 +38,7 @@
 		GL11.glScalef(2.0F, 2.0F, 2.0F);
 		this.drawCenteredString(this.fontRenderer, "Game over!", this.width / 2 / 2, 30, 16777215);
 		GL11.glPopMatrix();
-		this.drawCenteredString(this.fontRenderer, "Score: &e" + this.mc.thePlayer.func_6417_t(), this.width / 2, 100, 16777215);
+		//this.drawCenteredString(this.fontRenderer, "Score: &e" + this.mc.thePlayer.func_6417_t(), this.width / 2, 100, 16777215);
 		super.drawScreen(var1, var2, var3);
 	}
 
--- /dev/null
+++ net/minecraft/src/RenderSlimeFire.java
@@ -1,0 +1,44 @@
+package net.minecraft.src;
+
+import org.lwjgl.opengl.GL11;
+
+public class RenderSlimeFire extends RenderLiving {
+	private ModelBase field_205_f;
+
+	public RenderSlimeFire(ModelBase var1, ModelBase var2, float var3) {
+		super(var1, var3);
+		this.field_205_f = var2;
+	}
+
+	protected boolean a(EntitySlimeFire var1, int var2) {
+		if(var2 == 0) {
+			this.func_4013_a(this.field_205_f);
+			GL11.glEnable(GL11.GL_NORMALIZE);
+			GL11.glEnable(GL11.GL_BLEND);
+			GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
+			return true;
+		} else {
+			if(var2 == 1) {
+				GL11.glDisable(GL11.GL_BLEND);
+				GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+			}
+
+			return false;
+		}
+	}
+
+	protected void a(EntitySlimeFire var1, float var2) {
+		float var3 = (var1.field_767_b + (var1.field_768_a - var1.field_767_b) * var2) / ((float)var1.field_770_c * 0.5F + 1.0F);
+		float var4 = 1.0F / (var3 + 1.0F);
+		float var5 = (float)var1.field_770_c;
+		GL11.glScalef(var4 * var5, 1.0F / var4 * var5, var4 * var5);
+	}
+
+	protected void func_6330_a(EntityLiving var1, float var2) {
+		this.a((EntitySlimeFire)var1, var2);
+	}
+
+	protected boolean func_166_a(EntityLiving var1, int var2) {
+		return this.a((EntitySlimeFire)var1, var2);
+	}
+}
--- net/minecraft/src/ItemTool.java
+++ net/minecraft/src/ItemTool.java
@@ -8,22 +8,46 @@
 
 	public ItemTool(int var1, int var2, int var3, Block[] var4) {
 		super(var1);
-		this.ingredientQuality = var3;
+		if(var3 == -1){
+			this.ability = 1;
+			var3 = 0;
+		}		
+		if(var3 == -2){
+			this.ability = 2;
+			this.ingredientQuality = 0;
+			var3 = 2;
+			this.maxDamage = 64 << 2;
+		} else {
+			this.ingredientQuality = var3;
+			this.maxDamage = 64 << var3;
+			if(var3 == 3) {
+				this.maxDamage *= 4;
+			}
+		}
+		
 		this.blocksEffectiveAgainst = var4;
 		this.maxStackSize = 1;
-		this.maxDamage = 32 << var3;
-		if(var3 == 3) {
-			this.maxDamage *= 4;
-		}
 
 		this.efficiencyOnProperMaterial = (float)((var3 + 1) * 2);
 		this.damageVsEntity = var2 + var3;
 	}
 
 	public float getStrVsBlock(ItemStack var1, Block var2) {
-		for(int var3 = 0; var3 < this.blocksEffectiveAgainst.length; ++var3) {
-			if(this.blocksEffectiveAgainst[var3] == var2) {
-				return this.efficiencyOnProperMaterial;
+		int mod = this.ability == 2 ? 4 : 1;
+		for(int var3 = 0; var3 < this.blocksEffectiveAgainst.length; ++var3) {
+			if(this.blocksEffectiveAgainst[var3] == var2) {
+				return this.efficiencyOnProperMaterial / mod;
+			}
+		}
+
+		return 1.0F;
+	}
+	
+	public float getStrVsBlockNether(ItemStack var1, Block var2) {
+		int mod = this.ability == 2 || this.ingredientQuality == 3 ? 1 : 3;
+		for(int var3 = 0; var3 < this.blocksEffectiveAgainst.length; ++var3) {
+			if(this.blocksEffectiveAgainst[var3] == var2) {
+				return this.efficiencyOnProperMaterial / mod;
 			}
 		}
 
@@ -35,7 +59,19 @@
 	}
 
 	public void hitBlock(ItemStack var1, int var2, int var3, int var4, int var5) {
-		var1.damageItem(1);
+		if(this.ability == 2){
+			var1.damageItem(4);
+		} else {
+			var1.damageItem(1);
+		}
+	}
+
+	public void hitBlockNether(ItemStack var1, int var2, int var3, int var4, int var5) {
+		if(this.ability == 2){
+			var1.damageItem(1);
+		} else {
+			var1.damageItem(4);
+		}
 	}
 
 	public int getDamageVsEntity(Entity var1) {
--- net/minecraft/src/ItemMinecart.java
+++ net/minecraft/src/ItemMinecart.java
@@ -11,7 +11,7 @@
 
 	public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7) {
 		int var8 = var3.getBlockId(var4, var5, var6);
-		if(var8 == Block.minecartTrack.blockID) {
+		if(Agrupation.rails.contains(var8)) {
 			if(!var3.multiplayerWorld) {
 				var3.entityJoinedWorld(new EntityMinecart(var3, (double)((float)var4 + 0.5F), (double)((float)var5 + 0.5F), (double)((float)var6 + 0.5F), this.field_317_a));
 			}
--- /dev/null
+++ ibxm/Pattern.java
@@ -1,0 +1,63 @@
+package ibxm;
+
+public class Pattern {
+	public int num_rows = 1;
+	private int data_offset;
+	private int note_index;
+	private byte[] pattern_data;
+
+	public Pattern() {
+		this.set_pattern_data(new byte[0]);
+	}
+
+	public void set_pattern_data(byte[] data) {
+		if(data != null) {
+			this.pattern_data = data;
+		}
+
+		this.data_offset = 0;
+		this.note_index = 0;
+	}
+
+	public void get_note(int[] note, int index) {
+		if(index < this.note_index) {
+			this.note_index = 0;
+			this.data_offset = 0;
+		}
+
+		while(this.note_index <= index) {
+			this.data_offset = this.next_note(this.data_offset, note);
+			++this.note_index;
+		}
+
+	}
+
+	public int next_note(int data_offset, int[] note) {
+		if(data_offset < 0) {
+			data_offset = this.pattern_data.length;
+		}
+
+		int bitmask = 128;
+		if(data_offset < this.pattern_data.length) {
+			bitmask = this.pattern_data[data_offset] & 255;
+		}
+
+		if((bitmask & 128) == 128) {
+			++data_offset;
+		} else {
+			bitmask = 31;
+		}
+
+		for(int field = 0; field < 5; ++field) {
+			note[field] = 0;
+			if((bitmask & 1) == 1 && data_offset < this.pattern_data.length) {
+				note[field] = this.pattern_data[data_offset] & 255;
+				++data_offset;
+			}
+
+			bitmask >>= 1;
+		}
+
+		return data_offset;
+	}
+}
--- net/minecraft/src/LoadingScreenRenderer.java
+++ net/minecraft/src/LoadingScreenRenderer.java
@@ -79,7 +79,7 @@
 				GL11.glTranslatef(0.0F, 0.0F, -200.0F);
 				GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT | GL11.GL_COLOR_BUFFER_BIT);
 				Tessellator var7 = Tessellator.instance;
-				int var8 = this.mc.renderEngine.getTexture("/gui/background.png");
+				int var8 = this.mc.thePlayer != null && this.mc.thePlayer.dimension == -1 ? this.mc.renderEngine.getTexture("/gui/backgroundnether.png") : this.mc.renderEngine.getTexture("/gui/background.png");
 				GL11.glBindTexture(GL11.GL_TEXTURE_2D, var8);
 				float var9 = 32.0F;
 				var7.startDrawingQuads();
--- net/minecraft/src/BlockOreBlock.java
+++ net/minecraft/src/BlockOreBlock.java
@@ -6,7 +6,22 @@
 		this.blockIndexInTexture = var2;
 	}
 
+	public int getBlockTexture(IBlockAccess var1, int var2, int var3, int var4, int var5) {
+		if(var5 == 1) { //top
+			return this.blockIndexInTexture - 16;
+		} else if (var5 == 0){ //Bottom
+			return this.blockIndexInTexture + 16;
+		} else {
+			return this.blockIndexInTexture;
+		}
+	}
 	public int getBlockTextureFromSide(int var1) {
-		return this.blockIndexInTexture - 16;
+		if(var1 == 1){ //Top
+			return this.blockIndexInTexture - 16;
+		} else if (var1 == 0){ //Bottom
+			return this.blockIndexInTexture + 16;
+		} else {
+			return this.blockIndexInTexture;
+		}
 	}
 }
--- net/minecraft/src/RenderFish.java
+++ net/minecraft/src/RenderFish.java
@@ -41,7 +41,7 @@
 			double var30 = var1.field_4097_b.prevPosX + (var1.field_4097_b.posX - var1.field_4097_b.prevPosX) * (double)var9 - var24 * 0.7D - var22 * 0.5D * var28;
 			double var32 = var1.field_4097_b.prevPosY + (var1.field_4097_b.posY - var1.field_4097_b.prevPosY) * (double)var9 - var26 * 0.5D;
 			double var34 = var1.field_4097_b.prevPosZ + (var1.field_4097_b.posZ - var1.field_4097_b.prevPosZ) * (double)var9 - var22 * 0.7D + var24 * 0.5D * var28;
-			if(this.renderManager.options.thirdPersonView) {
+			if(this.renderManager.options.thirdPersonView > 0) {
 				var20 = (var1.field_4097_b.field_734_o + (var1.field_4097_b.field_735_n - var1.field_4097_b.field_734_o) * var9) * (float)Math.PI / 180.0F;
 				var22 = (double)MathHelper.sin(var20);
 				var24 = (double)MathHelper.cos(var20);
--- net/minecraft/src/RenderItem.java
+++ net/minecraft/src/RenderItem.java
@@ -140,7 +140,7 @@
 				String var6 = "" + var3.stackSize;
 				GL11.glDisable(GL11.GL_LIGHTING);
 				GL11.glDisable(GL11.GL_DEPTH_TEST);
-				var1.drawStringWithShadow(var6, var4 + 19 - 2 - var1.getStringWidth(var6), var5 + 6 + 3, 16777215);
+				var1.drawStringWithShadow(var6, var4 + 19 - 2 - var1.getStringWidth(var6), var5 + 6 + 3, 16777215); //Quantity i think
 				GL11.glEnable(GL11.GL_LIGHTING);
 				GL11.glEnable(GL11.GL_DEPTH_TEST);
 			}
--- /dev/null
+++ net/minecraft/src/OptionInt.java
@@ -1,0 +1,19 @@
+package net.minecraft.src;
+
+public class OptionInt extends Option {
+	private String[] names;
+	public int maxVal;
+	
+	public OptionInt(String n, String dn, int i, String[] na){
+		super(n, dn, i);
+		this.maxVal = na.length;
+		this.names = na;
+	}
+	
+	public final String getDisplayString(Object Value){
+		if ((int) Value < 0 || (int) Value > maxVal){
+			return this.displayName + ": " + (int) Value;
+		}
+		return this.displayName + ": " + this.names[(int) Value];
+	}
+}
--- /dev/null
+++ net/minecraft/src/OptionsPage.java
@@ -1,0 +1,24 @@
+package net.minecraft.src;
+
+public class OptionsPage {
+	public String title;
+	public Option[] options;
+	
+	public OptionsPage(String t, Option... ops){
+		this.options = new Option[ops.length];
+		this.title = t;
+		for(int i = 0; i < ops.length; i++){
+			this.options[i] = ops[i];
+		}
+	}
+	
+	public int getIndexByID(int id){
+		for(int i = 0; i < this.options.length; i++){
+			System.out.println("2: "+this.options[i].identifier+" 3: "+id);
+			if(this.options[i].identifier == id){
+				return i;
+			}
+		}
+		return -1;
+	}
+}
--- net/minecraft/src/EntityMinecart.java
+++ net/minecraft/src/EntityMinecart.java
@@ -167,14 +167,14 @@
 			int var1 = MathHelper.floor_double(this.posX);
 			int var2 = MathHelper.floor_double(this.posY);
 			int var3 = MathHelper.floor_double(this.posZ);
-			if(this.worldObj.getBlockId(var1, var2 - 1, var3) == Block.minecartTrack.blockID) {
+			if(Agrupation.rails.contains(this.worldObj.getBlockId(var1, var2 - 1, var3))) {
 				--var2;
 			}
 
 			double var4 = 0.4D;
 			boolean var6 = false;
 			var7 = 1.0D / 128.0D;
-			if(this.worldObj.getBlockId(var1, var2, var3) == Block.minecartTrack.blockID) {
+			if(Agrupation.rails.contains(this.worldObj.getBlockId(var1, var2, var3))) {
 				Vec3D var9 = this.func_514_g(this.posX, this.posY, this.posZ);
 				int var10 = this.worldObj.getBlockMetadata(var1, var2, var3);
 				this.posY = (double)var2;
@@ -415,11 +415,11 @@
 		int var9 = MathHelper.floor_double(var1);
 		int var10 = MathHelper.floor_double(var3);
 		int var11 = MathHelper.floor_double(var5);
-		if(this.worldObj.getBlockId(var9, var10 - 1, var11) == Block.minecartTrack.blockID) {
+		if(Agrupation.rails.contains(this.worldObj.getBlockId(var9, var10 - 1, var11))) {
 			--var10;
 		}
 
-		if(this.worldObj.getBlockId(var9, var10, var11) == Block.minecartTrack.blockID) {
+		if(Agrupation.rails.contains(this.worldObj.getBlockId(var9, var10, var11))) {
 			int var12 = this.worldObj.getBlockMetadata(var9, var10, var11);
 			var3 = (double)var10;
 			if(var12 >= 2 && var12 <= 5) {
@@ -450,11 +450,11 @@
 		int var7 = MathHelper.floor_double(var1);
 		int var8 = MathHelper.floor_double(var3);
 		int var9 = MathHelper.floor_double(var5);
-		if(this.worldObj.getBlockId(var7, var8 - 1, var9) == Block.minecartTrack.blockID) {
+		if(Agrupation.rails.contains(this.worldObj.getBlockId(var7, var8 - 1, var9))) {
 			--var8;
 		}
 
-		if(this.worldObj.getBlockId(var7, var8, var9) == Block.minecartTrack.blockID) {
+		if(Agrupation.rails.contains(this.worldObj.getBlockId(var7, var8, var9))) {
 			int var10 = this.worldObj.getBlockMetadata(var7, var8, var9);
 			var3 = (double)var8;
 			if(var10 >= 2 && var10 <= 5) {
--- /dev/null
+++ net/minecraft/src/GuiBubble.java
@@ -1,0 +1,23 @@
+package net.minecraft.src;
+
+import net.minecraft.client.Minecraft;
+import org.lwjgl.opengl.GL11;
+
+public class GuiBubble extends Gui {
+	protected int width;
+	protected int height;
+	public String displayString;
+
+	public GuiBubble(String mess) {
+		this.displayString = mess;
+	}
+
+	public void drawBubble(Minecraft var1, int var2, int var3) {
+		String[] lines = splitStringIntoChunks(this.displayString, 32);
+		int i1 = var2 + 12;
+		int i2 = var3 - 12;
+		int i3 = getLengthOfLongestLine(lines, var1.fontRenderer);
+		this.drawGradientRect(i1 - 3, i2 - 3, i1 + i3 + 3, i2 + lines.length * 8 + 3, -1073741824, -1073741824);
+		this.drawMultipleLines(var1.fontRenderer, lines, i1, i2, -1);
+	}
+}
--- net/minecraft/src/GameSettings.java
+++ net/minecraft/src/GameSettings.java
@@ -11,6 +11,8 @@
 public class GameSettings {
 	private static final String[] RENDER_DISTANCES = new String[]{"FAR", "NORMAL", "SHORT", "TINY"};
 	private static final String[] DIFFICULTY_LEVELS = new String[]{"Peaceful", "Easy", "Normal", "Hard"};
+	private static final String[] CLIPBOARD_SCREEN = new String[]{"Keybind", "Always", "Never"};
+	private static final String[] TITLE_BLOCK = new String[]{"All blocks", "Random", "Stone"};
 	public float musicVolume = 1.0F;
 	public float soundVolume = 1.0F;
 	public float mouseSensitivity = 0.5F;
@@ -21,36 +23,71 @@
 	public boolean limitFramerate = false;
 	public boolean fancyGraphics = true;
 	public String skin = "Default";
+	public String watermark = Minecraft.getName();
 	public KeyBinding keyBindForward = new KeyBinding("Forward", 17);
 	public KeyBinding keyBindLeft = new KeyBinding("Left", 30);
 	public KeyBinding keyBindBack = new KeyBinding("Back", 31);
 	public KeyBinding keyBindRight = new KeyBinding("Right", 32);
 	public KeyBinding keyBindJump = new KeyBinding("Jump", 57);
-	public KeyBinding keyBindInventory = new KeyBinding("Inventory", 23);
+	public KeyBinding keyBindInventory = new KeyBinding("Inventory", 18);
 	public KeyBinding keyBindDrop = new KeyBinding("Drop", 16);
 	public KeyBinding keyBindChat = new KeyBinding("Chat", 20);
 	public KeyBinding keyBindToggleFog = new KeyBinding("Toggle fog", 33);
 	public KeyBinding keyBindSneak = new KeyBinding("Sneak", 42);
-	public KeyBinding[] keyBindings = new KeyBinding[]{this.keyBindForward, this.keyBindLeft, this.keyBindBack, this.keyBindRight, this.keyBindJump, this.keyBindSneak, this.keyBindDrop, this.keyBindInventory, this.keyBindChat, this.keyBindToggleFog};
+	public KeyBinding keyBindCheats = new KeyBinding("Cheats", 46);
+	public KeyBinding keyBindClipboard = new KeyBinding("Copy screenshot", 19);
+	public KeyBinding keyBindDebugMenu = new KeyBinding("Debug menu", Keyboard.KEY_F3);
+	public KeyBinding keyBindScreenshot = new KeyBinding("Screenshot", Keyboard.KEY_F2);
+	public KeyBinding keyBindFullscreen = new KeyBinding("Fullscreen", Keyboard.KEY_F11);
+	public KeyBinding keyBindGraph = new KeyBinding("Debug graph", Keyboard.KEY_F4);
+	public KeyBinding keyBindPerspective = new KeyBinding("Perspective", Keyboard.KEY_F5);
+	public KeyBinding keyBindUpdateDisplay = new KeyBinding("Update display", Keyboard.KEY_F7);
+	public KeyBinding keyBindHide = new KeyBinding("Hide gui", Keyboard.KEY_F1);
+	public KeyBinding[] keyBindings = new KeyBinding[]{this.keyBindForward, this.keyBindLeft, this.keyBindBack, this.keyBindRight, this.keyBindJump, this.keyBindSneak, this.keyBindDrop, this.keyBindInventory, this.keyBindChat, this.keyBindToggleFog, this.keyBindCheats, this.keyBindClipboard, this.keyBindDebugMenu, this.keyBindScreenshot, this.keyBindFullscreen, this.keyBindGraph, this.keyBindPerspective, this.keyBindUpdateDisplay, this.keyBindHide};
 	protected Minecraft mc;
 	private File optionsFile;
-	public int numberOfOptions = 10;
 	public int difficulty = 2;
-	public boolean thirdPersonView = false;
+	public int thirdPersonView = 0;
+	public boolean creativeInstaHarvest = true;
+	public boolean creativeDoHarvest = false;
+	public boolean creativeMobsTrackYou = false;
+	public boolean showWatermark = true;
+	public boolean changeWindowTitle = false;
+	public int screenClipboard = 0;
+	public boolean itemNames = true;
+	public int titleBlock = -2;
 	public String field_12259_z = "";
+	public OptionsPage[] pages;
 
 	public GameSettings(Minecraft var1, File var2) {
 		this.mc = var1;
 		this.optionsFile = new File(var2, "options.txt");
 		this.loadOptions();
+		this.initializePages();
 	}
-
+	
 	public GameSettings() {
+		this.initializePages();
+	}
+	
+	public int getNumberOfPages(){
+		return this.pages.length;
+	}
+	
+	public int getNumberOfOptionsInPage(int page){
+		return this.pages[page].options.length;
 	}
 
 	public String getKeyBinding(int var1) {
 		return this.keyBindings[var1].keyDescription + ": " + Keyboard.getKeyName(this.keyBindings[var1].keyCode);
 	}
+	
+	public int getIdentifier(int page, int number){
+		if(page > -1 && page < this.pages.length && number > -1 && number < this.pages[page].options.length){
+			return this.pages[page].options[number].identifier;
+		}
+		return -1;
+	}
 
 	public void setKeyBinding(int var1, int var2) {
 		this.keyBindings[var1].keyCode = var2;
@@ -104,20 +141,172 @@
 			this.fancyGraphics = !this.fancyGraphics;
 			this.mc.field_6323_f.func_958_a();
 		}
+		
+		if(var1 == 10) {
+			this.screenClipboard = this.screenClipboard + var2 == 3 ? 0 : this.screenClipboard + var2;
+		}
+		
+		if(var1 == 11) {
+			this.showWatermark = !this.showWatermark;
+		}
+		
+		if(var1 == 12) {
+			this.changeWindowTitle = !this.changeWindowTitle;
+		}
+		
+		if(var1 == 13) {
+			this.creativeInstaHarvest = !this.creativeInstaHarvest;
+		}
+		
+		if(var1 == 14) {
+			this.creativeDoHarvest = !this.creativeDoHarvest;
+		}
+
+		if(var1 == 15) {
+			this.creativeMobsTrackYou = !this.creativeMobsTrackYou;
+		}
+
+		if(var1 == 16) {
+			this.itemNames = !this.itemNames;
+		}
+
+		if(var1 == 17) {
+			this.titleBlock = this.titleBlock + var2 > -1 ? -2 : this.titleBlock + var2;
+		}
 
 		this.saveOptions();
 	}
 
-	public int getOptionControlType(int var1) {
+	/* public int getOptionControlType(int var1) {
 		return var1 == 0 ? 1 : (var1 == 1 ? 1 : (var1 == 3 ? 1 : 0));
+	} */
+
+	public int getOptionControlType(int page, int position) {
+		if(this.pages[page].options[position] instanceof OptionFloat){
+			return 1;
+		}
+		return 0;
 	}
 
 	public float getOptionFloatValue(int var1) {
 		return var1 == 0 ? this.musicVolume : (var1 == 1 ? this.soundVolume : (var1 == 3 ? this.mouseSensitivity : 0.0F));
 	}
-
+/* 
 	public String getOptionDisplayString(int var1) {
-		return var1 == 0 ? "Music: " + (this.musicVolume > 0.0F ? (int)(this.musicVolume * 100.0F) + "%" : "OFF") : (var1 == 1 ? "Sound: " + (this.soundVolume > 0.0F ? (int)(this.soundVolume * 100.0F) + "%" : "OFF") : (var1 == 2 ? "Invert mouse: " + (this.invertMouse ? "ON" : "OFF") : (var1 == 3 ? (this.mouseSensitivity == 0.0F ? "Sensitivity: *yawn*" : (this.mouseSensitivity == 1.0F ? "Sensitivity: HYPERSPEED!!!" : "Sensitivity: " + (int)(this.mouseSensitivity * 200.0F) + "%")) : (var1 == 4 ? "Render distance: " + RENDER_DISTANCES[this.renderDistance] : (var1 == 5 ? "View bobbing: " + (this.viewBobbing ? "ON" : "OFF") : (var1 == 6 ? "3d anaglyph: " + (this.anaglyph ? "ON" : "OFF") : (var1 == 7 ? "Limit framerate: " + (this.limitFramerate ? "ON" : "OFF") : (var1 == 8 ? "Difficulty: " + DIFFICULTY_LEVELS[this.difficulty] : (var1 == 9 ? "Graphics: " + (this.fancyGraphics ? "FANCY" : "FAST") : "")))))))));
+		return 
+		var1 == 0 ? "Music: " + (this.musicVolume > 0.0F ? (int)(this.musicVolume * 100.0F) + "%" : "OFF") 
+		: (var1 == 1 ? "Sound: " + (this.soundVolume > 0.0F ? (int)(this.soundVolume * 100.0F) + "%" : "OFF") 
+		: (var1 == 2 ? "Invert mouse: " + (this.invertMouse ? "ON" : "OFF") 
+		: (var1 == 3 ? (this.mouseSensitivity == 0.0F ? "Sensitivity: *yawn*" : (this.mouseSensitivity == 1.0F ? "Sensitivity: HYPERSPEED!!!" : "Sensitivity: " + (int)(this.mouseSensitivity * 200.0F) + "%")) 
+		: (var1 == 4 ? "Render distance: " + RENDER_DISTANCES[this.renderDistance] 
+		: (var1 == 5 ? "View bobbing: " + (this.viewBobbing ? "ON" : "OFF") 
+		: (var1 == 6 ? "3d anaglyph: " + (this.anaglyph ? "ON" : "OFF") 
+		: (var1 == 7 ? "Limit framerate: " + (this.limitFramerate ? "ON" : "OFF") 
+		: (var1 == 8 ? "Difficulty: " + DIFFICULTY_LEVELS[this.difficulty] 
+		: (var1 == 9 ? "Graphics: " + (this.fancyGraphics ? "FANCY" : "FAST") 
+		: (var1 == 10 ? "Clipboard screenshot: " + CLIPBOARD_SCREEN[this.screenClipboard]
+		: (var1 == 11 ? "Show watermark: " + (this.showWatermark ? "ON" : "OFF") 
+		: (var1 == 12 ? "Change window title: " + (this.changeWindowTitle ? "ON" : "OFF") 
+		: (var1 == 13 ? "Insta break: " + (this.creativeInstaHarvest ? "ON" : "OFF") 
+		: (var1 == 14 ? "Do harvest: " + (this.creativeDoHarvest ? "ON" : "OFF") 
+		: (var1 == 15 ? "Mobs track you: " + (this.creativeMobsTrackYou ? "ON" : "OFF") 
+		: "")))))))))))))));
+	}
+	 */
+	public String getOptionDisplayString(int page, int position) {
+		try{
+			return this.pages[page].options[position].getDisplayString(this.getValueByIdentifier(this.pages[page].options[position].identifier));
+		} catch(Exception e){
+			e.printStackTrace();
+		}
+		return "Option not found";
+	}
+	
+	public String getOptionDisplayString(int identifier) {
+		for(int i = 0; i < this.pages.length; i++){
+			int var2 = this.pages[i].getIndexByID(identifier);
+			if(var2 != -1){
+				return this.pages[i].options[var2].getDisplayString(getValueByIdentifier(identifier));
+			}
+		}
+		return "Option not found";
+	}
+	
+	public Object getValueByIdentifier(int id){
+		switch (id){
+			case 0:
+				return this.musicVolume;
+			case 1:
+				return this.soundVolume;
+			case 2:
+				return this.invertMouse;
+			case 3:
+				return this.mouseSensitivity;
+			case 4:
+				return this.renderDistance;
+			case 5:
+				return this.viewBobbing;
+			case 6:
+				return this.anaglyph;
+			case 7:
+				return this.limitFramerate;
+			case 8:
+				return this.difficulty;
+			case 9:
+				return this.fancyGraphics;
+			case 10:
+				return this.screenClipboard;
+			case 11:
+				return this.showWatermark;
+			case 12:
+				return this.changeWindowTitle;
+			case 13:
+				return this.creativeInstaHarvest;
+			case 14:
+				return this.creativeDoHarvest;
+			case 15:
+				return this.creativeMobsTrackYou;
+			case 16:
+				return this.itemNames;
+			case 17:
+				return (int) (this.titleBlock + 3);
+			default:
+				return 0.0F;
+		}
+	}
+	
+	public String getDescription(int p, int n){
+		return this.pages[p].options[n].desc;
+	}
+	
+	private void initializePages(){		
+		this.pages = new OptionsPage[]{new OptionsPage(
+			"General",
+			new OptionFloat("music", "Music", 0, 0, 100),
+			new OptionFloat("sound", "Sound", 1, 0, 100),
+			new OptionFloat("mouseSensitivity", "Sensitivity", 3, 0, 200, "*yawn*", "HYPERSPEED!!!"),
+			new OptionBoolean("invertYMouse", "Invert mouse", 2),
+			new OptionBoolean("limitFramerate", "Limit framerate", 7),
+			new OptionInt("difficulty", "Difficulty", 8, DIFFICULTY_LEVELS),
+			new OptionInt("clipboard", "Copy screenshots", 10, CLIPBOARD_SCREEN)
+			), new OptionsPage(
+			"Graphics",
+			new OptionInt("renderDistance", "Render distance", 4, RENDER_DISTANCES),
+			new OptionBoolean("fancyGraphics", "Graphics", 9, "FANCY", "FAST"),
+			new OptionBoolean("bobView", "View bobbing", 5),
+			new OptionBoolean("anaglyph3d", "3d anaglyph", 6),
+			new OptionBoolean("showWatermark", "Show Watermark", 11),
+			new OptionBoolean("changeWindowTitle", "Change window title", 12),
+			new OptionBoolean("itemNames", "Show item names", 16),
+			new OptionInt("titleBlock", "Title logo block", 17, TITLE_BLOCK)
+			), new OptionsPage(
+			"Creative",
+			new OptionBoolean("creativeInstaHarvest", "Insta break", 13),
+			new OptionBoolean("creativeDoHarvest", "Do harvest", 14),
+			new OptionBoolean("creativeMobsTrackYou", "Mobs track you", 15)
+			)
+		};
+		this.pages[0].options[6].setDesc("Copy the screenshots to the clipboard. If set to keybind, you will have to press both the copy screenshot and the screenshot keybinds at the same time to copy it to the clipboard");
 	}
 
 	public void loadOptions() {
@@ -180,9 +369,48 @@
 				if(var3[0].equals("skin")) {
 					this.skin = var3[1];
 				}
-
+				
+				if(var3[0].equals("clipboard")) {
+					this.screenClipboard = Integer.parseInt(var3[1]);
+				}
+				
+				if(var3[0].equals("showWatermark")) {
+					this.showWatermark = var3[1].equals("true");
+				}
+				
+				if(var3[0].equals("changeWindowTitle")) {
+					this.changeWindowTitle = var3[1].equals("true");
+				}
+				
+				if(var3[0].equals("watermark")) {
+					System.out.println("Watermark loaded: "+var3[1]);
+					this.watermark = var3[1];
+				}
+				
+				if(var3[0].equals("creativeInstaHarvest")) {
+					this.creativeInstaHarvest = var3[1].equals("true");
+				}
+				
+				if(var3[0].equals("creativeDoHarvest")) {
+					this.creativeDoHarvest = var3[1].equals("true");
+				}
+
+				if(var3[0].equals("creativeMobsTrackYou")) {
+					this.creativeMobsTrackYou = var3[1].equals("true");
+				}
+
+				if(var3[0].equals("itemNames")) {
+					this.itemNames = var3[1].equals("true");
+				}
+				
+				if(var3[0].equals("titleBlock")) {
+					this.titleBlock = Integer.parseInt(var3[1]);
+				}
+				
 				if(var3[0].equals("lastServer")) {
-					this.field_12259_z = var3[1];
+					if (var3.length == 2){
+						this.field_12259_z = var3[1];
+					}
 				}
 
 				for(int var4 = 0; var4 < this.keyBindings.length; ++var4) {
@@ -195,7 +423,18 @@
 			System.out.println("Failed to load options");
 			var5.printStackTrace();
 		}
-
+		checkWatermark();
+		this.mc.updateCreativeSettings();
+	}
+	
+	private void checkWatermark(){
+		if (watermark.equals("Bloodcraft v0.1") || watermark.equals("Bloodcraft v0.2") || watermark.equals("Mystic Alpha v0.4") || watermark.equals("Mystic Alpha v1.0") || watermark.equals("Mystic Alpha v1.1") || watermark.equals("Mystic Alpha v1.0.1")){
+			watermark = Minecraft.getName();
+		}
+	}
+	
+	public void log(String a){
+		System.out.println(a);
 	}
 
 	private float parseFloat(String var1) {
@@ -216,6 +455,15 @@
 			var1.println("difficulty:" + this.difficulty);
 			var1.println("fancyGraphics:" + this.fancyGraphics);
 			var1.println("skin:" + this.skin);
+			var1.println("watermark:" + this.watermark);
+			var1.println("creativeInstaHarvest:" + this.creativeInstaHarvest);
+			var1.println("creativeDoHarvest:" + this.creativeDoHarvest);
+			var1.println("creativeMobsTrackYou:" + this.creativeMobsTrackYou);
+			var1.println("clipboard:" + this.screenClipboard);
+			var1.println("showWatermark:" + this.showWatermark);
+			var1.println("changeWindowTitle:" + this.changeWindowTitle);
+			var1.println("itemNames:" + this.itemNames);
+			var1.println("titleBlock:" + this.titleBlock);
 			var1.println("lastServer:" + this.field_12259_z);
 
 			for(int var2 = 0; var2 < this.keyBindings.length; ++var2) {
@@ -227,6 +475,11 @@
 			System.out.println("Failed to save options");
 			var3.printStackTrace();
 		}
-
+		this.mc.updateCreativeSettings();
+	}
+	
+	public CreativeSettings transferToPlayer() {
+		CreativeSettings Vset = new CreativeSettings(this.creativeInstaHarvest, this.creativeDoHarvest, this.creativeMobsTrackYou);
+		return Vset;
 	}
 }
--- /dev/null
+++ net/minecraft/src/AlchemyRecipes.java
@@ -1,0 +1,53 @@
+package net.minecraft.src;
+
+import java.util.ArrayList;
+import java.util.Random;
+
+public class AlchemyRecipes{
+	public static AlchemyRecipes recipes = new AlchemyRecipes();
+	private ArrayList<Integer> ingredients = new ArrayList<>();
+	private ArrayList<Integer> results = new ArrayList<>();
+	private ArrayList<Integer> probabilityW = new ArrayList<>();
+	private ArrayList<Integer> probabilityI = new ArrayList<>();
+	
+	public AlchemyRecipes(){
+		this.loadRecipes();
+	}
+	
+	public void loadRecipes(){
+		addRecipe(Item.plumbum.shiftedIndex, Item.nuggetGold.shiftedIndex, 60, 80);
+		addRecipe(Item.slimeBall.shiftedIndex, Item.fireSlimeBall.shiftedIndex, 50, 70);
+		addRecipe(Block.glowingObsidian.blockID, Block.obsidian.blockID, 90, 100);
+		addRecipe(Block.brick.blockID, Block.brickFire.blockID, 70, 90);
+	}
+	
+	public void addRecipe(int i, int r, int p, int p2){
+		this.ingredients.add(i);
+		this.results.add(r);
+		this.probabilityW.add(p);
+		this.probabilityI.add(p2);
+	}
+	
+	public int getResult(int in, Random rand, boolean t){
+		for(int i = 0; i < ingredients.size(); i++){
+			if(ingredients.get(i) == in){
+				int s = rand.nextInt(100);
+				int p = (t ? probabilityI.get(i) : probabilityW.get(i));
+				if(s < p){
+					return results.get(i);
+				}
+				return -1;
+			}
+		}
+		return -1;
+	}
+	
+	public boolean isARecipe(int in){
+		for(int i = 0; i < ingredients.size(); i++){
+			if(ingredients.get(i) == in){
+				return true;
+			}
+		}
+		return false;
+	}
+}
